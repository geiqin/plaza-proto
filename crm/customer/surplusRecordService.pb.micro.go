// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: surplusRecordService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SurplusRecordService service

func NewSurplusRecordServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SurplusRecordService service

type SurplusRecordService interface {
	//增加余额（增加）
	Income(ctx context.Context, in *SurplusRecord, opts ...client.CallOption) (*SurplusRecordResponse, error)
	//扣除余额(支出)
	Expend(ctx context.Context, in *SurplusRecord, opts ...client.CallOption) (*SurplusRecordResponse, error)
	//获得余额记录信息
	Get(ctx context.Context, in *SurplusRecord, opts ...client.CallOption) (*SurplusRecordResponse, error)
	//查询余额记录信息
	Search(ctx context.Context, in *SurplusRecordRequest, opts ...client.CallOption) (*SurplusRecordResponse, error)
}

type surplusRecordService struct {
	c    client.Client
	name string
}

func NewSurplusRecordService(name string, c client.Client) SurplusRecordService {
	return &surplusRecordService{
		c:    c,
		name: name,
	}
}

func (c *surplusRecordService) Income(ctx context.Context, in *SurplusRecord, opts ...client.CallOption) (*SurplusRecordResponse, error) {
	req := c.c.NewRequest(c.name, "SurplusRecordService.Income", in)
	out := new(SurplusRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surplusRecordService) Expend(ctx context.Context, in *SurplusRecord, opts ...client.CallOption) (*SurplusRecordResponse, error) {
	req := c.c.NewRequest(c.name, "SurplusRecordService.Expend", in)
	out := new(SurplusRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surplusRecordService) Get(ctx context.Context, in *SurplusRecord, opts ...client.CallOption) (*SurplusRecordResponse, error) {
	req := c.c.NewRequest(c.name, "SurplusRecordService.Get", in)
	out := new(SurplusRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surplusRecordService) Search(ctx context.Context, in *SurplusRecordRequest, opts ...client.CallOption) (*SurplusRecordResponse, error) {
	req := c.c.NewRequest(c.name, "SurplusRecordService.Search", in)
	out := new(SurplusRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SurplusRecordService service

type SurplusRecordServiceHandler interface {
	//增加余额（增加）
	Income(context.Context, *SurplusRecord, *SurplusRecordResponse) error
	//扣除余额(支出)
	Expend(context.Context, *SurplusRecord, *SurplusRecordResponse) error
	//获得余额记录信息
	Get(context.Context, *SurplusRecord, *SurplusRecordResponse) error
	//查询余额记录信息
	Search(context.Context, *SurplusRecordRequest, *SurplusRecordResponse) error
}

func RegisterSurplusRecordServiceHandler(s server.Server, hdlr SurplusRecordServiceHandler, opts ...server.HandlerOption) error {
	type surplusRecordService interface {
		Income(ctx context.Context, in *SurplusRecord, out *SurplusRecordResponse) error
		Expend(ctx context.Context, in *SurplusRecord, out *SurplusRecordResponse) error
		Get(ctx context.Context, in *SurplusRecord, out *SurplusRecordResponse) error
		Search(ctx context.Context, in *SurplusRecordRequest, out *SurplusRecordResponse) error
	}
	type SurplusRecordService struct {
		surplusRecordService
	}
	h := &surplusRecordServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SurplusRecordService{h}, opts...))
}

type surplusRecordServiceHandler struct {
	SurplusRecordServiceHandler
}

func (h *surplusRecordServiceHandler) Income(ctx context.Context, in *SurplusRecord, out *SurplusRecordResponse) error {
	return h.SurplusRecordServiceHandler.Income(ctx, in, out)
}

func (h *surplusRecordServiceHandler) Expend(ctx context.Context, in *SurplusRecord, out *SurplusRecordResponse) error {
	return h.SurplusRecordServiceHandler.Expend(ctx, in, out)
}

func (h *surplusRecordServiceHandler) Get(ctx context.Context, in *SurplusRecord, out *SurplusRecordResponse) error {
	return h.SurplusRecordServiceHandler.Get(ctx, in, out)
}

func (h *surplusRecordServiceHandler) Search(ctx context.Context, in *SurplusRecordRequest, out *SurplusRecordResponse) error {
	return h.SurplusRecordServiceHandler.Search(ctx, in, out)
}
