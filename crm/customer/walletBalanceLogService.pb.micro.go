// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: walletBalanceLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WalletBalanceLogService service

func NewWalletBalanceLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WalletBalanceLogService service

type WalletBalanceLogService interface {
	//增加保证金（增加）
	Income(ctx context.Context, in *WalletBalanceLog, opts ...client.CallOption) (*WalletBalanceLogResponse, error)
	//扣除保证金(支出)
	Expend(ctx context.Context, in *WalletBalanceLog, opts ...client.CallOption) (*WalletBalanceLogResponse, error)
	//获得保证金记录信息
	Get(ctx context.Context, in *WalletBalanceLog, opts ...client.CallOption) (*WalletBalanceLogResponse, error)
	//查询保证金记录信息
	Search(ctx context.Context, in *WalletBalanceLogRequest, opts ...client.CallOption) (*WalletBalanceLogResponse, error)
}

type walletBalanceLogService struct {
	c    client.Client
	name string
}

func NewWalletBalanceLogService(name string, c client.Client) WalletBalanceLogService {
	return &walletBalanceLogService{
		c:    c,
		name: name,
	}
}

func (c *walletBalanceLogService) Income(ctx context.Context, in *WalletBalanceLog, opts ...client.CallOption) (*WalletBalanceLogResponse, error) {
	req := c.c.NewRequest(c.name, "WalletBalanceLogService.Income", in)
	out := new(WalletBalanceLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletBalanceLogService) Expend(ctx context.Context, in *WalletBalanceLog, opts ...client.CallOption) (*WalletBalanceLogResponse, error) {
	req := c.c.NewRequest(c.name, "WalletBalanceLogService.Expend", in)
	out := new(WalletBalanceLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletBalanceLogService) Get(ctx context.Context, in *WalletBalanceLog, opts ...client.CallOption) (*WalletBalanceLogResponse, error) {
	req := c.c.NewRequest(c.name, "WalletBalanceLogService.Get", in)
	out := new(WalletBalanceLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletBalanceLogService) Search(ctx context.Context, in *WalletBalanceLogRequest, opts ...client.CallOption) (*WalletBalanceLogResponse, error) {
	req := c.c.NewRequest(c.name, "WalletBalanceLogService.Search", in)
	out := new(WalletBalanceLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletBalanceLogService service

type WalletBalanceLogServiceHandler interface {
	//增加保证金（增加）
	Income(context.Context, *WalletBalanceLog, *WalletBalanceLogResponse) error
	//扣除保证金(支出)
	Expend(context.Context, *WalletBalanceLog, *WalletBalanceLogResponse) error
	//获得保证金记录信息
	Get(context.Context, *WalletBalanceLog, *WalletBalanceLogResponse) error
	//查询保证金记录信息
	Search(context.Context, *WalletBalanceLogRequest, *WalletBalanceLogResponse) error
}

func RegisterWalletBalanceLogServiceHandler(s server.Server, hdlr WalletBalanceLogServiceHandler, opts ...server.HandlerOption) error {
	type walletBalanceLogService interface {
		Income(ctx context.Context, in *WalletBalanceLog, out *WalletBalanceLogResponse) error
		Expend(ctx context.Context, in *WalletBalanceLog, out *WalletBalanceLogResponse) error
		Get(ctx context.Context, in *WalletBalanceLog, out *WalletBalanceLogResponse) error
		Search(ctx context.Context, in *WalletBalanceLogRequest, out *WalletBalanceLogResponse) error
	}
	type WalletBalanceLogService struct {
		walletBalanceLogService
	}
	h := &walletBalanceLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WalletBalanceLogService{h}, opts...))
}

type walletBalanceLogServiceHandler struct {
	WalletBalanceLogServiceHandler
}

func (h *walletBalanceLogServiceHandler) Income(ctx context.Context, in *WalletBalanceLog, out *WalletBalanceLogResponse) error {
	return h.WalletBalanceLogServiceHandler.Income(ctx, in, out)
}

func (h *walletBalanceLogServiceHandler) Expend(ctx context.Context, in *WalletBalanceLog, out *WalletBalanceLogResponse) error {
	return h.WalletBalanceLogServiceHandler.Expend(ctx, in, out)
}

func (h *walletBalanceLogServiceHandler) Get(ctx context.Context, in *WalletBalanceLog, out *WalletBalanceLogResponse) error {
	return h.WalletBalanceLogServiceHandler.Get(ctx, in, out)
}

func (h *walletBalanceLogServiceHandler) Search(ctx context.Context, in *WalletBalanceLogRequest, out *WalletBalanceLogResponse) error {
	return h.WalletBalanceLogServiceHandler.Search(ctx, in, out)
}
