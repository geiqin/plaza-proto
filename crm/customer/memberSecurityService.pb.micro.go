// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: memberSecurityService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MemberSecurityService service

func NewMemberSecurityServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MemberSecurityService service

type MemberSecurityService interface {
	//显示信息
	Display(ctx context.Context, in *MemberSecurityRequest, opts ...client.CallOption) (*MemberSecurityResponse, error)
	//判断有无密码保护
	HasPwd(ctx context.Context, in *MemberSecurityRequest, opts ...client.CallOption) (*MemberSecurityResponse, error)
	//创建密码(未设置密码前可用)
	CreatePwd(ctx context.Context, in *MemberSecurityRequest, opts ...client.CallOption) (*MemberSecurityResponse, error)
	//修改密码
	ModifyPwd(ctx context.Context, in *MemberSecurityRequest, opts ...client.CallOption) (*MemberSecurityResponse, error)
	//注销账户
	Destroy(ctx context.Context, in *MemberSecurityRequest, opts ...client.CallOption) (*MemberSecurityResponse, error)
}

type memberSecurityService struct {
	c    client.Client
	name string
}

func NewMemberSecurityService(name string, c client.Client) MemberSecurityService {
	return &memberSecurityService{
		c:    c,
		name: name,
	}
}

func (c *memberSecurityService) Display(ctx context.Context, in *MemberSecurityRequest, opts ...client.CallOption) (*MemberSecurityResponse, error) {
	req := c.c.NewRequest(c.name, "MemberSecurityService.Display", in)
	out := new(MemberSecurityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberSecurityService) HasPwd(ctx context.Context, in *MemberSecurityRequest, opts ...client.CallOption) (*MemberSecurityResponse, error) {
	req := c.c.NewRequest(c.name, "MemberSecurityService.HasPwd", in)
	out := new(MemberSecurityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberSecurityService) CreatePwd(ctx context.Context, in *MemberSecurityRequest, opts ...client.CallOption) (*MemberSecurityResponse, error) {
	req := c.c.NewRequest(c.name, "MemberSecurityService.CreatePwd", in)
	out := new(MemberSecurityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberSecurityService) ModifyPwd(ctx context.Context, in *MemberSecurityRequest, opts ...client.CallOption) (*MemberSecurityResponse, error) {
	req := c.c.NewRequest(c.name, "MemberSecurityService.ModifyPwd", in)
	out := new(MemberSecurityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberSecurityService) Destroy(ctx context.Context, in *MemberSecurityRequest, opts ...client.CallOption) (*MemberSecurityResponse, error) {
	req := c.c.NewRequest(c.name, "MemberSecurityService.Destroy", in)
	out := new(MemberSecurityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MemberSecurityService service

type MemberSecurityServiceHandler interface {
	//显示信息
	Display(context.Context, *MemberSecurityRequest, *MemberSecurityResponse) error
	//判断有无密码保护
	HasPwd(context.Context, *MemberSecurityRequest, *MemberSecurityResponse) error
	//创建密码(未设置密码前可用)
	CreatePwd(context.Context, *MemberSecurityRequest, *MemberSecurityResponse) error
	//修改密码
	ModifyPwd(context.Context, *MemberSecurityRequest, *MemberSecurityResponse) error
	//注销账户
	Destroy(context.Context, *MemberSecurityRequest, *MemberSecurityResponse) error
}

func RegisterMemberSecurityServiceHandler(s server.Server, hdlr MemberSecurityServiceHandler, opts ...server.HandlerOption) error {
	type memberSecurityService interface {
		Display(ctx context.Context, in *MemberSecurityRequest, out *MemberSecurityResponse) error
		HasPwd(ctx context.Context, in *MemberSecurityRequest, out *MemberSecurityResponse) error
		CreatePwd(ctx context.Context, in *MemberSecurityRequest, out *MemberSecurityResponse) error
		ModifyPwd(ctx context.Context, in *MemberSecurityRequest, out *MemberSecurityResponse) error
		Destroy(ctx context.Context, in *MemberSecurityRequest, out *MemberSecurityResponse) error
	}
	type MemberSecurityService struct {
		memberSecurityService
	}
	h := &memberSecurityServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MemberSecurityService{h}, opts...))
}

type memberSecurityServiceHandler struct {
	MemberSecurityServiceHandler
}

func (h *memberSecurityServiceHandler) Display(ctx context.Context, in *MemberSecurityRequest, out *MemberSecurityResponse) error {
	return h.MemberSecurityServiceHandler.Display(ctx, in, out)
}

func (h *memberSecurityServiceHandler) HasPwd(ctx context.Context, in *MemberSecurityRequest, out *MemberSecurityResponse) error {
	return h.MemberSecurityServiceHandler.HasPwd(ctx, in, out)
}

func (h *memberSecurityServiceHandler) CreatePwd(ctx context.Context, in *MemberSecurityRequest, out *MemberSecurityResponse) error {
	return h.MemberSecurityServiceHandler.CreatePwd(ctx, in, out)
}

func (h *memberSecurityServiceHandler) ModifyPwd(ctx context.Context, in *MemberSecurityRequest, out *MemberSecurityResponse) error {
	return h.MemberSecurityServiceHandler.ModifyPwd(ctx, in, out)
}

func (h *memberSecurityServiceHandler) Destroy(ctx context.Context, in *MemberSecurityRequest, out *MemberSecurityResponse) error {
	return h.MemberSecurityServiceHandler.Destroy(ctx, in, out)
}
