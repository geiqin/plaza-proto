// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: walletCashLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WalletCashLogService service

func NewWalletCashLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WalletCashLogService service

type WalletCashLogService interface {
	//提现提交 - 确认
	Create(ctx context.Context, in *WalletCashLog, opts ...client.CallOption) (*WalletCashLogResponse, error)
	//获得提现信息
	Get(ctx context.Context, in *WalletCashLog, opts ...client.CallOption) (*WalletCashLogResponse, error)
	//提现详情
	Detail(ctx context.Context, in *WalletCashLog, opts ...client.CallOption) (*WalletCashLogResponse, error)
	//查询提现信息
	Search(ctx context.Context, in *WalletCashLogRequest, opts ...client.CallOption) (*WalletCashLogResponse, error)
}

type walletCashLogService struct {
	c    client.Client
	name string
}

func NewWalletCashLogService(name string, c client.Client) WalletCashLogService {
	return &walletCashLogService{
		c:    c,
		name: name,
	}
}

func (c *walletCashLogService) Create(ctx context.Context, in *WalletCashLog, opts ...client.CallOption) (*WalletCashLogResponse, error) {
	req := c.c.NewRequest(c.name, "WalletCashLogService.Create", in)
	out := new(WalletCashLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletCashLogService) Get(ctx context.Context, in *WalletCashLog, opts ...client.CallOption) (*WalletCashLogResponse, error) {
	req := c.c.NewRequest(c.name, "WalletCashLogService.Get", in)
	out := new(WalletCashLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletCashLogService) Detail(ctx context.Context, in *WalletCashLog, opts ...client.CallOption) (*WalletCashLogResponse, error) {
	req := c.c.NewRequest(c.name, "WalletCashLogService.Detail", in)
	out := new(WalletCashLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletCashLogService) Search(ctx context.Context, in *WalletCashLogRequest, opts ...client.CallOption) (*WalletCashLogResponse, error) {
	req := c.c.NewRequest(c.name, "WalletCashLogService.Search", in)
	out := new(WalletCashLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletCashLogService service

type WalletCashLogServiceHandler interface {
	//提现提交 - 确认
	Create(context.Context, *WalletCashLog, *WalletCashLogResponse) error
	//获得提现信息
	Get(context.Context, *WalletCashLog, *WalletCashLogResponse) error
	//提现详情
	Detail(context.Context, *WalletCashLog, *WalletCashLogResponse) error
	//查询提现信息
	Search(context.Context, *WalletCashLogRequest, *WalletCashLogResponse) error
}

func RegisterWalletCashLogServiceHandler(s server.Server, hdlr WalletCashLogServiceHandler, opts ...server.HandlerOption) error {
	type walletCashLogService interface {
		Create(ctx context.Context, in *WalletCashLog, out *WalletCashLogResponse) error
		Get(ctx context.Context, in *WalletCashLog, out *WalletCashLogResponse) error
		Detail(ctx context.Context, in *WalletCashLog, out *WalletCashLogResponse) error
		Search(ctx context.Context, in *WalletCashLogRequest, out *WalletCashLogResponse) error
	}
	type WalletCashLogService struct {
		walletCashLogService
	}
	h := &walletCashLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WalletCashLogService{h}, opts...))
}

type walletCashLogServiceHandler struct {
	WalletCashLogServiceHandler
}

func (h *walletCashLogServiceHandler) Create(ctx context.Context, in *WalletCashLog, out *WalletCashLogResponse) error {
	return h.WalletCashLogServiceHandler.Create(ctx, in, out)
}

func (h *walletCashLogServiceHandler) Get(ctx context.Context, in *WalletCashLog, out *WalletCashLogResponse) error {
	return h.WalletCashLogServiceHandler.Get(ctx, in, out)
}

func (h *walletCashLogServiceHandler) Detail(ctx context.Context, in *WalletCashLog, out *WalletCashLogResponse) error {
	return h.WalletCashLogServiceHandler.Detail(ctx, in, out)
}

func (h *walletCashLogServiceHandler) Search(ctx context.Context, in *WalletCashLogRequest, out *WalletCashLogResponse) error {
	return h.WalletCashLogServiceHandler.Search(ctx, in, out)
}
