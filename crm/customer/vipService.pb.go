// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: vipService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Vip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                        //ID
	Type             string      `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`                                                     //类型：0免费会员，1付费会员
	Name             string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`                                                     //等级名称
	IconId           int64       `protobuf:"varint,4,opt,name=icon_id,json=iconId,proto3" json:"icon_id"`                                  //图标ID
	IconUrl          string      `protobuf:"bytes,5,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url"`                                //图标URL
	BgMode           int32       `protobuf:"varint,6,opt,name=bg_mode,json=bgMode,proto3" json:"bg_mode"`                                  //背景模式：1背景颜色，2背景图片
	BgColor          string      `protobuf:"bytes,7,opt,name=bg_color,json=bgColor,proto3" json:"bg_color"`                                //卡面背景颜色
	BgImageId        int64       `protobuf:"varint,8,opt,name=bg_image_id,json=bgImageId,proto3" json:"bg_image_id"`                       //背景图ID
	BgImageUrl       string      `protobuf:"bytes,9,opt,name=bg_image_url,json=bgImageUrl,proto3" json:"bg_image_url"`                     //背景图URL
	MinLevelIntegral int64       `protobuf:"varint,10,opt,name=min_level_integral,json=minLevelIntegral,proto3" json:"min_level_integral"` //需要最低积分
	MaxLevelIntegral int64       `protobuf:"varint,11,opt,name=max_level_integral,json=maxLevelIntegral,proto3" json:"max_level_integral"` //需要最大积分
	Description      string      `protobuf:"bytes,12,opt,name=description,proto3" json:"description"`                                      //等级描述/使用须知
	IsFreePostage    string      `protobuf:"bytes,13,opt,name=is_free_postage,json=isFreePostage,proto3" json:"is_free_postage"`           //是否会员包邮(会员权益)(0否，1是)
	IsMemberDiscount string      `protobuf:"bytes,14,opt,name=is_member_discount,json=isMemberDiscount,proto3" json:"is_member_discount"`  //是否会员折扣(会员权益)(0否，1是)
	IsMemberPrice    string      `protobuf:"bytes,15,opt,name=is_member_price,json=isMemberPrice,proto3" json:"is_member_price"`           //是否会员价(会员权益)：单独设置会员价活动的商品，不享受消费折扣(0否，1是)
	IsPointRate      string      `protobuf:"bytes,16,opt,name=is_point_rate,json=isPointRate,proto3" json:"is_point_rate"`                 //是否积分回馈倍率(0否，1是)
	IsUpgradePackage string      `protobuf:"bytes,17,opt,name=is_upgrade_package,json=isUpgradePackage,proto3" json:"is_upgrade_package"`  //是否有升级包(0否，1是)
	DiscountRate     float32     `protobuf:"fixed32,18,opt,name=discount_rate,json=discountRate,proto3" json:"discount_rate"`              //会员折扣率
	PointRate        float32     `protobuf:"fixed32,19,opt,name=point_rate,json=pointRate,proto3" json:"point_rate"`                       //积分回馈倍率
	Status           string      `protobuf:"bytes,20,opt,name=status,proto3" json:"status"`                                                //状态：启用，禁用
	CreatedAt        string      `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt        string      `protobuf:"bytes,22,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	UpgradePackage   *VipPackage `protobuf:"bytes,23,opt,name=upgrade_package,json=upgradePackage,proto3" json:"upgrade_package"`
	Benefits         []*Benefit  `protobuf:"bytes,24,rep,name=benefits,proto3" json:"benefits"`
}

func (x *Vip) Reset() {
	*x = Vip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vip) ProtoMessage() {}

func (x *Vip) ProtoReflect() protoreflect.Message {
	mi := &file_vipService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vip.ProtoReflect.Descriptor instead.
func (*Vip) Descriptor() ([]byte, []int) {
	return file_vipService_proto_rawDescGZIP(), []int{0}
}

func (x *Vip) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Vip) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Vip) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vip) GetIconId() int64 {
	if x != nil {
		return x.IconId
	}
	return 0
}

func (x *Vip) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *Vip) GetBgMode() int32 {
	if x != nil {
		return x.BgMode
	}
	return 0
}

func (x *Vip) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *Vip) GetBgImageId() int64 {
	if x != nil {
		return x.BgImageId
	}
	return 0
}

func (x *Vip) GetBgImageUrl() string {
	if x != nil {
		return x.BgImageUrl
	}
	return ""
}

func (x *Vip) GetMinLevelIntegral() int64 {
	if x != nil {
		return x.MinLevelIntegral
	}
	return 0
}

func (x *Vip) GetMaxLevelIntegral() int64 {
	if x != nil {
		return x.MaxLevelIntegral
	}
	return 0
}

func (x *Vip) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Vip) GetIsFreePostage() string {
	if x != nil {
		return x.IsFreePostage
	}
	return ""
}

func (x *Vip) GetIsMemberDiscount() string {
	if x != nil {
		return x.IsMemberDiscount
	}
	return ""
}

func (x *Vip) GetIsMemberPrice() string {
	if x != nil {
		return x.IsMemberPrice
	}
	return ""
}

func (x *Vip) GetIsPointRate() string {
	if x != nil {
		return x.IsPointRate
	}
	return ""
}

func (x *Vip) GetIsUpgradePackage() string {
	if x != nil {
		return x.IsUpgradePackage
	}
	return ""
}

func (x *Vip) GetDiscountRate() float32 {
	if x != nil {
		return x.DiscountRate
	}
	return 0
}

func (x *Vip) GetPointRate() float32 {
	if x != nil {
		return x.PointRate
	}
	return 0
}

func (x *Vip) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Vip) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Vip) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Vip) GetUpgradePackage() *VipPackage {
	if x != nil {
		return x.UpgradePackage
	}
	return nil
}

func (x *Vip) GetBenefits() []*Benefit {
	if x != nil {
		return x.Benefits
	}
	return nil
}

type VipPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsGiveIntegral string                  `protobuf:"bytes,1,opt,name=is_give_integral,json=isGiveIntegral,proto3" json:"is_give_integral"` //是否送积分(0否，1是)
	IsGiveCoupon   string                  `protobuf:"bytes,2,opt,name=is_give_coupon,json=isGiveCoupon,proto3" json:"is_give_coupon"`       //是否会员折扣(会员权益)(0否，1是)
	IsGiveGift     string                  `protobuf:"bytes,3,opt,name=is_give_gift,json=isGiveGift,proto3" json:"is_give_gift"`             //是否会员价(会员权益)：单独设置会员价活动的商品，不享受消费折扣(0否，1是)
	GiveIntegral   int64                   `protobuf:"varint,4,opt,name=give_integral,json=giveIntegral,proto3" json:"give_integral"`        //送积积分
	GiveCouponData []*VipPackageGiveCoupon `protobuf:"bytes,5,rep,name=give_coupon_data,json=giveCouponData,proto3" json:"give_coupon_data"` //赠送优惠劵数据
	GiveGiftData   []*VipPackageGiveGift   `protobuf:"bytes,6,rep,name=give_gift_data,json=giveGiftData,proto3" json:"give_gift_data"`       //赠送赠品数据
}

func (x *VipPackage) Reset() {
	*x = VipPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPackage) ProtoMessage() {}

func (x *VipPackage) ProtoReflect() protoreflect.Message {
	mi := &file_vipService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPackage.ProtoReflect.Descriptor instead.
func (*VipPackage) Descriptor() ([]byte, []int) {
	return file_vipService_proto_rawDescGZIP(), []int{1}
}

func (x *VipPackage) GetIsGiveIntegral() string {
	if x != nil {
		return x.IsGiveIntegral
	}
	return ""
}

func (x *VipPackage) GetIsGiveCoupon() string {
	if x != nil {
		return x.IsGiveCoupon
	}
	return ""
}

func (x *VipPackage) GetIsGiveGift() string {
	if x != nil {
		return x.IsGiveGift
	}
	return ""
}

func (x *VipPackage) GetGiveIntegral() int64 {
	if x != nil {
		return x.GiveIntegral
	}
	return 0
}

func (x *VipPackage) GetGiveCouponData() []*VipPackageGiveCoupon {
	if x != nil {
		return x.GiveCouponData
	}
	return nil
}

func (x *VipPackage) GetGiveGiftData() []*VipPackageGiveGift {
	if x != nil {
		return x.GiveGiftData
	}
	return nil
}

type VipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged    int32 `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	//以下为自定义参数
	Id     int32  `protobuf:"varint,3,opt,name=id,proto3" json:"id"`
	Name   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	Type   string `protobuf:"bytes,5,opt,name=type,proto3" json:"type"`
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
}

func (x *VipRequest) Reset() {
	*x = VipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipRequest) ProtoMessage() {}

func (x *VipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vipService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipRequest.ProtoReflect.Descriptor instead.
func (*VipRequest) Descriptor() ([]byte, []int) {
	return file_vipService_proto_rawDescGZIP(), []int{2}
}

func (x *VipRequest) GetPaged() int32 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *VipRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *VipRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VipRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VipRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VipRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type VipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Vip          `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items  []*Vip        `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Info   *common.Info  `protobuf:"bytes,4,opt,name=info,proto3" json:"info"`
}

func (x *VipData) Reset() {
	*x = VipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipData) ProtoMessage() {}

func (x *VipData) ProtoReflect() protoreflect.Message {
	mi := &file_vipService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipData.ProtoReflect.Descriptor instead.
func (*VipData) Descriptor() ([]byte, []int) {
	return file_vipService_proto_rawDescGZIP(), []int{3}
}

func (x *VipData) GetEntity() *Vip {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *VipData) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *VipData) GetItems() []*Vip {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *VipData) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type VipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *VipData      `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Error *common.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
}

func (x *VipResponse) Reset() {
	*x = VipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipResponse) ProtoMessage() {}

func (x *VipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vipService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipResponse.ProtoReflect.Descriptor instead.
func (*VipResponse) Descriptor() ([]byte, []int) {
	return file_vipService_proto_rawDescGZIP(), []int{4}
}

func (x *VipResponse) GetData() *VipData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VipResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type VipPackageGiveCoupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId int64  `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Number  int32  `protobuf:"varint,3,opt,name=number,proto3" json:"number"`
}

func (x *VipPackageGiveCoupon) Reset() {
	*x = VipPackageGiveCoupon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPackageGiveCoupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPackageGiveCoupon) ProtoMessage() {}

func (x *VipPackageGiveCoupon) ProtoReflect() protoreflect.Message {
	mi := &file_vipService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPackageGiveCoupon.ProtoReflect.Descriptor instead.
func (*VipPackageGiveCoupon) Descriptor() ([]byte, []int) {
	return file_vipService_proto_rawDescGZIP(), []int{1, 0}
}

func (x *VipPackageGiveCoupon) GetBatchId() int64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *VipPackageGiveCoupon) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VipPackageGiveCoupon) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type VipPackageGiveGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId    int64  `protobuf:"varint,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Unit     string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit"`
	ImageUrl string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	Number   int32  `protobuf:"varint,5,opt,name=number,proto3" json:"number"`
}

func (x *VipPackageGiveGift) Reset() {
	*x = VipPackageGiveGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPackageGiveGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPackageGiveGift) ProtoMessage() {}

func (x *VipPackageGiveGift) ProtoReflect() protoreflect.Message {
	mi := &file_vipService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPackageGiveGift.ProtoReflect.Descriptor instead.
func (*VipPackageGiveGift) Descriptor() ([]byte, []int) {
	return file_vipService_proto_rawDescGZIP(), []int{1, 1}
}

func (x *VipPackageGiveGift) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *VipPackageGiveGift) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VipPackageGiveGift) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *VipPackageGiveGift) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *VipPackageGiveGift) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

var File_vipService_proto protoreflect.FileDescriptor

var file_vipService_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x06, 0x0a, 0x03, 0x56, 0x69, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x0a,
	0x0b, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x69, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x73, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x08, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x73, 0x22, 0x91, 0x04, 0x0a, 0x0a, 0x56, 0x69, 0x70, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x73, 0x47, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x47, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x47, 0x69,
	0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x10, 0x67,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x56, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x0e, 0x67, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0e, 0x67, 0x69, 0x76, 0x65, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x52,
	0x0c, 0x67, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x56, 0x0a,
	0x0b, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x81, 0x01, 0x0a, 0x09, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x67,
	0x69, 0x66, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x56, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x07,
	0x56, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69,
	0x70, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x0b, 0x56, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xc1, 0x02, 0x0a, 0x0a, 0x56, 0x69, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x1a, 0x15, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x1a,
	0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69,
	0x70, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70,
	0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vipService_proto_rawDescOnce sync.Once
	file_vipService_proto_rawDescData = file_vipService_proto_rawDesc
)

func file_vipService_proto_rawDescGZIP() []byte {
	file_vipService_proto_rawDescOnce.Do(func() {
		file_vipService_proto_rawDescData = protoimpl.X.CompressGZIP(file_vipService_proto_rawDescData)
	})
	return file_vipService_proto_rawDescData
}

var file_vipService_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_vipService_proto_goTypes = []interface{}{
	(*Vip)(nil),                  // 0: services.Vip
	(*VipPackage)(nil),           // 1: services.VipPackage
	(*VipRequest)(nil),           // 2: services.VipRequest
	(*VipData)(nil),              // 3: services.VipData
	(*VipResponse)(nil),          // 4: services.VipResponse
	(*VipPackageGiveCoupon)(nil), // 5: services.VipPackage.give_coupon
	(*VipPackageGiveGift)(nil),   // 6: services.VipPackage.give_gift
	(*Benefit)(nil),              // 7: services.Benefit
	(*common.Pager)(nil),         // 8: common.Pager
	(*common.Info)(nil),          // 9: common.Info
	(*common.Error)(nil),         // 10: common.Error
}
var file_vipService_proto_depIdxs = []int32{
	1,  // 0: services.Vip.upgrade_package:type_name -> services.VipPackage
	7,  // 1: services.Vip.benefits:type_name -> services.Benefit
	5,  // 2: services.VipPackage.give_coupon_data:type_name -> services.VipPackage.give_coupon
	6,  // 3: services.VipPackage.give_gift_data:type_name -> services.VipPackage.give_gift
	0,  // 4: services.VipData.entity:type_name -> services.Vip
	8,  // 5: services.VipData.pager:type_name -> common.Pager
	0,  // 6: services.VipData.items:type_name -> services.Vip
	9,  // 7: services.VipData.info:type_name -> common.Info
	3,  // 8: services.VipResponse.data:type_name -> services.VipData
	10, // 9: services.VipResponse.error:type_name -> common.Error
	0,  // 10: services.VipService.Create:input_type -> services.Vip
	0,  // 11: services.VipService.Update:input_type -> services.Vip
	0,  // 12: services.VipService.Delete:input_type -> services.Vip
	0,  // 13: services.VipService.Get:input_type -> services.Vip
	2,  // 14: services.VipService.Search:input_type -> services.VipRequest
	2,  // 15: services.VipService.List:input_type -> services.VipRequest
	4,  // 16: services.VipService.Create:output_type -> services.VipResponse
	4,  // 17: services.VipService.Update:output_type -> services.VipResponse
	4,  // 18: services.VipService.Delete:output_type -> services.VipResponse
	4,  // 19: services.VipService.Get:output_type -> services.VipResponse
	4,  // 20: services.VipService.Search:output_type -> services.VipResponse
	4,  // 21: services.VipService.List:output_type -> services.VipResponse
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_vipService_proto_init() }
func file_vipService_proto_init() {
	if File_vipService_proto != nil {
		return
	}
	file_benefitService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vipService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPackageGiveCoupon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPackageGiveGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vipService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vipService_proto_goTypes,
		DependencyIndexes: file_vipService_proto_depIdxs,
		MessageInfos:      file_vipService_proto_msgTypes,
	}.Build()
	File_vipService_proto = out.File
	file_vipService_proto_rawDesc = nil
	file_vipService_proto_goTypes = nil
	file_vipService_proto_depIdxs = nil
}
