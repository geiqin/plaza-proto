// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: memberService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                     //ID
	Type                       string           `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`                                                  //类型：0个人,1企业
	NumberCode                 string           `protobuf:"bytes,3,opt,name=number_code,json=numberCode,proto3" json:"number_code"`                    //会员编号
	Username                   string           `protobuf:"bytes,4,opt,name=username,proto3" json:"username"`                                          //用户名称
	Nickname                   string           `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname"`                                          //用户昵称
	Gender                     string           `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender"`                                              //性别:0=未知,1=男,2=女
	Birthday                   string           `protobuf:"bytes,7,opt,name=birthday,proto3" json:"birthday"`                                          //会员生日
	AreaId                     int64            `protobuf:"varint,8,opt,name=area_id,json=areaId,proto3" json:"area_id"`                               //区域ID
	ProvinceName               string           `protobuf:"bytes,9,opt,name=province_name,json=provinceName,proto3" json:"province_name"`              //所在省
	CityName                   string           `protobuf:"bytes,10,opt,name=city_name,json=cityName,proto3" json:"city_name"`                         //所在市
	CountyName                 string           `protobuf:"bytes,11,opt,name=county_name,json=countyName,proto3" json:"county_name"`                   //所在区/县
	Address                    string           `protobuf:"bytes,12,opt,name=address,proto3" json:"address"`                                           //详细地址
	Email                      string           `protobuf:"bytes,13,opt,name=email,proto3" json:"email"`                                               //邮箱
	Mobile                     string           `protobuf:"bytes,14,opt,name=mobile,proto3" json:"mobile"`                                             //手机号
	AvatarId                   int64            `protobuf:"varint,15,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id"`                        //会员头像ID
	AvatarUrl                  string           `protobuf:"bytes,16,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url"`                      //会员头像url地址
	VipLevelId                 int32            `protobuf:"varint,17,opt,name=vip_level_id,json=vipLevelId,proto3" json:"vip_level_id"`                //会员等级ID
	Integral                   int64            `protobuf:"varint,18,opt,name=integral,proto3" json:"integral"`                                        //会员积分（可兑换）
	FrozenIntegral             int64            `protobuf:"varint,19,opt,name=frozen_integral,json=frozenIntegral,proto3" json:"frozen_integral"`      //冻结积分
	LevelIntegral              int64            `protobuf:"varint,20,opt,name=level_integral,json=levelIntegral,proto3" json:"level_integral"`         //会员等级积分(升级专用)
	TotalOrderNum              int32            `protobuf:"varint,21,opt,name=total_order_num,json=totalOrderNum,proto3" json:"total_order_num"`       //成交订单笔数
	TotalOrderMoney            int64            `protobuf:"varint,22,opt,name=total_order_money,json=totalOrderMoney,proto3" json:"total_order_money"` //成交订单总额,单位:元
	CommentNum                 int32            `protobuf:"varint,23,opt,name=comment_num,json=commentNum,proto3" json:"comment_num"`                  //评价总数
	CollectNum                 int32            `protobuf:"varint,24,opt,name=collect_num,json=collectNum,proto3" json:"collect_num"`                  //商品收藏总数
	ReferrerId                 int64            `protobuf:"varint,25,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id"`                  //推荐人ID
	IsTrusted                  string           `protobuf:"bytes,26,opt,name=is_trusted,json=isTrusted,proto3" json:"is_trusted"`                      //已实名认证
	IsBindMobile               string           `protobuf:"bytes,27,opt,name=is_bind_mobile,json=isBindMobile,proto3" json:"is_bind_mobile"`           //已绑定手机
	IsBindEmail                string           `protobuf:"bytes,28,opt,name=is_bind_email,json=isBindEmail,proto3" json:"is_bind_email"`              //已绑定邮箱
	IsBindWx                   string           `protobuf:"bytes,29,opt,name=is_bind_wx,json=isBindWx,proto3" json:"is_bind_wx"`                       //是否绑定微信
	Memo                       string           `protobuf:"bytes,30,opt,name=memo,proto3" json:"memo"`                                                 //备注
	ClientType                 string           `protobuf:"bytes,31,opt,name=client_type,json=clientType,proto3" json:"client_type"`                   //来源终端
	CreateFanId                int64            `protobuf:"varint,32,opt,name=create_fan_id,json=createFanId,proto3" json:"create_fan_id"`             //注册来源粉丝ID
	Status                     string           `protobuf:"bytes,33,opt,name=status,proto3" json:"status"`                                             //状态：1正常，2锁定，3禁用，9注销
	CreatedAt                  string           `protobuf:"bytes,34,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt                  string           `protobuf:"bytes,35,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt                  string           `protobuf:"bytes,36,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	VipLevel                   *Vip             `protobuf:"bytes,37,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level"`
	Referrer                   *Member          `protobuf:"bytes,38,opt,name=referrer,proto3" json:"referrer"`
	Tags                       []*Tag           `protobuf:"bytes,39,rep,name=tags,proto3" json:"tags"`
	AddressList                []*MemberAddress `protobuf:"bytes,40,rep,name=address_list,json=addressList,proto3" json:"address_list"`
	StatusName                 string           `protobuf:"bytes,41,opt,name=status_name,json=statusName,proto3" json:"status_name"`
	GenderName                 string           `protobuf:"bytes,42,opt,name=gender_name,json=genderName,proto3" json:"gender_name"`
	ClientTypeName             string           `protobuf:"bytes,43,opt,name=client_type_name,json=clientTypeName,proto3" json:"client_type_name"`
	PluginsDistributionLevelId int32            `protobuf:"varint,44,opt,name=plugins_distribution_level_id,json=pluginsDistributionLevelId,proto3" json:"plugins_distribution_level_id"` //插件分销等级ID
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{0}
}

func (x *Member) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Member) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Member) GetNumberCode() string {
	if x != nil {
		return x.NumberCode
	}
	return ""
}

func (x *Member) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Member) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Member) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Member) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *Member) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *Member) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *Member) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Member) GetCountyName() string {
	if x != nil {
		return x.CountyName
	}
	return ""
}

func (x *Member) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Member) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Member) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *Member) GetAvatarId() int64 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *Member) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Member) GetVipLevelId() int32 {
	if x != nil {
		return x.VipLevelId
	}
	return 0
}

func (x *Member) GetIntegral() int64 {
	if x != nil {
		return x.Integral
	}
	return 0
}

func (x *Member) GetFrozenIntegral() int64 {
	if x != nil {
		return x.FrozenIntegral
	}
	return 0
}

func (x *Member) GetLevelIntegral() int64 {
	if x != nil {
		return x.LevelIntegral
	}
	return 0
}

func (x *Member) GetTotalOrderNum() int32 {
	if x != nil {
		return x.TotalOrderNum
	}
	return 0
}

func (x *Member) GetTotalOrderMoney() int64 {
	if x != nil {
		return x.TotalOrderMoney
	}
	return 0
}

func (x *Member) GetCommentNum() int32 {
	if x != nil {
		return x.CommentNum
	}
	return 0
}

func (x *Member) GetCollectNum() int32 {
	if x != nil {
		return x.CollectNum
	}
	return 0
}

func (x *Member) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *Member) GetIsTrusted() string {
	if x != nil {
		return x.IsTrusted
	}
	return ""
}

func (x *Member) GetIsBindMobile() string {
	if x != nil {
		return x.IsBindMobile
	}
	return ""
}

func (x *Member) GetIsBindEmail() string {
	if x != nil {
		return x.IsBindEmail
	}
	return ""
}

func (x *Member) GetIsBindWx() string {
	if x != nil {
		return x.IsBindWx
	}
	return ""
}

func (x *Member) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Member) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *Member) GetCreateFanId() int64 {
	if x != nil {
		return x.CreateFanId
	}
	return 0
}

func (x *Member) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Member) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Member) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Member) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Member) GetVipLevel() *Vip {
	if x != nil {
		return x.VipLevel
	}
	return nil
}

func (x *Member) GetReferrer() *Member {
	if x != nil {
		return x.Referrer
	}
	return nil
}

func (x *Member) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Member) GetAddressList() []*MemberAddress {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *Member) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *Member) GetGenderName() string {
	if x != nil {
		return x.GenderName
	}
	return ""
}

func (x *Member) GetClientTypeName() string {
	if x != nil {
		return x.ClientTypeName
	}
	return ""
}

func (x *Member) GetPluginsDistributionLevelId() int32 {
	if x != nil {
		return x.PluginsDistributionLevelId
	}
	return 0
}

type RegisterMemberFan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId       string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id"`                    //openId
	UnionId      string `protobuf:"bytes,2,opt,name=union_id,json=unionId,proto3" json:"union_id"`                 //unionId
	Platform     string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform"`                              //所属平台
	OriginalData string `protobuf:"bytes,4,opt,name=original_data,json=originalData,proto3" json:"original_data"`  //平台原始数据
	Type         string `protobuf:"bytes,5,opt,name=type,proto3" json:"type"`                                      //类型：0个人,1企业
	Username     string `protobuf:"bytes,6,opt,name=username,proto3" json:"username"`                              //用户名称
	Nickname     string `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname"`                              //用户昵称
	AvatarUrl    string `protobuf:"bytes,8,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url"`           //会员头像url地址
	ReferrerId   int64  `protobuf:"varint,9,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id"`       //推荐人ID
	ProvinceName string `protobuf:"bytes,10,opt,name=province_name,json=provinceName,proto3" json:"province_name"` //所在省
	CityName     string `protobuf:"bytes,11,opt,name=city_name,json=cityName,proto3" json:"city_name"`             //所在市
	CountyName   string `protobuf:"bytes,12,opt,name=county_name,json=countyName,proto3" json:"county_name"`       //所在区/县
	Address      string `protobuf:"bytes,13,opt,name=address,proto3" json:"address"`                               //详细地址
}

func (x *RegisterMemberFan) Reset() {
	*x = RegisterMemberFan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterMemberFan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMemberFan) ProtoMessage() {}

func (x *RegisterMemberFan) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMemberFan.ProtoReflect.Descriptor instead.
func (*RegisterMemberFan) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterMemberFan) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *RegisterMemberFan) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *RegisterMemberFan) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RegisterMemberFan) GetOriginalData() string {
	if x != nil {
		return x.OriginalData
	}
	return ""
}

func (x *RegisterMemberFan) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RegisterMemberFan) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterMemberFan) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RegisterMemberFan) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *RegisterMemberFan) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *RegisterMemberFan) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *RegisterMemberFan) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *RegisterMemberFan) GetCountyName() string {
	if x != nil {
		return x.CountyName
	}
	return ""
}

func (x *RegisterMemberFan) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

//客户查询参数
type MemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged    int32  `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Sorting  string `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting"`
	//以下为自定义参数
	Id                         int64   `protobuf:"varint,4,opt,name=id,proto3" json:"id"`
	Type                       string  `protobuf:"bytes,5,opt,name=type,proto3" json:"type"`
	NumberCode                 string  `protobuf:"bytes,6,opt,name=number_code,json=numberCode,proto3" json:"number_code"`
	Username                   string  `protobuf:"bytes,7,opt,name=username,proto3" json:"username"`
	Nickname                   string  `protobuf:"bytes,8,opt,name=nickname,proto3" json:"nickname"`
	Gender                     string  `protobuf:"bytes,9,opt,name=gender,proto3" json:"gender"`
	Mobile                     string  `protobuf:"bytes,10,opt,name=mobile,proto3" json:"mobile"`
	Email                      string  `protobuf:"bytes,11,opt,name=email,proto3" json:"email"`
	VipId                      int32   `protobuf:"varint,12,opt,name=vip_id,json=vipId,proto3" json:"vip_id"`
	CardId                     int32   `protobuf:"varint,13,opt,name=card_id,json=cardId,proto3" json:"card_id"`
	TagId                      int32   `protobuf:"varint,14,opt,name=tag_id,json=tagId,proto3" json:"tag_id"`
	ClientType                 string  `protobuf:"bytes,15,opt,name=client_type,json=clientType,proto3" json:"client_type"`
	AreaId                     int64   `protobuf:"varint,16,opt,name=area_id,json=areaId,proto3" json:"area_id"`
	Status                     string  `protobuf:"bytes,17,opt,name=status,proto3" json:"status"`
	Keywords                   string  `protobuf:"bytes,18,opt,name=keywords,proto3" json:"keywords"`
	MemberId                   int64   `protobuf:"varint,19,opt,name=member_id,json=memberId,proto3" json:"member_id"`
	IsBindMobile               string  `protobuf:"bytes,20,opt,name=is_bind_mobile,json=isBindMobile,proto3" json:"is_bind_mobile"`
	IsBindEmail                string  `protobuf:"bytes,21,opt,name=is_bind_email,json=isBindEmail,proto3" json:"is_bind_email"`
	IsBindWx                   string  `protobuf:"bytes,22,opt,name=is_bind_wx,json=isBindWx,proto3" json:"is_bind_wx"`
	ReferrerId                 int64   `protobuf:"varint,23,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id"`
	AvatarId                   int64   `protobuf:"varint,24,opt,name=avatar_id,json=avatarId,proto3" json:"avatar_id"`
	AvatarUrl                  string  `protobuf:"bytes,25,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url"`
	ReferUrl                   string  `protobuf:"bytes,26,opt,name=refer_url,json=referUrl,proto3" json:"refer_url"`
	WxOpenId                   string  `protobuf:"bytes,27,opt,name=wx_open_id,json=wxOpenId,proto3" json:"wx_open_id"`
	Password                   string  `protobuf:"bytes,29,opt,name=password,proto3" json:"password"`
	Code                       string  `protobuf:"bytes,30,opt,name=code,proto3" json:"code"`
	Referrer                   string  `protobuf:"bytes,31,opt,name=referrer,proto3" json:"referrer"`
	Ids                        []int64 `protobuf:"varint,32,rep,packed,name=ids,proto3" json:"ids"`
	ClientTypeName             string  `protobuf:"bytes,33,opt,name=client_type_name,json=clientTypeName,proto3" json:"client_type_name"`
	PluginsDistributionLevelId int32   `protobuf:"varint,34,opt,name=plugins_distribution_level_id,json=pluginsDistributionLevelId,proto3" json:"plugins_distribution_level_id"` //插件分销等级ID
}

func (x *MemberRequest) Reset() {
	*x = MemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberRequest) ProtoMessage() {}

func (x *MemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberRequest.ProtoReflect.Descriptor instead.
func (*MemberRequest) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{2}
}

func (x *MemberRequest) GetPaged() int32 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *MemberRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MemberRequest) GetSorting() string {
	if x != nil {
		return x.Sorting
	}
	return ""
}

func (x *MemberRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MemberRequest) GetNumberCode() string {
	if x != nil {
		return x.NumberCode
	}
	return ""
}

func (x *MemberRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MemberRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *MemberRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *MemberRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *MemberRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MemberRequest) GetVipId() int32 {
	if x != nil {
		return x.VipId
	}
	return 0
}

func (x *MemberRequest) GetCardId() int32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *MemberRequest) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *MemberRequest) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *MemberRequest) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *MemberRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MemberRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *MemberRequest) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *MemberRequest) GetIsBindMobile() string {
	if x != nil {
		return x.IsBindMobile
	}
	return ""
}

func (x *MemberRequest) GetIsBindEmail() string {
	if x != nil {
		return x.IsBindEmail
	}
	return ""
}

func (x *MemberRequest) GetIsBindWx() string {
	if x != nil {
		return x.IsBindWx
	}
	return ""
}

func (x *MemberRequest) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *MemberRequest) GetAvatarId() int64 {
	if x != nil {
		return x.AvatarId
	}
	return 0
}

func (x *MemberRequest) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *MemberRequest) GetReferUrl() string {
	if x != nil {
		return x.ReferUrl
	}
	return ""
}

func (x *MemberRequest) GetWxOpenId() string {
	if x != nil {
		return x.WxOpenId
	}
	return ""
}

func (x *MemberRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MemberRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MemberRequest) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *MemberRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *MemberRequest) GetClientTypeName() string {
	if x != nil {
		return x.ClientTypeName
	}
	return ""
}

func (x *MemberRequest) GetPluginsDistributionLevelId() int32 {
	if x != nil {
		return x.PluginsDistributionLevelId
	}
	return 0
}

type MemberData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Member       `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items  []*Member     `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Info   *common.Info  `protobuf:"bytes,4,opt,name=info,proto3" json:"info"`
}

func (x *MemberData) Reset() {
	*x = MemberData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberData) ProtoMessage() {}

func (x *MemberData) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberData.ProtoReflect.Descriptor instead.
func (*MemberData) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{3}
}

func (x *MemberData) GetEntity() *Member {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *MemberData) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *MemberData) GetItems() []*Member {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MemberData) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type MemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *MemberData   `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Error *common.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
}

func (x *MemberResponse) Reset() {
	*x = MemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberResponse) ProtoMessage() {}

func (x *MemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberResponse.ProtoReflect.Descriptor instead.
func (*MemberResponse) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{4}
}

func (x *MemberResponse) GetData() *MemberData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MemberResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type MemberIndexData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member     *Member     `protobuf:"bytes,1,opt,name=member,proto3" json:"member"`
	GenderList []*DictInfo `protobuf:"bytes,2,rep,name=gender_list,json=genderList,proto3" json:"gender_list"`
}

func (x *MemberIndexData) Reset() {
	*x = MemberIndexData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberIndexData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberIndexData) ProtoMessage() {}

func (x *MemberIndexData) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberIndexData.ProtoReflect.Descriptor instead.
func (*MemberIndexData) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{5}
}

func (x *MemberIndexData) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MemberIndexData) GetGenderList() []*DictInfo {
	if x != nil {
		return x.GenderList
	}
	return nil
}

type MemberIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *MemberIndexData `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Error *common.Error    `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
}

func (x *MemberIndexResponse) Reset() {
	*x = MemberIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberIndexResponse) ProtoMessage() {}

func (x *MemberIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberIndexResponse.ProtoReflect.Descriptor instead.
func (*MemberIndexResponse) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{6}
}

func (x *MemberIndexResponse) GetData() *MemberIndexData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MemberIndexResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_memberService_proto protoreflect.FileDescriptor

var file_memberService_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a,
	0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x74, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x76, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x0b, 0x0a, 0x06, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x77,
	0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x57,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2a, 0x0a, 0x09, 0x76, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69,
	0x70, 0x52, 0x08, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x28, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x91, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x61, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbc, 0x07, 0x0a, 0x0d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x0a,
	0x06, 0x76, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x69, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x64,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73,
	0x42, 0x69, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x5f, 0x77, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x73, 0x42, 0x69, 0x6e, 0x64, 0x57, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x77, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x70, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x44, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x32, 0xc5, 0x0a, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x17,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42,
	0x79, 0x46, 0x61, 0x6e, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x61,
	0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x79, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x07, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12,
	0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x66, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x10,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x17, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_memberService_proto_rawDescOnce sync.Once
	file_memberService_proto_rawDescData = file_memberService_proto_rawDesc
)

func file_memberService_proto_rawDescGZIP() []byte {
	file_memberService_proto_rawDescOnce.Do(func() {
		file_memberService_proto_rawDescData = protoimpl.X.CompressGZIP(file_memberService_proto_rawDescData)
	})
	return file_memberService_proto_rawDescData
}

var file_memberService_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_memberService_proto_goTypes = []interface{}{
	(*Member)(nil),              // 0: services.Member
	(*RegisterMemberFan)(nil),   // 1: services.RegisterMemberFan
	(*MemberRequest)(nil),       // 2: services.MemberRequest
	(*MemberData)(nil),          // 3: services.MemberData
	(*MemberResponse)(nil),      // 4: services.MemberResponse
	(*MemberIndexData)(nil),     // 5: services.MemberIndexData
	(*MemberIndexResponse)(nil), // 6: services.MemberIndexResponse
	(*Vip)(nil),                 // 7: services.Vip
	(*Tag)(nil),                 // 8: services.Tag
	(*MemberAddress)(nil),       // 9: services.MemberAddress
	(*common.Pager)(nil),        // 10: common.Pager
	(*common.Info)(nil),         // 11: common.Info
	(*common.Error)(nil),        // 12: common.Error
	(*DictInfo)(nil),            // 13: services.DictInfo
}
var file_memberService_proto_depIdxs = []int32{
	7,  // 0: services.Member.vip_level:type_name -> services.Vip
	0,  // 1: services.Member.referrer:type_name -> services.Member
	8,  // 2: services.Member.tags:type_name -> services.Tag
	9,  // 3: services.Member.address_list:type_name -> services.MemberAddress
	0,  // 4: services.MemberData.entity:type_name -> services.Member
	10, // 5: services.MemberData.pager:type_name -> common.Pager
	0,  // 6: services.MemberData.items:type_name -> services.Member
	11, // 7: services.MemberData.info:type_name -> common.Info
	3,  // 8: services.MemberResponse.data:type_name -> services.MemberData
	12, // 9: services.MemberResponse.error:type_name -> common.Error
	0,  // 10: services.MemberIndexData.member:type_name -> services.Member
	13, // 11: services.MemberIndexData.gender_list:type_name -> services.DictInfo
	5,  // 12: services.MemberIndexResponse.data:type_name -> services.MemberIndexData
	12, // 13: services.MemberIndexResponse.error:type_name -> common.Error
	2,  // 14: services.MemberService.Register:input_type -> services.MemberRequest
	1,  // 15: services.MemberService.RegisterByFan:input_type -> services.RegisterMemberFan
	2,  // 16: services.MemberService.RegisterByMobile:input_type -> services.MemberRequest
	2,  // 17: services.MemberService.RegisterByEmail:input_type -> services.MemberRequest
	2,  // 18: services.MemberService.ToLogin:input_type -> services.MemberRequest
	0,  // 19: services.MemberService.Index:input_type -> services.Member
	0,  // 20: services.MemberService.Create:input_type -> services.Member
	0,  // 21: services.MemberService.CreateCompany:input_type -> services.Member
	0,  // 22: services.MemberService.UpdateCompany:input_type -> services.Member
	0,  // 23: services.MemberService.Update:input_type -> services.Member
	2,  // 24: services.MemberService.Delete:input_type -> services.MemberRequest
	2,  // 25: services.MemberService.Lock:input_type -> services.MemberRequest
	2,  // 26: services.MemberService.Unlock:input_type -> services.MemberRequest
	0,  // 27: services.MemberService.Get:input_type -> services.Member
	0,  // 28: services.MemberService.GetSelfAndReferrer:input_type -> services.Member
	0,  // 29: services.MemberService.Detail:input_type -> services.Member
	2,  // 30: services.MemberService.List:input_type -> services.MemberRequest
	2,  // 31: services.MemberService.Search:input_type -> services.MemberRequest
	0,  // 32: services.MemberService.SetTags:input_type -> services.Member
	2,  // 33: services.MemberService.GetByBindMobile:input_type -> services.MemberRequest
	2,  // 34: services.MemberService.GetByBindEmail:input_type -> services.MemberRequest
	4,  // 35: services.MemberService.Register:output_type -> services.MemberResponse
	4,  // 36: services.MemberService.RegisterByFan:output_type -> services.MemberResponse
	4,  // 37: services.MemberService.RegisterByMobile:output_type -> services.MemberResponse
	4,  // 38: services.MemberService.RegisterByEmail:output_type -> services.MemberResponse
	4,  // 39: services.MemberService.ToLogin:output_type -> services.MemberResponse
	6,  // 40: services.MemberService.Index:output_type -> services.MemberIndexResponse
	4,  // 41: services.MemberService.Create:output_type -> services.MemberResponse
	4,  // 42: services.MemberService.CreateCompany:output_type -> services.MemberResponse
	4,  // 43: services.MemberService.UpdateCompany:output_type -> services.MemberResponse
	4,  // 44: services.MemberService.Update:output_type -> services.MemberResponse
	4,  // 45: services.MemberService.Delete:output_type -> services.MemberResponse
	4,  // 46: services.MemberService.Lock:output_type -> services.MemberResponse
	4,  // 47: services.MemberService.Unlock:output_type -> services.MemberResponse
	4,  // 48: services.MemberService.Get:output_type -> services.MemberResponse
	4,  // 49: services.MemberService.GetSelfAndReferrer:output_type -> services.MemberResponse
	4,  // 50: services.MemberService.Detail:output_type -> services.MemberResponse
	4,  // 51: services.MemberService.List:output_type -> services.MemberResponse
	4,  // 52: services.MemberService.Search:output_type -> services.MemberResponse
	4,  // 53: services.MemberService.SetTags:output_type -> services.MemberResponse
	4,  // 54: services.MemberService.GetByBindMobile:output_type -> services.MemberResponse
	4,  // 55: services.MemberService.GetByBindEmail:output_type -> services.MemberResponse
	35, // [35:56] is the sub-list for method output_type
	14, // [14:35] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_memberService_proto_init() }
func file_memberService_proto_init() {
	if File_memberService_proto != nil {
		return
	}
	file_tagService_proto_init()
	file_vipService_proto_init()
	file_memberAddressService_proto_init()
	file_baseInfoService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_memberService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_memberService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterMemberFan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_memberService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_memberService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_memberService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_memberService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberIndexData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_memberService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_memberService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_memberService_proto_goTypes,
		DependencyIndexes: file_memberService_proto_depIdxs,
		MessageInfos:      file_memberService_proto_msgTypes,
	}.Build()
	File_memberService_proto = out.File
	file_memberService_proto_rawDesc = nil
	file_memberService_proto_goTypes = nil
	file_memberService_proto_depIdxs = nil
}
