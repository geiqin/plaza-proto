// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: surplusSchemeService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SurplusScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	StartAt        string  `protobuf:"bytes,3,opt,name=start_at,json=startAt,proto3" json:"start_at"`
	EndAt          string  `protobuf:"bytes,4,opt,name=end_at,json=endAt,proto3" json:"end_at"`
	ConditionType  int32   `protobuf:"varint,5,opt,name=condition_type,json=conditionType,proto3" json:"condition_type"`
	ConditionValue float32 `protobuf:"fixed32,6,opt,name=condition_value,json=conditionValue,proto3" json:"condition_value"`
	GiveMoney      float32 `protobuf:"fixed32,7,opt,name=give_money,json=giveMoney,proto3" json:"give_money"`
	GiveScore      int32   `protobuf:"varint,8,opt,name=give_score,json=giveScore,proto3" json:"give_score"`
	Stock          int32   `protobuf:"varint,9,opt,name=stock,proto3" json:"stock"`
	Memo           string  `protobuf:"bytes,10,opt,name=memo,proto3" json:"memo"`
	CreatedAt      string  `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt      string  `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *SurplusScheme) Reset() {
	*x = SurplusScheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surplusSchemeService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurplusScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurplusScheme) ProtoMessage() {}

func (x *SurplusScheme) ProtoReflect() protoreflect.Message {
	mi := &file_surplusSchemeService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurplusScheme.ProtoReflect.Descriptor instead.
func (*SurplusScheme) Descriptor() ([]byte, []int) {
	return file_surplusSchemeService_proto_rawDescGZIP(), []int{0}
}

func (x *SurplusScheme) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SurplusScheme) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SurplusScheme) GetStartAt() string {
	if x != nil {
		return x.StartAt
	}
	return ""
}

func (x *SurplusScheme) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *SurplusScheme) GetConditionType() int32 {
	if x != nil {
		return x.ConditionType
	}
	return 0
}

func (x *SurplusScheme) GetConditionValue() float32 {
	if x != nil {
		return x.ConditionValue
	}
	return 0
}

func (x *SurplusScheme) GetGiveMoney() float32 {
	if x != nil {
		return x.GiveMoney
	}
	return 0
}

func (x *SurplusScheme) GetGiveScore() int32 {
	if x != nil {
		return x.GiveScore
	}
	return 0
}

func (x *SurplusScheme) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *SurplusScheme) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SurplusScheme) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *SurplusScheme) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type SurplusSchemeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged    int32 `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	//以下为自定义参数
	StartAt       int64   `protobuf:"varint,3,opt,name=start_at,json=startAt,proto3" json:"start_at"`
	EndAt         string  `protobuf:"bytes,4,opt,name=end_at,json=endAt,proto3" json:"end_at"`
	ConditionType string  `protobuf:"bytes,5,opt,name=condition_type,json=conditionType,proto3" json:"condition_type"`
	Money         float32 `protobuf:"fixed32,6,opt,name=money,proto3" json:"money"`
	Name          string  `protobuf:"bytes,8,opt,name=name,proto3" json:"name"`
}

func (x *SurplusSchemeRequest) Reset() {
	*x = SurplusSchemeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surplusSchemeService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurplusSchemeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurplusSchemeRequest) ProtoMessage() {}

func (x *SurplusSchemeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_surplusSchemeService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurplusSchemeRequest.ProtoReflect.Descriptor instead.
func (*SurplusSchemeRequest) Descriptor() ([]byte, []int) {
	return file_surplusSchemeService_proto_rawDescGZIP(), []int{1}
}

func (x *SurplusSchemeRequest) GetPaged() int32 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *SurplusSchemeRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SurplusSchemeRequest) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *SurplusSchemeRequest) GetEndAt() string {
	if x != nil {
		return x.EndAt
	}
	return ""
}

func (x *SurplusSchemeRequest) GetConditionType() string {
	if x != nil {
		return x.ConditionType
	}
	return ""
}

func (x *SurplusSchemeRequest) GetMoney() float32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *SurplusSchemeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SurplusSchemeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *SurplusScheme   `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager    `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items  []*SurplusScheme `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Info   *common.Info     `protobuf:"bytes,4,opt,name=info,proto3" json:"info"`
}

func (x *SurplusSchemeData) Reset() {
	*x = SurplusSchemeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surplusSchemeService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurplusSchemeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurplusSchemeData) ProtoMessage() {}

func (x *SurplusSchemeData) ProtoReflect() protoreflect.Message {
	mi := &file_surplusSchemeService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurplusSchemeData.ProtoReflect.Descriptor instead.
func (*SurplusSchemeData) Descriptor() ([]byte, []int) {
	return file_surplusSchemeService_proto_rawDescGZIP(), []int{2}
}

func (x *SurplusSchemeData) GetEntity() *SurplusScheme {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SurplusSchemeData) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *SurplusSchemeData) GetItems() []*SurplusScheme {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SurplusSchemeData) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type SurplusSchemeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *SurplusSchemeData `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Error *common.Error      `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
}

func (x *SurplusSchemeResponse) Reset() {
	*x = SurplusSchemeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surplusSchemeService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurplusSchemeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurplusSchemeResponse) ProtoMessage() {}

func (x *SurplusSchemeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_surplusSchemeService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurplusSchemeResponse.ProtoReflect.Descriptor instead.
func (*SurplusSchemeResponse) Descriptor() ([]byte, []int) {
	return file_surplusSchemeService_proto_rawDescGZIP(), []int{3}
}

func (x *SurplusSchemeResponse) GetData() *SurplusSchemeData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SurplusSchemeResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_surplusSchemeService_proto protoreflect.FileDescriptor

var file_surplusSchemeService_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x02, 0x0a, 0x0d, 0x53, 0x75,
	0x72, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x72, 0x70,
	0x6c, 0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x72, 0x70, 0x6c,
	0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x06,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72,
	0x70, 0x6c, 0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x6d, 0x0a, 0x15, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x32, 0xcc, 0x03, 0x0a, 0x14, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x1f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x17,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x06, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x70, 0x6c,
	0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x70, 0x6c,
	0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_surplusSchemeService_proto_rawDescOnce sync.Once
	file_surplusSchemeService_proto_rawDescData = file_surplusSchemeService_proto_rawDesc
)

func file_surplusSchemeService_proto_rawDescGZIP() []byte {
	file_surplusSchemeService_proto_rawDescOnce.Do(func() {
		file_surplusSchemeService_proto_rawDescData = protoimpl.X.CompressGZIP(file_surplusSchemeService_proto_rawDescData)
	})
	return file_surplusSchemeService_proto_rawDescData
}

var file_surplusSchemeService_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_surplusSchemeService_proto_goTypes = []interface{}{
	(*SurplusScheme)(nil),         // 0: services.SurplusScheme
	(*SurplusSchemeRequest)(nil),  // 1: services.SurplusSchemeRequest
	(*SurplusSchemeData)(nil),     // 2: services.SurplusSchemeData
	(*SurplusSchemeResponse)(nil), // 3: services.SurplusSchemeResponse
	(*common.Pager)(nil),          // 4: common.Pager
	(*common.Info)(nil),           // 5: common.Info
	(*common.Error)(nil),          // 6: common.Error
}
var file_surplusSchemeService_proto_depIdxs = []int32{
	0,  // 0: services.SurplusSchemeData.entity:type_name -> services.SurplusScheme
	4,  // 1: services.SurplusSchemeData.pager:type_name -> common.Pager
	0,  // 2: services.SurplusSchemeData.items:type_name -> services.SurplusScheme
	5,  // 3: services.SurplusSchemeData.info:type_name -> common.Info
	2,  // 4: services.SurplusSchemeResponse.data:type_name -> services.SurplusSchemeData
	6,  // 5: services.SurplusSchemeResponse.error:type_name -> common.Error
	0,  // 6: services.SurplusSchemeService.Create:input_type -> services.SurplusScheme
	0,  // 7: services.SurplusSchemeService.Update:input_type -> services.SurplusScheme
	0,  // 8: services.SurplusSchemeService.Get:input_type -> services.SurplusScheme
	1,  // 9: services.SurplusSchemeService.Search:input_type -> services.SurplusSchemeRequest
	1,  // 10: services.SurplusSchemeService.List:input_type -> services.SurplusSchemeRequest
	1,  // 11: services.SurplusSchemeService.Matching:input_type -> services.SurplusSchemeRequest
	3,  // 12: services.SurplusSchemeService.Create:output_type -> services.SurplusSchemeResponse
	3,  // 13: services.SurplusSchemeService.Update:output_type -> services.SurplusSchemeResponse
	3,  // 14: services.SurplusSchemeService.Get:output_type -> services.SurplusSchemeResponse
	3,  // 15: services.SurplusSchemeService.Search:output_type -> services.SurplusSchemeResponse
	3,  // 16: services.SurplusSchemeService.List:output_type -> services.SurplusSchemeResponse
	3,  // 17: services.SurplusSchemeService.Matching:output_type -> services.SurplusSchemeResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_surplusSchemeService_proto_init() }
func file_surplusSchemeService_proto_init() {
	if File_surplusSchemeService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_surplusSchemeService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurplusScheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_surplusSchemeService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurplusSchemeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_surplusSchemeService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurplusSchemeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_surplusSchemeService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurplusSchemeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_surplusSchemeService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_surplusSchemeService_proto_goTypes,
		DependencyIndexes: file_surplusSchemeService_proto_depIdxs,
		MessageInfos:      file_surplusSchemeService_proto_msgTypes,
	}.Build()
	File_surplusSchemeService_proto = out.File
	file_surplusSchemeService_proto_rawDesc = nil
	file_surplusSchemeService_proto_goTypes = nil
	file_surplusSchemeService_proto_depIdxs = nil
}
