// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: applicationService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ApplicationService service

func NewApplicationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ApplicationService service

type ApplicationService interface {
	Create(ctx context.Context, in *Application, opts ...client.CallOption) (*ApplicationResponse, error)
	Update(ctx context.Context, in *Application, opts ...client.CallOption) (*ApplicationResponse, error)
	Delete(ctx context.Context, in *ApplicationWhere, opts ...client.CallOption) (*ApplicationResponse, error)
	Get(ctx context.Context, in *Application, opts ...client.CallOption) (*ApplicationResponse, error)
	Search(ctx context.Context, in *ApplicationWhere, opts ...client.CallOption) (*ApplicationResponse, error)
	List(ctx context.Context, in *ApplicationWhere, opts ...client.CallOption) (*ApplicationResponse, error)
}

type applicationService struct {
	c    client.Client
	name string
}

func NewApplicationService(name string, c client.Client) ApplicationService {
	return &applicationService{
		c:    c,
		name: name,
	}
}

func (c *applicationService) Create(ctx context.Context, in *Application, opts ...client.CallOption) (*ApplicationResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationService.Create", in)
	out := new(ApplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationService) Update(ctx context.Context, in *Application, opts ...client.CallOption) (*ApplicationResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationService.Update", in)
	out := new(ApplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationService) Delete(ctx context.Context, in *ApplicationWhere, opts ...client.CallOption) (*ApplicationResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationService.Delete", in)
	out := new(ApplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationService) Get(ctx context.Context, in *Application, opts ...client.CallOption) (*ApplicationResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationService.Get", in)
	out := new(ApplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationService) Search(ctx context.Context, in *ApplicationWhere, opts ...client.CallOption) (*ApplicationResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationService.Search", in)
	out := new(ApplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationService) List(ctx context.Context, in *ApplicationWhere, opts ...client.CallOption) (*ApplicationResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationService.List", in)
	out := new(ApplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationService service

type ApplicationServiceHandler interface {
	Create(context.Context, *Application, *ApplicationResponse) error
	Update(context.Context, *Application, *ApplicationResponse) error
	Delete(context.Context, *ApplicationWhere, *ApplicationResponse) error
	Get(context.Context, *Application, *ApplicationResponse) error
	Search(context.Context, *ApplicationWhere, *ApplicationResponse) error
	List(context.Context, *ApplicationWhere, *ApplicationResponse) error
}

func RegisterApplicationServiceHandler(s server.Server, hdlr ApplicationServiceHandler, opts ...server.HandlerOption) error {
	type applicationService interface {
		Create(ctx context.Context, in *Application, out *ApplicationResponse) error
		Update(ctx context.Context, in *Application, out *ApplicationResponse) error
		Delete(ctx context.Context, in *ApplicationWhere, out *ApplicationResponse) error
		Get(ctx context.Context, in *Application, out *ApplicationResponse) error
		Search(ctx context.Context, in *ApplicationWhere, out *ApplicationResponse) error
		List(ctx context.Context, in *ApplicationWhere, out *ApplicationResponse) error
	}
	type ApplicationService struct {
		applicationService
	}
	h := &applicationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ApplicationService{h}, opts...))
}

type applicationServiceHandler struct {
	ApplicationServiceHandler
}

func (h *applicationServiceHandler) Create(ctx context.Context, in *Application, out *ApplicationResponse) error {
	return h.ApplicationServiceHandler.Create(ctx, in, out)
}

func (h *applicationServiceHandler) Update(ctx context.Context, in *Application, out *ApplicationResponse) error {
	return h.ApplicationServiceHandler.Update(ctx, in, out)
}

func (h *applicationServiceHandler) Delete(ctx context.Context, in *ApplicationWhere, out *ApplicationResponse) error {
	return h.ApplicationServiceHandler.Delete(ctx, in, out)
}

func (h *applicationServiceHandler) Get(ctx context.Context, in *Application, out *ApplicationResponse) error {
	return h.ApplicationServiceHandler.Get(ctx, in, out)
}

func (h *applicationServiceHandler) Search(ctx context.Context, in *ApplicationWhere, out *ApplicationResponse) error {
	return h.ApplicationServiceHandler.Search(ctx, in, out)
}

func (h *applicationServiceHandler) List(ctx context.Context, in *ApplicationWhere, out *ApplicationResponse) error {
	return h.ApplicationServiceHandler.List(ctx, in, out)
}
