syntax = "proto3";
package services;
option go_package = ".;services";
import "common/base.proto";
import "skuInfoService.proto";

//活动核算
service CalculateService {
    //商品显示级核算
    rpc Display (CalculateRequest) returns (CalculateResponse) {}
    //下单购买级核算
    rpc Purchase (CalculateRequest) returns (CalculateResponse) {}
    //支付完成级核算
    rpc Payment (CalculateRequest) returns (CalculateResponse) {}

}

//计算结果方案
message Calculate {
    string currency =1;//货币类型
    int64 total_discount_amount =3; //总优惠金额
    int32 total_present_num =4; //总赠品数量
    repeated product products =5; //商品列表
    repeated adjustment adjustments =6; //价格变动记录
    repeated present presents =7; //赠品列表
    message adjustment{
        int64 sku_id =1; //商品ID
        string type =2; //类型
        string label =3; //标签内容
        string origin_code =4;//来源编码
        int64 change_amount =5;//变动金额
        bool included =6;////是否会影响最终订单需要支付的价格
        string memo =7; //备注
    }
    message product{
        int64 sku_id =1;
        int32 num =2;
        int64 price =3;
        int64 promotion_price =4;
        int64 discount_money =5;
        int64 row_amount =6;
    }
    message present{
        int64 sku_id =1;
        int32 num =2;
    }
}

message CalculateRequest {
    int32 total_num =1;
    int64 total_weight =2;
    string currency =3;
    int64 goods_amount =4;
    int64 discount_amount =5;
    int64 ship_area_id = 6;
    int64 coupon_id = 7;
    int64 member_id = 8;
    int32 member_rank_id = 9;
    int64 calculate_sku_id = 10; //单个商品计算
    map<int64,int32> calculate_sku_list =12; //多个商品计算（商品ID/数量)
    repeated SkuInfo skus = 13;//原始sku数据
}

message CalculateData {
    Calculate entity = 1;
    repeated SkuInfo skus = 2;
    common.Info info = 3;
}

message CalculateResponse {
    CalculateData data = 1;
    common.Error error = 2;
}
