// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: distributorService.proto

package services

import (
	common "../common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Distributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                  string            `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	InviterId             int64             `protobuf:"varint,4,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
	RankId                int32             `protobuf:"varint,6,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	RankType              string            `protobuf:"bytes,7,opt,name=rank_type,json=rankType,proto3" json:"rank_type,omitempty"`
	Deposit               int64             `protobuf:"varint,8,opt,name=deposit,proto3" json:"deposit,omitempty"`
	AvailableMoney        int64             `protobuf:"varint,9,opt,name=available_money,json=availableMoney,proto3" json:"available_money,omitempty"`
	TotalMoney            int64             `protobuf:"varint,10,opt,name=total_money,json=totalMoney,proto3" json:"total_money,omitempty"`
	TotalCommissionAmount int64             `protobuf:"varint,11,opt,name=total_commission_amount,json=totalCommissionAmount,proto3" json:"total_commission_amount,omitempty"`
	TotalBonusAmount      int64             `protobuf:"varint,12,opt,name=total_bonus_amount,json=totalBonusAmount,proto3" json:"total_bonus_amount,omitempty"`
	TotalDeductAmount     int64             `protobuf:"varint,13,opt,name=total_deduct_amount,json=totalDeductAmount,proto3" json:"total_deduct_amount,omitempty"`
	TotalWithdrawAmount   int64             `protobuf:"varint,14,opt,name=total_withdraw_amount,json=totalWithdrawAmount,proto3" json:"total_withdraw_amount,omitempty"`
	TotalServiceFee       int64             `protobuf:"varint,15,opt,name=total_service_fee,json=totalServiceFee,proto3" json:"total_service_fee,omitempty"`
	WaitCommissionAmount  int64             `protobuf:"varint,16,opt,name=wait_commission_amount,json=waitCommissionAmount,proto3" json:"wait_commission_amount,omitempty"`
	WaitBonusAmount       int64             `protobuf:"varint,17,opt,name=wait_bonus_amount,json=waitBonusAmount,proto3" json:"wait_bonus_amount,omitempty"`
	WaitDeductAmount      int64             `protobuf:"varint,18,opt,name=wait_deduct_amount,json=waitDeductAmount,proto3" json:"wait_deduct_amount,omitempty"`
	TotalRecommendNum     int32             `protobuf:"varint,19,opt,name=total_recommend_num,json=totalRecommendNum,proto3" json:"total_recommend_num,omitempty"`
	TotalMemberNum        int32             `protobuf:"varint,20,opt,name=total_member_num,json=totalMemberNum,proto3" json:"total_member_num,omitempty"`
	TotalPromotionNum     int32             `protobuf:"varint,21,opt,name=total_promotion_num,json=totalPromotionNum,proto3" json:"total_promotion_num,omitempty"`
	TotalWithdrewNum      int32             `protobuf:"varint,22,opt,name=total_withdrew_num,json=totalWithdrewNum,proto3" json:"total_withdrew_num,omitempty"`
	Status                string            `protobuf:"bytes,23,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt             string            `protobuf:"bytes,24,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             string            `protobuf:"bytes,25,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Rank                  *Level            `protobuf:"bytes,26,opt,name=rank,proto3" json:"rank,omitempty"`
	Inviter               *Distributor      `protobuf:"bytes,27,opt,name=inviter,proto3" json:"inviter,omitempty"`
	Children              []*Distributor    `protobuf:"bytes,28,rep,name=children,proto3" json:"children,omitempty"`
	Metas                 map[string]string `protobuf:"bytes,29,rep,name=metas,proto3" json:"metas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Member                *MemberInfo       `protobuf:"bytes,30,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *Distributor) Reset() {
	*x = Distributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distributorService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distributor) ProtoMessage() {}

func (x *Distributor) ProtoReflect() protoreflect.Message {
	mi := &file_distributorService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distributor.ProtoReflect.Descriptor instead.
func (*Distributor) Descriptor() ([]byte, []int) {
	return file_distributorService_proto_rawDescGZIP(), []int{0}
}

func (x *Distributor) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Distributor) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Distributor) GetInviterId() int64 {
	if x != nil {
		return x.InviterId
	}
	return 0
}

func (x *Distributor) GetRankId() int32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *Distributor) GetRankType() string {
	if x != nil {
		return x.RankType
	}
	return ""
}

func (x *Distributor) GetDeposit() int64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *Distributor) GetAvailableMoney() int64 {
	if x != nil {
		return x.AvailableMoney
	}
	return 0
}

func (x *Distributor) GetTotalMoney() int64 {
	if x != nil {
		return x.TotalMoney
	}
	return 0
}

func (x *Distributor) GetTotalCommissionAmount() int64 {
	if x != nil {
		return x.TotalCommissionAmount
	}
	return 0
}

func (x *Distributor) GetTotalBonusAmount() int64 {
	if x != nil {
		return x.TotalBonusAmount
	}
	return 0
}

func (x *Distributor) GetTotalDeductAmount() int64 {
	if x != nil {
		return x.TotalDeductAmount
	}
	return 0
}

func (x *Distributor) GetTotalWithdrawAmount() int64 {
	if x != nil {
		return x.TotalWithdrawAmount
	}
	return 0
}

func (x *Distributor) GetTotalServiceFee() int64 {
	if x != nil {
		return x.TotalServiceFee
	}
	return 0
}

func (x *Distributor) GetWaitCommissionAmount() int64 {
	if x != nil {
		return x.WaitCommissionAmount
	}
	return 0
}

func (x *Distributor) GetWaitBonusAmount() int64 {
	if x != nil {
		return x.WaitBonusAmount
	}
	return 0
}

func (x *Distributor) GetWaitDeductAmount() int64 {
	if x != nil {
		return x.WaitDeductAmount
	}
	return 0
}

func (x *Distributor) GetTotalRecommendNum() int32 {
	if x != nil {
		return x.TotalRecommendNum
	}
	return 0
}

func (x *Distributor) GetTotalMemberNum() int32 {
	if x != nil {
		return x.TotalMemberNum
	}
	return 0
}

func (x *Distributor) GetTotalPromotionNum() int32 {
	if x != nil {
		return x.TotalPromotionNum
	}
	return 0
}

func (x *Distributor) GetTotalWithdrewNum() int32 {
	if x != nil {
		return x.TotalWithdrewNum
	}
	return 0
}

func (x *Distributor) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Distributor) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Distributor) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Distributor) GetRank() *Level {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *Distributor) GetInviter() *Distributor {
	if x != nil {
		return x.Inviter
	}
	return nil
}

func (x *Distributor) GetChildren() []*Distributor {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Distributor) GetMetas() map[string]string {
	if x != nil {
		return x.Metas
	}
	return nil
}

func (x *Distributor) GetMember() *MemberInfo {
	if x != nil {
		return x.Member
	}
	return nil
}

type DistributorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged    int32  `protobuf:"varint,1,opt,name=paged,proto3" json:"paged,omitempty"`
	PageSize int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Sorting  string `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
	//-----
	Id            int64   `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName   string  `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Mobile        string  `protobuf:"bytes,6,opt,name=mobile,proto3" json:"mobile,omitempty"`
	RankId        int32   `protobuf:"varint,7,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	Level         int32   `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	InviterId     int64   `protobuf:"varint,9,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
	Status        string  `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	RankType      string  `protobuf:"bytes,11,opt,name=rank_type,json=rankType,proto3" json:"rank_type,omitempty"`
	Keywords      string  `protobuf:"bytes,12,opt,name=keywords,proto3" json:"keywords,omitempty"`
	DistributorId int64   `protobuf:"varint,13,opt,name=distributor_id,json=distributorId,proto3" json:"distributor_id,omitempty"`
	Ids           []int64 `protobuf:"varint,14,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	InviterIds    []int64 `protobuf:"varint,15,rep,packed,name=inviter_ids,json=inviterIds,proto3" json:"inviter_ids,omitempty"`
}

func (x *DistributorRequest) Reset() {
	*x = DistributorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distributorService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributorRequest) ProtoMessage() {}

func (x *DistributorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_distributorService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributorRequest.ProtoReflect.Descriptor instead.
func (*DistributorRequest) Descriptor() ([]byte, []int) {
	return file_distributorService_proto_rawDescGZIP(), []int{1}
}

func (x *DistributorRequest) GetPaged() int32 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *DistributorRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DistributorRequest) GetSorting() string {
	if x != nil {
		return x.Sorting
	}
	return ""
}

func (x *DistributorRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DistributorRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DistributorRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *DistributorRequest) GetRankId() int32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *DistributorRequest) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *DistributorRequest) GetInviterId() int64 {
	if x != nil {
		return x.InviterId
	}
	return 0
}

func (x *DistributorRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DistributorRequest) GetRankType() string {
	if x != nil {
		return x.RankType
	}
	return ""
}

func (x *DistributorRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *DistributorRequest) GetDistributorId() int64 {
	if x != nil {
		return x.DistributorId
	}
	return 0
}

func (x *DistributorRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DistributorRequest) GetInviterIds() []int64 {
	if x != nil {
		return x.InviterIds
	}
	return nil
}

type DistributorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Distributor      `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Pager  *common.Pager     `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager,omitempty"`
	Items  []*Distributor    `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Info   *common.Info      `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
	Params map[string]string `protobuf:"bytes,6,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DistributorData) Reset() {
	*x = DistributorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distributorService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributorData) ProtoMessage() {}

func (x *DistributorData) ProtoReflect() protoreflect.Message {
	mi := &file_distributorService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributorData.ProtoReflect.Descriptor instead.
func (*DistributorData) Descriptor() ([]byte, []int) {
	return file_distributorService_proto_rawDescGZIP(), []int{2}
}

func (x *DistributorData) GetEntity() *Distributor {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *DistributorData) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *DistributorData) GetItems() []*Distributor {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DistributorData) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *DistributorData) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type DistributorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *DistributorData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Error *common.Error    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DistributorResponse) Reset() {
	*x = DistributorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distributorService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributorResponse) ProtoMessage() {}

func (x *DistributorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_distributorService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributorResponse.ProtoReflect.Descriptor instead.
func (*DistributorResponse) Descriptor() ([]byte, []int) {
	return file_distributorService_proto_rawDescGZIP(), []int{3}
}

func (x *DistributorResponse) GetData() *DistributorData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DistributorResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_distributorService_proto protoreflect.FileDescriptor

var file_distributorService_proto_rawDesc = []byte{
	0x0a, 0x18, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa7, 0x09, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x65, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x77, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x77, 0x61, 0x69, 0x74, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x65,
	0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x05,
	0x6d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x38, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x03, 0x0a,
	0x12, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61,
	0x6e, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x32, 0xd1, 0x04, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x07, 0x54, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_distributorService_proto_rawDescOnce sync.Once
	file_distributorService_proto_rawDescData = file_distributorService_proto_rawDesc
)

func file_distributorService_proto_rawDescGZIP() []byte {
	file_distributorService_proto_rawDescOnce.Do(func() {
		file_distributorService_proto_rawDescData = protoimpl.X.CompressGZIP(file_distributorService_proto_rawDescData)
	})
	return file_distributorService_proto_rawDescData
}

var file_distributorService_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_distributorService_proto_goTypes = []interface{}{
	(*Distributor)(nil),         // 0: services.Distributor
	(*DistributorRequest)(nil),  // 1: services.DistributorRequest
	(*DistributorData)(nil),     // 2: services.DistributorData
	(*DistributorResponse)(nil), // 3: services.DistributorResponse
	nil,                         // 4: services.Distributor.MetasEntry
	nil,                         // 5: services.DistributorData.ParamsEntry
	(*Level)(nil),               // 6: services.Level
	(*MemberInfo)(nil),          // 7: services.MemberInfo
	(*common.Pager)(nil),        // 8: common.Pager
	(*common.Info)(nil),         // 9: common.Info
	(*common.Error)(nil),        // 10: common.Error
}
var file_distributorService_proto_depIdxs = []int32{
	6,  // 0: services.Distributor.rank:type_name -> services.Level
	0,  // 1: services.Distributor.inviter:type_name -> services.Distributor
	0,  // 2: services.Distributor.children:type_name -> services.Distributor
	4,  // 3: services.Distributor.metas:type_name -> services.Distributor.MetasEntry
	7,  // 4: services.Distributor.member:type_name -> services.MemberInfo
	0,  // 5: services.DistributorData.entity:type_name -> services.Distributor
	8,  // 6: services.DistributorData.pager:type_name -> common.Pager
	0,  // 7: services.DistributorData.items:type_name -> services.Distributor
	9,  // 8: services.DistributorData.info:type_name -> common.Info
	5,  // 9: services.DistributorData.params:type_name -> services.DistributorData.ParamsEntry
	2,  // 10: services.DistributorResponse.data:type_name -> services.DistributorData
	10, // 11: services.DistributorResponse.error:type_name -> common.Error
	1,  // 12: services.DistributorService.Exists:input_type -> services.DistributorRequest
	0,  // 13: services.DistributorService.Update:input_type -> services.Distributor
	1,  // 14: services.DistributorService.SetRank:input_type -> services.DistributorRequest
	1,  // 15: services.DistributorService.Remove:input_type -> services.DistributorRequest
	0,  // 16: services.DistributorService.Get:input_type -> services.Distributor
	1,  // 17: services.DistributorService.Search:input_type -> services.DistributorRequest
	1,  // 18: services.DistributorService.TeamNum:input_type -> services.DistributorRequest
	1,  // 19: services.DistributorService.TeamSearch:input_type -> services.DistributorRequest
	3,  // 20: services.DistributorService.Exists:output_type -> services.DistributorResponse
	3,  // 21: services.DistributorService.Update:output_type -> services.DistributorResponse
	3,  // 22: services.DistributorService.SetRank:output_type -> services.DistributorResponse
	3,  // 23: services.DistributorService.Remove:output_type -> services.DistributorResponse
	3,  // 24: services.DistributorService.Get:output_type -> services.DistributorResponse
	3,  // 25: services.DistributorService.Search:output_type -> services.DistributorResponse
	3,  // 26: services.DistributorService.TeamNum:output_type -> services.DistributorResponse
	3,  // 27: services.DistributorService.TeamSearch:output_type -> services.DistributorResponse
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_distributorService_proto_init() }
func file_distributorService_proto_init() {
	if File_distributorService_proto != nil {
		return
	}
	file_levelService_proto_init()
	file_baseInfoService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_distributorService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distributorService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distributorService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distributorService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_distributorService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_distributorService_proto_goTypes,
		DependencyIndexes: file_distributorService_proto_depIdxs,
		MessageInfos:      file_distributorService_proto_msgTypes,
	}.Build()
	File_distributorService_proto = out.File
	file_distributorService_proto_rawDesc = nil
	file_distributorService_proto_goTypes = nil
	file_distributorService_proto_depIdxs = nil
}
