// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: vipLevelService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VipLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                       //ID
	VipId            int32           `protobuf:"varint,2,opt,name=vip_id,json=vipId,proto3" json:"vip_id"`                                    //体系ID
	Name             string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`                                                    //等级名称
	Weight           int32           `protobuf:"varint,4,opt,name=weight,proto3" json:"weight"`                                               //等级权重
	BgMode           string          `protobuf:"bytes,5,opt,name=bg_mode,json=bgMode,proto3" json:"bg_mode"`                                  //背景模式
	BgColor          string          `protobuf:"bytes,6,opt,name=bg_color,json=bgColor,proto3" json:"bg_color"`                               //背景颜色
	BgImageUrl       string          `protobuf:"bytes,7,opt,name=bg_image_url,json=bgImageUrl,proto3" json:"bg_image_url"`                    //背景图
	UpCondition      *VipUpCondition `protobuf:"bytes,8,opt,name=up_condition,json=upCondition,proto3" json:"up_condition"`                   //升级条件
	PayRules         []*VipPayRule   `protobuf:"bytes,9,rep,name=pay_rules,json=payRules,proto3" json:"pay_rules"`                            //付费规则
	BaseBenefit      *VipBaseBenefit `protobuf:"bytes,10,opt,name=base_benefit,json=baseBenefit,proto3" json:"base_benefit"`                  //基本权益
	MoreBenefitCodes []string        `protobuf:"bytes,11,rep,name=more_benefit_codes,json=moreBenefitCodes,proto3" json:"more_benefit_codes"` //更多权益
	UpPackage        *VipUpPackage   `protobuf:"bytes,12,opt,name=up_package,json=upPackage,proto3" json:"up_package"`                        //升级礼包
	MemberCount      int64           `protobuf:"varint,14,opt,name=member_count,json=memberCount,proto3" json:"member_count"`                 //会员数量
	Status           string          `protobuf:"bytes,15,opt,name=status,proto3" json:"status"`                                               //状态
	CreatedAt        int64           `protobuf:"varint,16,opt,name=created_at,json=createdAt,proto3" json:"created_at"`                       //创建时间
	UpdatedAt        int64           `protobuf:"varint,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`                       //修改时间
	Benefits         []*VipBenefit   `protobuf:"bytes,18,rep,name=benefits,proto3" json:"benefits"`
	BenefitsNames    []string        `protobuf:"bytes,19,rep,name=benefits_names,json=benefitsNames,proto3" json:"benefits_names"`
	PayRulesTips     []string        `protobuf:"bytes,20,rep,name=pay_rules_tips,json=payRulesTips,proto3" json:"pay_rules_tips"` //付费规则描述
}

func (x *VipLevel) Reset() {
	*x = VipLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipLevelService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLevel) ProtoMessage() {}

func (x *VipLevel) ProtoReflect() protoreflect.Message {
	mi := &file_vipLevelService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLevel.ProtoReflect.Descriptor instead.
func (*VipLevel) Descriptor() ([]byte, []int) {
	return file_vipLevelService_proto_rawDescGZIP(), []int{0}
}

func (x *VipLevel) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VipLevel) GetVipId() int32 {
	if x != nil {
		return x.VipId
	}
	return 0
}

func (x *VipLevel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VipLevel) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *VipLevel) GetBgMode() string {
	if x != nil {
		return x.BgMode
	}
	return ""
}

func (x *VipLevel) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *VipLevel) GetBgImageUrl() string {
	if x != nil {
		return x.BgImageUrl
	}
	return ""
}

func (x *VipLevel) GetUpCondition() *VipUpCondition {
	if x != nil {
		return x.UpCondition
	}
	return nil
}

func (x *VipLevel) GetPayRules() []*VipPayRule {
	if x != nil {
		return x.PayRules
	}
	return nil
}

func (x *VipLevel) GetBaseBenefit() *VipBaseBenefit {
	if x != nil {
		return x.BaseBenefit
	}
	return nil
}

func (x *VipLevel) GetMoreBenefitCodes() []string {
	if x != nil {
		return x.MoreBenefitCodes
	}
	return nil
}

func (x *VipLevel) GetUpPackage() *VipUpPackage {
	if x != nil {
		return x.UpPackage
	}
	return nil
}

func (x *VipLevel) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *VipLevel) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VipLevel) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *VipLevel) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *VipLevel) GetBenefits() []*VipBenefit {
	if x != nil {
		return x.Benefits
	}
	return nil
}

func (x *VipLevel) GetBenefitsNames() []string {
	if x != nil {
		return x.BenefitsNames
	}
	return nil
}

func (x *VipLevel) GetPayRulesTips() []string {
	if x != nil {
		return x.PayRulesTips
	}
	return nil
}

// 等级升级条件
type VipUpCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrowthValue    int64 `protobuf:"varint,1,opt,name=growth_value,json=growthValue,proto3" json:"growth_value"`          //需要成长值
	OrderAmount    int64 `protobuf:"varint,2,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount"`          //消费满X金额
	OrderNumber    int64 `protobuf:"varint,3,opt,name=order_number,json=orderNumber,proto3" json:"order_number"`          //消费满X笔数
	IntegrateTotal int64 `protobuf:"varint,4,opt,name=integrate_total,json=integrateTotal,proto3" json:"integrate_total"` //累计积分
}

func (x *VipUpCondition) Reset() {
	*x = VipUpCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipLevelService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUpCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUpCondition) ProtoMessage() {}

func (x *VipUpCondition) ProtoReflect() protoreflect.Message {
	mi := &file_vipLevelService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUpCondition.ProtoReflect.Descriptor instead.
func (*VipUpCondition) Descriptor() ([]byte, []int) {
	return file_vipLevelService_proto_rawDescGZIP(), []int{1}
}

func (x *VipUpCondition) GetGrowthValue() int64 {
	if x != nil {
		return x.GrowthValue
	}
	return 0
}

func (x *VipUpCondition) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *VipUpCondition) GetOrderNumber() int64 {
	if x != nil {
		return x.OrderNumber
	}
	return 0
}

func (x *VipUpCondition) GetIntegrateTotal() int64 {
	if x != nil {
		return x.IntegrateTotal
	}
	return 0
}

// VIP更多权益
type VipMoreBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`     //权益ID
	Code int64 `protobuf:"varint,2,opt,name=code,proto3" json:"code"` //权益Code
	Name int64 `protobuf:"varint,3,opt,name=name,proto3" json:"name"` //权益名称
}

func (x *VipMoreBenefit) Reset() {
	*x = VipMoreBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipLevelService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipMoreBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipMoreBenefit) ProtoMessage() {}

func (x *VipMoreBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_vipLevelService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipMoreBenefit.ProtoReflect.Descriptor instead.
func (*VipMoreBenefit) Descriptor() ([]byte, []int) {
	return file_vipLevelService_proto_rawDescGZIP(), []int{2}
}

func (x *VipMoreBenefit) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VipMoreBenefit) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VipMoreBenefit) GetName() int64 {
	if x != nil {
		return x.Name
	}
	return 0
}

// VIP基本权益
type VipBaseBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFreeShipping      bool    `protobuf:"varint,10,opt,name=is_free_shipping,json=isFreeShipping,proto3" json:"is_free_shipping"`                //会员包邮
	IsDiscount          bool    `protobuf:"varint,11,opt,name=is_discount,json=isDiscount,proto3" json:"is_discount"`                              //会员折扣
	DiscountRate        float32 `protobuf:"fixed32,12,opt,name=discount_rate,json=discountRate,proto3" json:"discount_rate"`                       //会员折扣率
	IsPointFeedback     bool    `protobuf:"varint,13,opt,name=is_point_feedback,json=isPointFeedback,proto3" json:"is_point_feedback"`             //积分回馈
	PointFeedbackDoubly int32   `protobuf:"varint,14,opt,name=point_feedback_doubly,json=pointFeedbackDoubly,proto3" json:"point_feedback_doubly"` //积分回馈倍数
}

func (x *VipBaseBenefit) Reset() {
	*x = VipBaseBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipLevelService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipBaseBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipBaseBenefit) ProtoMessage() {}

func (x *VipBaseBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_vipLevelService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipBaseBenefit.ProtoReflect.Descriptor instead.
func (*VipBaseBenefit) Descriptor() ([]byte, []int) {
	return file_vipLevelService_proto_rawDescGZIP(), []int{3}
}

func (x *VipBaseBenefit) GetIsFreeShipping() bool {
	if x != nil {
		return x.IsFreeShipping
	}
	return false
}

func (x *VipBaseBenefit) GetIsDiscount() bool {
	if x != nil {
		return x.IsDiscount
	}
	return false
}

func (x *VipBaseBenefit) GetDiscountRate() float32 {
	if x != nil {
		return x.DiscountRate
	}
	return 0
}

func (x *VipBaseBenefit) GetIsPointFeedback() bool {
	if x != nil {
		return x.IsPointFeedback
	}
	return false
}

func (x *VipBaseBenefit) GetPointFeedbackDoubly() int32 {
	if x != nil {
		return x.PointFeedbackDoubly
	}
	return 0
}

// VIP付费规则
type VipPayRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month     int32  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`                         //月份
	Price     int64  `protobuf:"varint,3,opt,name=price,proto3" json:"price"`                         //价格
	MonthName string `protobuf:"bytes,4,opt,name=month_name,json=monthName,proto3" json:"month_name"` //月份名称
}

func (x *VipPayRule) Reset() {
	*x = VipPayRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipLevelService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipPayRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipPayRule) ProtoMessage() {}

func (x *VipPayRule) ProtoReflect() protoreflect.Message {
	mi := &file_vipLevelService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipPayRule.ProtoReflect.Descriptor instead.
func (*VipPayRule) Descriptor() ([]byte, []int) {
	return file_vipLevelService_proto_rawDescGZIP(), []int{4}
}

func (x *VipPayRule) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *VipPayRule) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *VipPayRule) GetMonthName() string {
	if x != nil {
		return x.MonthName
	}
	return ""
}

// VIP升级礼包
type VipUpPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSendIntegral bool                  `protobuf:"varint,1,opt,name=is_send_integral,json=isSendIntegral,proto3" json:"is_send_integral"` //是否赠送积分
	IsSendCoupon   bool                  `protobuf:"varint,2,opt,name=is_send_coupon,json=isSendCoupon,proto3" json:"is_send_coupon"`       //是否赠送优惠劵(会员权益)(0否，1是)
	IsSendGift     bool                  `protobuf:"varint,3,opt,name=is_send_gift,json=isSendGift,proto3" json:"is_send_gift"`             //是否赠送礼品(会员权益)(0否，1是)
	SendIntegral   int64                 `protobuf:"varint,4,opt,name=send_integral,json=sendIntegral,proto3" json:"send_integral"`         //赠送积分数
	SendCouponData []*VipUpPackageCoupon `protobuf:"bytes,5,rep,name=send_coupon_data,json=sendCouponData,proto3" json:"send_coupon_data"`  //赠送优惠劵数据
	SendGiftData   []*VipUpPackageGift   `protobuf:"bytes,6,rep,name=send_gift_data,json=sendGiftData,proto3" json:"send_gift_data"`        //赠送礼品数据
}

func (x *VipUpPackage) Reset() {
	*x = VipUpPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipLevelService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUpPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUpPackage) ProtoMessage() {}

func (x *VipUpPackage) ProtoReflect() protoreflect.Message {
	mi := &file_vipLevelService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUpPackage.ProtoReflect.Descriptor instead.
func (*VipUpPackage) Descriptor() ([]byte, []int) {
	return file_vipLevelService_proto_rawDescGZIP(), []int{5}
}

func (x *VipUpPackage) GetIsSendIntegral() bool {
	if x != nil {
		return x.IsSendIntegral
	}
	return false
}

func (x *VipUpPackage) GetIsSendCoupon() bool {
	if x != nil {
		return x.IsSendCoupon
	}
	return false
}

func (x *VipUpPackage) GetIsSendGift() bool {
	if x != nil {
		return x.IsSendGift
	}
	return false
}

func (x *VipUpPackage) GetSendIntegral() int64 {
	if x != nil {
		return x.SendIntegral
	}
	return 0
}

func (x *VipUpPackage) GetSendCouponData() []*VipUpPackageCoupon {
	if x != nil {
		return x.SendCouponData
	}
	return nil
}

func (x *VipUpPackage) GetSendGiftData() []*VipUpPackageGift {
	if x != nil {
		return x.SendGiftData
	}
	return nil
}

type VipLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top       int32    `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64    `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sort      []string `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort"`
	DateRange []string `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int32  `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int32    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	//以下为自定义参数
	VipId           int32    `protobuf:"varint,11,opt,name=vip_id,json=vipId,proto3" json:"vip_id"`                                //体系ID
	Name            string   `protobuf:"bytes,12,opt,name=name,proto3" json:"name"`                                                //等级名称
	IsFreeShipping  string   `protobuf:"bytes,13,opt,name=is_free_shipping,json=isFreeShipping,proto3" json:"is_free_shipping"`    //会员包邮
	IsDiscount      string   `protobuf:"bytes,14,opt,name=is_discount,json=isDiscount,proto3" json:"is_discount"`                  //会员折扣
	IsPointFeedback string   `protobuf:"bytes,15,opt,name=is_point_feedback,json=isPointFeedback,proto3" json:"is_point_feedback"` //积分回馈
	Status          string   `protobuf:"bytes,16,opt,name=status,proto3" json:"status"`                                            //状态
	Type            string   `protobuf:"bytes,17,opt,name=type,proto3" json:"type"`                                                //VIP类型
	Codes           []string `protobuf:"bytes,18,rep,name=codes,proto3" json:"codes"`
}

func (x *VipLevelRequest) Reset() {
	*x = VipLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipLevelService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLevelRequest) ProtoMessage() {}

func (x *VipLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vipLevelService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLevelRequest.ProtoReflect.Descriptor instead.
func (*VipLevelRequest) Descriptor() ([]byte, []int) {
	return file_vipLevelService_proto_rawDescGZIP(), []int{6}
}

func (x *VipLevelRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *VipLevelRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *VipLevelRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *VipLevelRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *VipLevelRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *VipLevelRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *VipLevelRequest) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *VipLevelRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VipLevelRequest) GetVipId() int32 {
	if x != nil {
		return x.VipId
	}
	return 0
}

func (x *VipLevelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VipLevelRequest) GetIsFreeShipping() string {
	if x != nil {
		return x.IsFreeShipping
	}
	return ""
}

func (x *VipLevelRequest) GetIsDiscount() string {
	if x != nil {
		return x.IsDiscount
	}
	return ""
}

func (x *VipLevelRequest) GetIsPointFeedback() string {
	if x != nil {
		return x.IsPointFeedback
	}
	return ""
}

func (x *VipLevelRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VipLevelRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VipLevelRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type VipLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string        `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Entity *VipLevel     `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity"`
	Items  []*VipLevel   `protobuf:"bytes,4,rep,name=items,proto3" json:"items"`
}

func (x *VipLevelResponse) Reset() {
	*x = VipLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipLevelService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipLevelResponse) ProtoMessage() {}

func (x *VipLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vipLevelService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipLevelResponse.ProtoReflect.Descriptor instead.
func (*VipLevelResponse) Descriptor() ([]byte, []int) {
	return file_vipLevelService_proto_rawDescGZIP(), []int{7}
}

func (x *VipLevelResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *VipLevelResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *VipLevelResponse) GetEntity() *VipLevel {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *VipLevelResponse) GetItems() []*VipLevel {
	if x != nil {
		return x.Items
	}
	return nil
}

type VipUpPackageCoupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponId int64  `protobuf:"varint,1,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Number   int32  `protobuf:"varint,3,opt,name=number,proto3" json:"number"`
}

func (x *VipUpPackageCoupon) Reset() {
	*x = VipUpPackageCoupon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipLevelService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUpPackageCoupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUpPackageCoupon) ProtoMessage() {}

func (x *VipUpPackageCoupon) ProtoReflect() protoreflect.Message {
	mi := &file_vipLevelService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUpPackageCoupon.ProtoReflect.Descriptor instead.
func (*VipUpPackageCoupon) Descriptor() ([]byte, []int) {
	return file_vipLevelService_proto_rawDescGZIP(), []int{5, 0}
}

func (x *VipUpPackageCoupon) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *VipUpPackageCoupon) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VipUpPackageCoupon) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type VipUpPackageGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpuId    int64  `protobuf:"varint,1,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`
	Unique   string `protobuf:"bytes,2,opt,name=unique,proto3" json:"unique"`
	Title    string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	Unit     string `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit"`
	ImageUrl string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	Number   int32  `protobuf:"varint,6,opt,name=number,proto3" json:"number"`
}

func (x *VipUpPackageGift) Reset() {
	*x = VipUpPackageGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vipLevelService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VipUpPackageGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VipUpPackageGift) ProtoMessage() {}

func (x *VipUpPackageGift) ProtoReflect() protoreflect.Message {
	mi := &file_vipLevelService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VipUpPackageGift.ProtoReflect.Descriptor instead.
func (*VipUpPackageGift) Descriptor() ([]byte, []int) {
	return file_vipLevelService_proto_rawDescGZIP(), []int{5, 1}
}

func (x *VipUpPackageGift) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *VipUpPackageGift) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *VipUpPackageGift) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VipUpPackageGift) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *VipUpPackageGift) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *VipUpPackageGift) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

var File_vipLevelService_proto protoreflect.FileDescriptor

var file_vipLevelService_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x69, 0x70, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x05,
	0x0a, 0x08, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x70, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x61, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x42, 0x61, 0x73, 0x65, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f,
	0x72, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x0a, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69,
	0x70, 0x55, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x09, 0x75, 0x70, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30,
	0x0a, 0x08, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x08, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x54, 0x69, 0x70, 0x73, 0x22, 0xa2, 0x01,
	0x0a, 0x0e, 0x56, 0x69, 0x70, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x48, 0x0a, 0x0e, 0x56, 0x69, 0x70, 0x4d, 0x6f, 0x72, 0x65, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x01, 0x0a,
	0x0e, 0x56, 0x69, 0x70, 0x42, 0x61, 0x73, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x46, 0x72, 0x65,
	0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x79, 0x22,
	0x57, 0x0a, 0x0a, 0x56, 0x69, 0x70, 0x50, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x04, 0x0a, 0x0c, 0x56, 0x69, 0x70,
	0x55, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c,
	0x12, 0x47, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x55, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70,
	0x55, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x67, 0x69, 0x66, 0x74, 0x52, 0x0c,
	0x73, 0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x53, 0x0a, 0x06,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x1a, 0x94, 0x01, 0x0a, 0x04, 0x67, 0x69, 0x66, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xab, 0x03, 0x0a, 0x0f, 0x56, 0x69, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x69, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x10, 0x56, 0x69, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0x82, 0x03, 0x0a, 0x0f, 0x56, 0x69, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x1a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56,
	0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a,
	0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vipLevelService_proto_rawDescOnce sync.Once
	file_vipLevelService_proto_rawDescData = file_vipLevelService_proto_rawDesc
)

func file_vipLevelService_proto_rawDescGZIP() []byte {
	file_vipLevelService_proto_rawDescOnce.Do(func() {
		file_vipLevelService_proto_rawDescData = protoimpl.X.CompressGZIP(file_vipLevelService_proto_rawDescData)
	})
	return file_vipLevelService_proto_rawDescData
}

var file_vipLevelService_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_vipLevelService_proto_goTypes = []interface{}{
	(*VipLevel)(nil),           // 0: services.VipLevel
	(*VipUpCondition)(nil),     // 1: services.VipUpCondition
	(*VipMoreBenefit)(nil),     // 2: services.VipMoreBenefit
	(*VipBaseBenefit)(nil),     // 3: services.VipBaseBenefit
	(*VipPayRule)(nil),         // 4: services.VipPayRule
	(*VipUpPackage)(nil),       // 5: services.VipUpPackage
	(*VipLevelRequest)(nil),    // 6: services.VipLevelRequest
	(*VipLevelResponse)(nil),   // 7: services.VipLevelResponse
	(*VipUpPackageCoupon)(nil), // 8: services.VipUpPackage.coupon
	(*VipUpPackageGift)(nil),   // 9: services.VipUpPackage.gift
	(*VipBenefit)(nil),         // 10: services.VipBenefit
	(*common.Pager)(nil),       // 11: common.Pager
}
var file_vipLevelService_proto_depIdxs = []int32{
	1,  // 0: services.VipLevel.up_condition:type_name -> services.VipUpCondition
	4,  // 1: services.VipLevel.pay_rules:type_name -> services.VipPayRule
	3,  // 2: services.VipLevel.base_benefit:type_name -> services.VipBaseBenefit
	5,  // 3: services.VipLevel.up_package:type_name -> services.VipUpPackage
	10, // 4: services.VipLevel.benefits:type_name -> services.VipBenefit
	8,  // 5: services.VipUpPackage.send_coupon_data:type_name -> services.VipUpPackage.coupon
	9,  // 6: services.VipUpPackage.send_gift_data:type_name -> services.VipUpPackage.gift
	11, // 7: services.VipLevelResponse.pager:type_name -> common.Pager
	0,  // 8: services.VipLevelResponse.entity:type_name -> services.VipLevel
	0,  // 9: services.VipLevelResponse.items:type_name -> services.VipLevel
	0,  // 10: services.VipLevelService.Create:input_type -> services.VipLevel
	0,  // 11: services.VipLevelService.Update:input_type -> services.VipLevel
	0,  // 12: services.VipLevelService.Delete:input_type -> services.VipLevel
	0,  // 13: services.VipLevelService.Get:input_type -> services.VipLevel
	6,  // 14: services.VipLevelService.Search:input_type -> services.VipLevelRequest
	6,  // 15: services.VipLevelService.List:input_type -> services.VipLevelRequest
	7,  // 16: services.VipLevelService.Create:output_type -> services.VipLevelResponse
	7,  // 17: services.VipLevelService.Update:output_type -> services.VipLevelResponse
	7,  // 18: services.VipLevelService.Delete:output_type -> services.VipLevelResponse
	7,  // 19: services.VipLevelService.Get:output_type -> services.VipLevelResponse
	7,  // 20: services.VipLevelService.Search:output_type -> services.VipLevelResponse
	7,  // 21: services.VipLevelService.List:output_type -> services.VipLevelResponse
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_vipLevelService_proto_init() }
func file_vipLevelService_proto_init() {
	if File_vipLevelService_proto != nil {
		return
	}
	file_vipBenefitService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vipLevelService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipLevelService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUpCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipLevelService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipMoreBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipLevelService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipBaseBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipLevelService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipPayRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipLevelService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUpPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipLevelService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipLevelService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipLevelService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUpPackageCoupon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vipLevelService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VipUpPackageGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vipLevelService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vipLevelService_proto_goTypes,
		DependencyIndexes: file_vipLevelService_proto_depIdxs,
		MessageInfos:      file_vipLevelService_proto_msgTypes,
	}.Build()
	File_vipLevelService_proto = out.File
	file_vipLevelService_proto_rawDesc = nil
	file_vipLevelService_proto_goTypes = nil
	file_vipLevelService_proto_depIdxs = nil
}
