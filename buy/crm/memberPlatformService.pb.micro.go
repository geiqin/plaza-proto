// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: memberPlatformService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MemberPlatformService service

func NewMemberPlatformServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MemberPlatformService service

type MemberPlatformService interface {
	Update(ctx context.Context, in *MemberPlatform, opts ...client.CallOption) (*MemberPlatformResponse, error)
	Delete(ctx context.Context, in *MemberPlatform, opts ...client.CallOption) (*MemberPlatformResponse, error)
	Get(ctx context.Context, in *MemberPlatform, opts ...client.CallOption) (*MemberPlatformResponse, error)
	List(ctx context.Context, in *MemberPlatformRequest, opts ...client.CallOption) (*MemberPlatformResponse, error)
	Search(ctx context.Context, in *MemberPlatformRequest, opts ...client.CallOption) (*MemberPlatformResponse, error)
}

type memberPlatformService struct {
	c    client.Client
	name string
}

func NewMemberPlatformService(name string, c client.Client) MemberPlatformService {
	return &memberPlatformService{
		c:    c,
		name: name,
	}
}

func (c *memberPlatformService) Update(ctx context.Context, in *MemberPlatform, opts ...client.CallOption) (*MemberPlatformResponse, error) {
	req := c.c.NewRequest(c.name, "MemberPlatformService.Update", in)
	out := new(MemberPlatformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPlatformService) Delete(ctx context.Context, in *MemberPlatform, opts ...client.CallOption) (*MemberPlatformResponse, error) {
	req := c.c.NewRequest(c.name, "MemberPlatformService.Delete", in)
	out := new(MemberPlatformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPlatformService) Get(ctx context.Context, in *MemberPlatform, opts ...client.CallOption) (*MemberPlatformResponse, error) {
	req := c.c.NewRequest(c.name, "MemberPlatformService.Get", in)
	out := new(MemberPlatformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPlatformService) List(ctx context.Context, in *MemberPlatformRequest, opts ...client.CallOption) (*MemberPlatformResponse, error) {
	req := c.c.NewRequest(c.name, "MemberPlatformService.List", in)
	out := new(MemberPlatformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPlatformService) Search(ctx context.Context, in *MemberPlatformRequest, opts ...client.CallOption) (*MemberPlatformResponse, error) {
	req := c.c.NewRequest(c.name, "MemberPlatformService.Search", in)
	out := new(MemberPlatformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MemberPlatformService service

type MemberPlatformServiceHandler interface {
	Update(context.Context, *MemberPlatform, *MemberPlatformResponse) error
	Delete(context.Context, *MemberPlatform, *MemberPlatformResponse) error
	Get(context.Context, *MemberPlatform, *MemberPlatformResponse) error
	List(context.Context, *MemberPlatformRequest, *MemberPlatformResponse) error
	Search(context.Context, *MemberPlatformRequest, *MemberPlatformResponse) error
}

func RegisterMemberPlatformServiceHandler(s server.Server, hdlr MemberPlatformServiceHandler, opts ...server.HandlerOption) error {
	type memberPlatformService interface {
		Update(ctx context.Context, in *MemberPlatform, out *MemberPlatformResponse) error
		Delete(ctx context.Context, in *MemberPlatform, out *MemberPlatformResponse) error
		Get(ctx context.Context, in *MemberPlatform, out *MemberPlatformResponse) error
		List(ctx context.Context, in *MemberPlatformRequest, out *MemberPlatformResponse) error
		Search(ctx context.Context, in *MemberPlatformRequest, out *MemberPlatformResponse) error
	}
	type MemberPlatformService struct {
		memberPlatformService
	}
	h := &memberPlatformServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MemberPlatformService{h}, opts...))
}

type memberPlatformServiceHandler struct {
	MemberPlatformServiceHandler
}

func (h *memberPlatformServiceHandler) Update(ctx context.Context, in *MemberPlatform, out *MemberPlatformResponse) error {
	return h.MemberPlatformServiceHandler.Update(ctx, in, out)
}

func (h *memberPlatformServiceHandler) Delete(ctx context.Context, in *MemberPlatform, out *MemberPlatformResponse) error {
	return h.MemberPlatformServiceHandler.Delete(ctx, in, out)
}

func (h *memberPlatformServiceHandler) Get(ctx context.Context, in *MemberPlatform, out *MemberPlatformResponse) error {
	return h.MemberPlatformServiceHandler.Get(ctx, in, out)
}

func (h *memberPlatformServiceHandler) List(ctx context.Context, in *MemberPlatformRequest, out *MemberPlatformResponse) error {
	return h.MemberPlatformServiceHandler.List(ctx, in, out)
}

func (h *memberPlatformServiceHandler) Search(ctx context.Context, in *MemberPlatformRequest, out *MemberPlatformResponse) error {
	return h.MemberPlatformServiceHandler.Search(ctx, in, out)
}
