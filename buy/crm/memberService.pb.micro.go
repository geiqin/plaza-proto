// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: memberService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MemberService service

func NewMemberServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MemberService service

type MemberService interface {
	//用户注册
	Reg(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//小程序用户授权
	AppMiniAuth(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//通过手机号授权
	MobileAuth(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//通过邮箱授权
	EmailAuth(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//通过账户授权
	AccountAuth(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//个人中心
	Index(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberIndexResponse, error)
	Create(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error)
	//手动添加单位用户
	CreateCompany(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error)
	//手动修改单位用户
	UpdateCompany(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error)
	//修改客户
	Update(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error)
	//删除客户
	Delete(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//锁定客户
	Lock(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//解锁客户
	Unlock(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//获得客户
	Get(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error)
	//获得自己和推荐人
	GetSelfAndReferrer(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error)
	//获得客户详情
	Detail(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error)
	//根据ids获得客户
	List(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//查询客户
	Search(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//设置会员标签
	SetTags(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error)
	//设置会员免费等级
	SetFreeLevel(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//获取用户通过已绑定手机(SRV专用)
	GetByMobile(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//获取用户通过已绑定邮箱(SRV专用)
	GetByEmail(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//获取用户通过身份证(SRV专用)
	GetByIdCard(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
}

type memberService struct {
	c    client.Client
	name string
}

func NewMemberService(name string, c client.Client) MemberService {
	return &memberService{
		c:    c,
		name: name,
	}
}

func (c *memberService) Reg(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Reg", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) AppMiniAuth(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.AppMiniAuth", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) MobileAuth(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.MobileAuth", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) EmailAuth(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.EmailAuth", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) AccountAuth(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.AccountAuth", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Index(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberIndexResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Index", in)
	out := new(MemberIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Create(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Create", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) CreateCompany(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.CreateCompany", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) UpdateCompany(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.UpdateCompany", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Update(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Update", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Delete(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Delete", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Lock(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Lock", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Unlock(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Unlock", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Get(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Get", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) GetSelfAndReferrer(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.GetSelfAndReferrer", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Detail(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Detail", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) List(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.List", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Search(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Search", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) SetTags(ctx context.Context, in *Member, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.SetTags", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) SetFreeLevel(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.SetFreeLevel", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) GetByMobile(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.GetByMobile", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) GetByEmail(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.GetByEmail", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) GetByIdCard(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.GetByIdCard", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MemberService service

type MemberServiceHandler interface {
	//用户注册
	Reg(context.Context, *MemberRequest, *MemberResponse) error
	//小程序用户授权
	AppMiniAuth(context.Context, *MemberRequest, *MemberResponse) error
	//通过手机号授权
	MobileAuth(context.Context, *MemberRequest, *MemberResponse) error
	//通过邮箱授权
	EmailAuth(context.Context, *MemberRequest, *MemberResponse) error
	//通过账户授权
	AccountAuth(context.Context, *MemberRequest, *MemberResponse) error
	//个人中心
	Index(context.Context, *MemberRequest, *MemberIndexResponse) error
	Create(context.Context, *Member, *MemberResponse) error
	//手动添加单位用户
	CreateCompany(context.Context, *Member, *MemberResponse) error
	//手动修改单位用户
	UpdateCompany(context.Context, *Member, *MemberResponse) error
	//修改客户
	Update(context.Context, *Member, *MemberResponse) error
	//删除客户
	Delete(context.Context, *MemberRequest, *MemberResponse) error
	//锁定客户
	Lock(context.Context, *MemberRequest, *MemberResponse) error
	//解锁客户
	Unlock(context.Context, *MemberRequest, *MemberResponse) error
	//获得客户
	Get(context.Context, *Member, *MemberResponse) error
	//获得自己和推荐人
	GetSelfAndReferrer(context.Context, *Member, *MemberResponse) error
	//获得客户详情
	Detail(context.Context, *Member, *MemberResponse) error
	//根据ids获得客户
	List(context.Context, *MemberRequest, *MemberResponse) error
	//查询客户
	Search(context.Context, *MemberRequest, *MemberResponse) error
	//设置会员标签
	SetTags(context.Context, *Member, *MemberResponse) error
	//设置会员免费等级
	SetFreeLevel(context.Context, *MemberRequest, *MemberResponse) error
	//获取用户通过已绑定手机(SRV专用)
	GetByMobile(context.Context, *MemberRequest, *MemberResponse) error
	//获取用户通过已绑定邮箱(SRV专用)
	GetByEmail(context.Context, *MemberRequest, *MemberResponse) error
	//获取用户通过身份证(SRV专用)
	GetByIdCard(context.Context, *MemberRequest, *MemberResponse) error
}

func RegisterMemberServiceHandler(s server.Server, hdlr MemberServiceHandler, opts ...server.HandlerOption) error {
	type memberService interface {
		Reg(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		AppMiniAuth(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		MobileAuth(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		EmailAuth(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		AccountAuth(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		Index(ctx context.Context, in *MemberRequest, out *MemberIndexResponse) error
		Create(ctx context.Context, in *Member, out *MemberResponse) error
		CreateCompany(ctx context.Context, in *Member, out *MemberResponse) error
		UpdateCompany(ctx context.Context, in *Member, out *MemberResponse) error
		Update(ctx context.Context, in *Member, out *MemberResponse) error
		Delete(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		Lock(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		Unlock(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		Get(ctx context.Context, in *Member, out *MemberResponse) error
		GetSelfAndReferrer(ctx context.Context, in *Member, out *MemberResponse) error
		Detail(ctx context.Context, in *Member, out *MemberResponse) error
		List(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		Search(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		SetTags(ctx context.Context, in *Member, out *MemberResponse) error
		SetFreeLevel(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		GetByMobile(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		GetByEmail(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		GetByIdCard(ctx context.Context, in *MemberRequest, out *MemberResponse) error
	}
	type MemberService struct {
		memberService
	}
	h := &memberServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MemberService{h}, opts...))
}

type memberServiceHandler struct {
	MemberServiceHandler
}

func (h *memberServiceHandler) Reg(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.Reg(ctx, in, out)
}

func (h *memberServiceHandler) AppMiniAuth(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.AppMiniAuth(ctx, in, out)
}

func (h *memberServiceHandler) MobileAuth(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.MobileAuth(ctx, in, out)
}

func (h *memberServiceHandler) EmailAuth(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.EmailAuth(ctx, in, out)
}

func (h *memberServiceHandler) AccountAuth(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.AccountAuth(ctx, in, out)
}

func (h *memberServiceHandler) Index(ctx context.Context, in *MemberRequest, out *MemberIndexResponse) error {
	return h.MemberServiceHandler.Index(ctx, in, out)
}

func (h *memberServiceHandler) Create(ctx context.Context, in *Member, out *MemberResponse) error {
	return h.MemberServiceHandler.Create(ctx, in, out)
}

func (h *memberServiceHandler) CreateCompany(ctx context.Context, in *Member, out *MemberResponse) error {
	return h.MemberServiceHandler.CreateCompany(ctx, in, out)
}

func (h *memberServiceHandler) UpdateCompany(ctx context.Context, in *Member, out *MemberResponse) error {
	return h.MemberServiceHandler.UpdateCompany(ctx, in, out)
}

func (h *memberServiceHandler) Update(ctx context.Context, in *Member, out *MemberResponse) error {
	return h.MemberServiceHandler.Update(ctx, in, out)
}

func (h *memberServiceHandler) Delete(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.Delete(ctx, in, out)
}

func (h *memberServiceHandler) Lock(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.Lock(ctx, in, out)
}

func (h *memberServiceHandler) Unlock(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.Unlock(ctx, in, out)
}

func (h *memberServiceHandler) Get(ctx context.Context, in *Member, out *MemberResponse) error {
	return h.MemberServiceHandler.Get(ctx, in, out)
}

func (h *memberServiceHandler) GetSelfAndReferrer(ctx context.Context, in *Member, out *MemberResponse) error {
	return h.MemberServiceHandler.GetSelfAndReferrer(ctx, in, out)
}

func (h *memberServiceHandler) Detail(ctx context.Context, in *Member, out *MemberResponse) error {
	return h.MemberServiceHandler.Detail(ctx, in, out)
}

func (h *memberServiceHandler) List(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.List(ctx, in, out)
}

func (h *memberServiceHandler) Search(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.Search(ctx, in, out)
}

func (h *memberServiceHandler) SetTags(ctx context.Context, in *Member, out *MemberResponse) error {
	return h.MemberServiceHandler.SetTags(ctx, in, out)
}

func (h *memberServiceHandler) SetFreeLevel(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.SetFreeLevel(ctx, in, out)
}

func (h *memberServiceHandler) GetByMobile(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.GetByMobile(ctx, in, out)
}

func (h *memberServiceHandler) GetByEmail(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.GetByEmail(ctx, in, out)
}

func (h *memberServiceHandler) GetByIdCard(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.GetByIdCard(ctx, in, out)
}
