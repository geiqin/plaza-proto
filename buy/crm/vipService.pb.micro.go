// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: vipService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VipService service

func NewVipServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VipService service

type VipService interface {
	// 开启/关闭
	Switch(ctx context.Context, in *Vip, opts ...client.CallOption) (*VipResponse, error)
	// 会员体系修改
	Update(ctx context.Context, in *Vip, opts ...client.CallOption) (*VipResponse, error)
	// 会员体系获取
	Get(ctx context.Context, in *Vip, opts ...client.CallOption) (*VipResponse, error)
	// 会员体系列表
	List(ctx context.Context, in *VipRequest, opts ...client.CallOption) (*VipResponse, error)
}

type vipService struct {
	c    client.Client
	name string
}

func NewVipService(name string, c client.Client) VipService {
	return &vipService{
		c:    c,
		name: name,
	}
}

func (c *vipService) Switch(ctx context.Context, in *Vip, opts ...client.CallOption) (*VipResponse, error) {
	req := c.c.NewRequest(c.name, "VipService.Switch", in)
	out := new(VipResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipService) Update(ctx context.Context, in *Vip, opts ...client.CallOption) (*VipResponse, error) {
	req := c.c.NewRequest(c.name, "VipService.Update", in)
	out := new(VipResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipService) Get(ctx context.Context, in *Vip, opts ...client.CallOption) (*VipResponse, error) {
	req := c.c.NewRequest(c.name, "VipService.Get", in)
	out := new(VipResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipService) List(ctx context.Context, in *VipRequest, opts ...client.CallOption) (*VipResponse, error) {
	req := c.c.NewRequest(c.name, "VipService.List", in)
	out := new(VipResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VipService service

type VipServiceHandler interface {
	// 开启/关闭
	Switch(context.Context, *Vip, *VipResponse) error
	// 会员体系修改
	Update(context.Context, *Vip, *VipResponse) error
	// 会员体系获取
	Get(context.Context, *Vip, *VipResponse) error
	// 会员体系列表
	List(context.Context, *VipRequest, *VipResponse) error
}

func RegisterVipServiceHandler(s server.Server, hdlr VipServiceHandler, opts ...server.HandlerOption) error {
	type vipService interface {
		Switch(ctx context.Context, in *Vip, out *VipResponse) error
		Update(ctx context.Context, in *Vip, out *VipResponse) error
		Get(ctx context.Context, in *Vip, out *VipResponse) error
		List(ctx context.Context, in *VipRequest, out *VipResponse) error
	}
	type VipService struct {
		vipService
	}
	h := &vipServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VipService{h}, opts...))
}

type vipServiceHandler struct {
	VipServiceHandler
}

func (h *vipServiceHandler) Switch(ctx context.Context, in *Vip, out *VipResponse) error {
	return h.VipServiceHandler.Switch(ctx, in, out)
}

func (h *vipServiceHandler) Update(ctx context.Context, in *Vip, out *VipResponse) error {
	return h.VipServiceHandler.Update(ctx, in, out)
}

func (h *vipServiceHandler) Get(ctx context.Context, in *Vip, out *VipResponse) error {
	return h.VipServiceHandler.Get(ctx, in, out)
}

func (h *vipServiceHandler) List(ctx context.Context, in *VipRequest, out *VipResponse) error {
	return h.VipServiceHandler.List(ctx, in, out)
}
