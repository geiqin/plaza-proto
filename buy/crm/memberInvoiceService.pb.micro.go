// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: memberInvoiceService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MemberInvoiceService service

func NewMemberInvoiceServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MemberInvoiceService service

type MemberInvoiceService interface {
	// 发票管理新增
	Create(ctx context.Context, in *MemberInvoice, opts ...client.CallOption) (*MemberInvoiceResponse, error)
	// 发票管理修改
	Update(ctx context.Context, in *MemberInvoice, opts ...client.CallOption) (*MemberInvoiceResponse, error)
	// 发票管理删除
	Delete(ctx context.Context, in *MemberInvoice, opts ...client.CallOption) (*MemberInvoiceResponse, error)
	// 发票管理获取
	Get(ctx context.Context, in *MemberInvoice, opts ...client.CallOption) (*MemberInvoiceResponse, error)
	// 发票管理查询
	Search(ctx context.Context, in *MemberInvoiceRequest, opts ...client.CallOption) (*MemberInvoiceResponse, error)
	// 发票管理列表
	List(ctx context.Context, in *MemberInvoiceRequest, opts ...client.CallOption) (*MemberInvoiceResponse, error)
}

type memberInvoiceService struct {
	c    client.Client
	name string
}

func NewMemberInvoiceService(name string, c client.Client) MemberInvoiceService {
	return &memberInvoiceService{
		c:    c,
		name: name,
	}
}

func (c *memberInvoiceService) Create(ctx context.Context, in *MemberInvoice, opts ...client.CallOption) (*MemberInvoiceResponse, error) {
	req := c.c.NewRequest(c.name, "MemberInvoiceService.Create", in)
	out := new(MemberInvoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInvoiceService) Update(ctx context.Context, in *MemberInvoice, opts ...client.CallOption) (*MemberInvoiceResponse, error) {
	req := c.c.NewRequest(c.name, "MemberInvoiceService.Update", in)
	out := new(MemberInvoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInvoiceService) Delete(ctx context.Context, in *MemberInvoice, opts ...client.CallOption) (*MemberInvoiceResponse, error) {
	req := c.c.NewRequest(c.name, "MemberInvoiceService.Delete", in)
	out := new(MemberInvoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInvoiceService) Get(ctx context.Context, in *MemberInvoice, opts ...client.CallOption) (*MemberInvoiceResponse, error) {
	req := c.c.NewRequest(c.name, "MemberInvoiceService.Get", in)
	out := new(MemberInvoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInvoiceService) Search(ctx context.Context, in *MemberInvoiceRequest, opts ...client.CallOption) (*MemberInvoiceResponse, error) {
	req := c.c.NewRequest(c.name, "MemberInvoiceService.Search", in)
	out := new(MemberInvoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberInvoiceService) List(ctx context.Context, in *MemberInvoiceRequest, opts ...client.CallOption) (*MemberInvoiceResponse, error) {
	req := c.c.NewRequest(c.name, "MemberInvoiceService.List", in)
	out := new(MemberInvoiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MemberInvoiceService service

type MemberInvoiceServiceHandler interface {
	// 发票管理新增
	Create(context.Context, *MemberInvoice, *MemberInvoiceResponse) error
	// 发票管理修改
	Update(context.Context, *MemberInvoice, *MemberInvoiceResponse) error
	// 发票管理删除
	Delete(context.Context, *MemberInvoice, *MemberInvoiceResponse) error
	// 发票管理获取
	Get(context.Context, *MemberInvoice, *MemberInvoiceResponse) error
	// 发票管理查询
	Search(context.Context, *MemberInvoiceRequest, *MemberInvoiceResponse) error
	// 发票管理列表
	List(context.Context, *MemberInvoiceRequest, *MemberInvoiceResponse) error
}

func RegisterMemberInvoiceServiceHandler(s server.Server, hdlr MemberInvoiceServiceHandler, opts ...server.HandlerOption) error {
	type memberInvoiceService interface {
		Create(ctx context.Context, in *MemberInvoice, out *MemberInvoiceResponse) error
		Update(ctx context.Context, in *MemberInvoice, out *MemberInvoiceResponse) error
		Delete(ctx context.Context, in *MemberInvoice, out *MemberInvoiceResponse) error
		Get(ctx context.Context, in *MemberInvoice, out *MemberInvoiceResponse) error
		Search(ctx context.Context, in *MemberInvoiceRequest, out *MemberInvoiceResponse) error
		List(ctx context.Context, in *MemberInvoiceRequest, out *MemberInvoiceResponse) error
	}
	type MemberInvoiceService struct {
		memberInvoiceService
	}
	h := &memberInvoiceServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MemberInvoiceService{h}, opts...))
}

type memberInvoiceServiceHandler struct {
	MemberInvoiceServiceHandler
}

func (h *memberInvoiceServiceHandler) Create(ctx context.Context, in *MemberInvoice, out *MemberInvoiceResponse) error {
	return h.MemberInvoiceServiceHandler.Create(ctx, in, out)
}

func (h *memberInvoiceServiceHandler) Update(ctx context.Context, in *MemberInvoice, out *MemberInvoiceResponse) error {
	return h.MemberInvoiceServiceHandler.Update(ctx, in, out)
}

func (h *memberInvoiceServiceHandler) Delete(ctx context.Context, in *MemberInvoice, out *MemberInvoiceResponse) error {
	return h.MemberInvoiceServiceHandler.Delete(ctx, in, out)
}

func (h *memberInvoiceServiceHandler) Get(ctx context.Context, in *MemberInvoice, out *MemberInvoiceResponse) error {
	return h.MemberInvoiceServiceHandler.Get(ctx, in, out)
}

func (h *memberInvoiceServiceHandler) Search(ctx context.Context, in *MemberInvoiceRequest, out *MemberInvoiceResponse) error {
	return h.MemberInvoiceServiceHandler.Search(ctx, in, out)
}

func (h *memberInvoiceServiceHandler) List(ctx context.Context, in *MemberInvoiceRequest, out *MemberInvoiceResponse) error {
	return h.MemberInvoiceServiceHandler.List(ctx, in, out)
}
