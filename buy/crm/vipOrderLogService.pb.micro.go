// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: vipOrderLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VipOrderLogService service

func NewVipOrderLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VipOrderLogService service

type VipOrderLogService interface {
	//增加余额（增加）
	Income(ctx context.Context, in *VipOrderLog, opts ...client.CallOption) (*VipOrderLogResponse, error)
	//扣除余额(支出)
	Expend(ctx context.Context, in *VipOrderLog, opts ...client.CallOption) (*VipOrderLogResponse, error)
	//获得余额记录信息
	Get(ctx context.Context, in *VipOrderLog, opts ...client.CallOption) (*VipOrderLogResponse, error)
	//查询余额记录信息
	Search(ctx context.Context, in *VipOrderLogRequest, opts ...client.CallOption) (*VipOrderLogResponse, error)
}

type vipOrderLogService struct {
	c    client.Client
	name string
}

func NewVipOrderLogService(name string, c client.Client) VipOrderLogService {
	return &vipOrderLogService{
		c:    c,
		name: name,
	}
}

func (c *vipOrderLogService) Income(ctx context.Context, in *VipOrderLog, opts ...client.CallOption) (*VipOrderLogResponse, error) {
	req := c.c.NewRequest(c.name, "VipOrderLogService.Income", in)
	out := new(VipOrderLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipOrderLogService) Expend(ctx context.Context, in *VipOrderLog, opts ...client.CallOption) (*VipOrderLogResponse, error) {
	req := c.c.NewRequest(c.name, "VipOrderLogService.Expend", in)
	out := new(VipOrderLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipOrderLogService) Get(ctx context.Context, in *VipOrderLog, opts ...client.CallOption) (*VipOrderLogResponse, error) {
	req := c.c.NewRequest(c.name, "VipOrderLogService.Get", in)
	out := new(VipOrderLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipOrderLogService) Search(ctx context.Context, in *VipOrderLogRequest, opts ...client.CallOption) (*VipOrderLogResponse, error) {
	req := c.c.NewRequest(c.name, "VipOrderLogService.Search", in)
	out := new(VipOrderLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VipOrderLogService service

type VipOrderLogServiceHandler interface {
	//增加余额（增加）
	Income(context.Context, *VipOrderLog, *VipOrderLogResponse) error
	//扣除余额(支出)
	Expend(context.Context, *VipOrderLog, *VipOrderLogResponse) error
	//获得余额记录信息
	Get(context.Context, *VipOrderLog, *VipOrderLogResponse) error
	//查询余额记录信息
	Search(context.Context, *VipOrderLogRequest, *VipOrderLogResponse) error
}

func RegisterVipOrderLogServiceHandler(s server.Server, hdlr VipOrderLogServiceHandler, opts ...server.HandlerOption) error {
	type vipOrderLogService interface {
		Income(ctx context.Context, in *VipOrderLog, out *VipOrderLogResponse) error
		Expend(ctx context.Context, in *VipOrderLog, out *VipOrderLogResponse) error
		Get(ctx context.Context, in *VipOrderLog, out *VipOrderLogResponse) error
		Search(ctx context.Context, in *VipOrderLogRequest, out *VipOrderLogResponse) error
	}
	type VipOrderLogService struct {
		vipOrderLogService
	}
	h := &vipOrderLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VipOrderLogService{h}, opts...))
}

type vipOrderLogServiceHandler struct {
	VipOrderLogServiceHandler
}

func (h *vipOrderLogServiceHandler) Income(ctx context.Context, in *VipOrderLog, out *VipOrderLogResponse) error {
	return h.VipOrderLogServiceHandler.Income(ctx, in, out)
}

func (h *vipOrderLogServiceHandler) Expend(ctx context.Context, in *VipOrderLog, out *VipOrderLogResponse) error {
	return h.VipOrderLogServiceHandler.Expend(ctx, in, out)
}

func (h *vipOrderLogServiceHandler) Get(ctx context.Context, in *VipOrderLog, out *VipOrderLogResponse) error {
	return h.VipOrderLogServiceHandler.Get(ctx, in, out)
}

func (h *vipOrderLogServiceHandler) Search(ctx context.Context, in *VipOrderLogRequest, out *VipOrderLogResponse) error {
	return h.VipOrderLogServiceHandler.Search(ctx, in, out)
}
