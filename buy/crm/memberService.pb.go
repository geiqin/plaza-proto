// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: memberService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                     //ID
	Type            string           `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`                                                  //类型
	Number          string           `protobuf:"bytes,3,opt,name=number,proto3" json:"number"`                                              //会员编号
	Username        string           `protobuf:"bytes,4,opt,name=username,proto3" json:"username"`                                          //用户名称
	Nickname        string           `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname"`                                          //用户昵称
	Gender          string           `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender"`                                              //性别
	Birthday        int64            `protobuf:"varint,7,opt,name=birthday,proto3" json:"birthday"`                                         //会员生日
	ProvinceId      int64            `protobuf:"varint,8,opt,name=province_id,json=provinceId,proto3" json:"province_id"`                   //所在省ID
	CityId          int64            `protobuf:"varint,9,opt,name=city_id,json=cityId,proto3" json:"city_id"`                               //所在市ID
	DistrictId      int64            `protobuf:"varint,10,opt,name=district_id,json=districtId,proto3" json:"district_id"`                  //所在区ID
	ProvinceName    string           `protobuf:"bytes,11,opt,name=province_name,json=provinceName,proto3" json:"province_name"`             //所在省
	CityName        string           `protobuf:"bytes,12,opt,name=city_name,json=cityName,proto3" json:"city_name"`                         //所在市
	DistrictName    string           `protobuf:"bytes,13,opt,name=district_name,json=districtName,proto3" json:"district_name"`             //所在区
	Address         string           `protobuf:"bytes,14,opt,name=address,proto3" json:"address"`                                           //详细地址
	Email           string           `protobuf:"bytes,15,opt,name=email,proto3" json:"email"`                                               //邮箱
	Mobile          string           `protobuf:"bytes,16,opt,name=mobile,proto3" json:"mobile"`                                             //手机号
	AvatarUrl       string           `protobuf:"bytes,17,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url"`                      //头像
	FreeLevelId     int32            `protobuf:"varint,18,opt,name=free_level_id,json=freeLevelId,proto3" json:"free_level_id"`             //免费等级
	PayLevelId      int32            `protobuf:"varint,19,opt,name=pay_level_id,json=payLevelId,proto3" json:"pay_level_id"`                //付费等级
	Integral        int64            `protobuf:"varint,20,opt,name=integral,proto3" json:"integral"`                                        //有效积分
	Surplus         int64            `protobuf:"varint,21,opt,name=surplus,proto3" json:"surplus"`                                          //账户余额
	Points          int64            `protobuf:"varint,22,opt,name=points,proto3" json:"points"`                                            //累计积分
	OrderTotalCount int64            `protobuf:"varint,23,opt,name=order_total_count,json=orderTotalCount,proto3" json:"order_total_count"` //订单成交笔数
	OrderTotalPrice int64            `protobuf:"varint,24,opt,name=order_total_price,json=orderTotalPrice,proto3" json:"order_total_price"` //订单成交总额
	CommentCount    int32            `protobuf:"varint,25,opt,name=comment_count,json=commentCount,proto3" json:"comment_count"`            //评价总数
	CollectCount    int32            `protobuf:"varint,26,opt,name=collect_count,json=collectCount,proto3" json:"collect_count"`            //收藏总数
	ReferrerId      int64            `protobuf:"varint,27,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id"`                  //推荐人
	IsScatter       string           `protobuf:"bytes,28,opt,name=is_scatter,json=isScatter,proto3" json:"is_scatter"`                      //是否散客
	ClientType      string           `protobuf:"bytes,29,opt,name=client_type,json=clientType,proto3" json:"client_type"`                   //来源终端
	IsTrusted       string           `protobuf:"bytes,30,opt,name=is_trusted,json=isTrusted,proto3" json:"is_trusted"`                      //实名认证
	Memo            string           `protobuf:"bytes,31,opt,name=memo,proto3" json:"memo"`                                                 //备注
	LastBuyTime     int64            `protobuf:"varint,32,opt,name=last_buy_time,json=lastBuyTime,proto3" json:"last_buy_time"`             //最近下单时间
	LastLoginTime   int64            `protobuf:"varint,33,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time"`       //最近登录时间
	Status          string           `protobuf:"bytes,34,opt,name=status,proto3" json:"status"`                                             //状态
	CreatedAt       int64            `protobuf:"varint,35,opt,name=created_at,json=createdAt,proto3" json:"created_at"`                     //创建时间
	UpdatedAt       int64            `protobuf:"varint,36,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`                     //修改时间
	FreeLevel       *VipLevel        `protobuf:"bytes,38,opt,name=free_level,json=freeLevel,proto3" json:"free_level"`
	PayLevel        *VipLevel        `protobuf:"bytes,39,opt,name=pay_level,json=payLevel,proto3" json:"pay_level"`
	Referrer        *Member          `protobuf:"bytes,40,opt,name=referrer,proto3" json:"referrer"`
	Qrcode          *MemberQrcode    `protobuf:"bytes,41,opt,name=Qrcode,proto3" json:"Qrcode"`
	Tags            []*Tag           `protobuf:"bytes,42,rep,name=tags,proto3" json:"tags"`
	AddressList     []*MemberAddress `protobuf:"bytes,43,rep,name=address_list,json=addressList,proto3" json:"address_list"`
	TypeName        string           `protobuf:"bytes,48,opt,name=type_name,json=typeName,proto3" json:"type_name"`
	StatusName      string           `protobuf:"bytes,49,opt,name=status_name,json=statusName,proto3" json:"status_name"`
	GenderName      string           `protobuf:"bytes,50,opt,name=gender_name,json=genderName,proto3" json:"gender_name"`
	ClientTypeName  string           `protobuf:"bytes,51,opt,name=client_type_name,json=clientTypeName,proto3" json:"client_type_name"`
	//*
	// 绑定数据:
	// is_bind_mobile 手机号,is_bind_email 邮箱
	// is_bind_weixin 微信,is_bind_alipay 支付宝,is_bind_qq QQ
	// is_bind_baidu 百度,is_bind_toutiao 头条,is_bind_kuaishou 快手
	BindData map[string]string `protobuf:"bytes,52,rep,name=bind_data,json=bindData,proto3" json:"bind_data" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{0}
}

func (x *Member) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Member) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Member) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Member) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Member) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Member) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Member) GetBirthday() int64 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *Member) GetProvinceId() int64 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *Member) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *Member) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *Member) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *Member) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Member) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *Member) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Member) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Member) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *Member) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Member) GetFreeLevelId() int32 {
	if x != nil {
		return x.FreeLevelId
	}
	return 0
}

func (x *Member) GetPayLevelId() int32 {
	if x != nil {
		return x.PayLevelId
	}
	return 0
}

func (x *Member) GetIntegral() int64 {
	if x != nil {
		return x.Integral
	}
	return 0
}

func (x *Member) GetSurplus() int64 {
	if x != nil {
		return x.Surplus
	}
	return 0
}

func (x *Member) GetPoints() int64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Member) GetOrderTotalCount() int64 {
	if x != nil {
		return x.OrderTotalCount
	}
	return 0
}

func (x *Member) GetOrderTotalPrice() int64 {
	if x != nil {
		return x.OrderTotalPrice
	}
	return 0
}

func (x *Member) GetCommentCount() int32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Member) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *Member) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *Member) GetIsScatter() string {
	if x != nil {
		return x.IsScatter
	}
	return ""
}

func (x *Member) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *Member) GetIsTrusted() string {
	if x != nil {
		return x.IsTrusted
	}
	return ""
}

func (x *Member) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Member) GetLastBuyTime() int64 {
	if x != nil {
		return x.LastBuyTime
	}
	return 0
}

func (x *Member) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *Member) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Member) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Member) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Member) GetFreeLevel() *VipLevel {
	if x != nil {
		return x.FreeLevel
	}
	return nil
}

func (x *Member) GetPayLevel() *VipLevel {
	if x != nil {
		return x.PayLevel
	}
	return nil
}

func (x *Member) GetReferrer() *Member {
	if x != nil {
		return x.Referrer
	}
	return nil
}

func (x *Member) GetQrcode() *MemberQrcode {
	if x != nil {
		return x.Qrcode
	}
	return nil
}

func (x *Member) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Member) GetAddressList() []*MemberAddress {
	if x != nil {
		return x.AddressList
	}
	return nil
}

func (x *Member) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Member) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *Member) GetGenderName() string {
	if x != nil {
		return x.GenderName
	}
	return ""
}

func (x *Member) GetClientTypeName() string {
	if x != nil {
		return x.ClientTypeName
	}
	return ""
}

func (x *Member) GetBindData() map[string]string {
	if x != nil {
		return x.BindData
	}
	return nil
}

// 客户请求参数
type MemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top       int32    `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64    `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sort      []string `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort"`
	DateRange []string `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int64  `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	//以下为自定义参数
	Type         string `protobuf:"bytes,11,opt,name=type,proto3" json:"type"`                                     //类型
	ProvinceId   int64  `protobuf:"varint,12,opt,name=province_id,json=provinceId,proto3" json:"province_id"`      //所在省ID
	CityId       int64  `protobuf:"varint,13,opt,name=city_id,json=cityId,proto3" json:"city_id"`                  //所在市ID
	DistrictId   int64  `protobuf:"varint,14,opt,name=district_id,json=districtId,proto3" json:"district_id"`      //所在区ID
	ProvinceName string `protobuf:"bytes,15,opt,name=province_name,json=provinceName,proto3" json:"province_name"` //所在省
	CityName     string `protobuf:"bytes,16,opt,name=city_name,json=cityName,proto3" json:"city_name"`             //所在市
	DistrictName string `protobuf:"bytes,17,opt,name=district_name,json=districtName,proto3" json:"district_name"` //所在区
	LevelId      int32  `protobuf:"varint,18,opt,name=level_id,json=levelId,proto3" json:"level_id"`               //免费等级
	ReferrerId   int64  `protobuf:"varint,19,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id"`      //推荐人
	IsScatter    string `protobuf:"bytes,20,opt,name=is_scatter,json=isScatter,proto3" json:"is_scatter"`          //是否散客
	ClientType   string `protobuf:"bytes,21,opt,name=client_type,json=clientType,proto3" json:"client_type"`       //来源终端
	IsTrusted    string `protobuf:"bytes,22,opt,name=is_trusted,json=isTrusted,proto3" json:"is_trusted"`          //实名认证
	Status       string `protobuf:"bytes,23,opt,name=status,proto3" json:"status"`                                 //状态
	OpenId       string `protobuf:"bytes,27,opt,name=open_id,json=openId,proto3" json:"open_id"`
	UnionId      string `protobuf:"bytes,28,opt,name=union_id,json=unionId,proto3" json:"union_id"`
	Password     string `protobuf:"bytes,29,opt,name=password,proto3" json:"password"`
	Code         string `protobuf:"bytes,30,opt,name=code,proto3" json:"code"`
	Referrer     string `protobuf:"bytes,31,opt,name=referrer,proto3" json:"referrer"`
	FreeLevelId  int32  `protobuf:"varint,32,opt,name=free_level_id,json=freeLevelId,proto3" json:"free_level_id"` //免费等级
	PayLevelId   int32  `protobuf:"varint,33,opt,name=pay_level_id,json=payLevelId,proto3" json:"pay_level_id"`    //付费等级
	TagId        int32  `protobuf:"varint,34,opt,name=tag_id,json=tagId,proto3" json:"tag_id"`
	Platform     string `protobuf:"bytes,35,opt,name=platform,proto3" json:"platform"` //来源平台
	Mobile       string `protobuf:"bytes,36,opt,name=mobile,proto3" json:"mobile"`
	Email        string `protobuf:"bytes,37,opt,name=email,proto3" json:"email"`
	Username     string `protobuf:"bytes,38,opt,name=username,proto3" json:"username"`
	Gender       string `protobuf:"bytes,39,opt,name=gender,proto3" json:"gender"`
	MemberId     int64  `protobuf:"varint,40,opt,name=member_id,json=memberId,proto3" json:"member_id"`
}

func (x *MemberRequest) Reset() {
	*x = MemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberRequest) ProtoMessage() {}

func (x *MemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberRequest.ProtoReflect.Descriptor instead.
func (*MemberRequest) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{1}
}

func (x *MemberRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *MemberRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *MemberRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MemberRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *MemberRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *MemberRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *MemberRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *MemberRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MemberRequest) GetProvinceId() int64 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *MemberRequest) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *MemberRequest) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *MemberRequest) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *MemberRequest) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *MemberRequest) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *MemberRequest) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *MemberRequest) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *MemberRequest) GetIsScatter() string {
	if x != nil {
		return x.IsScatter
	}
	return ""
}

func (x *MemberRequest) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *MemberRequest) GetIsTrusted() string {
	if x != nil {
		return x.IsTrusted
	}
	return ""
}

func (x *MemberRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MemberRequest) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *MemberRequest) GetUnionId() string {
	if x != nil {
		return x.UnionId
	}
	return ""
}

func (x *MemberRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MemberRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MemberRequest) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *MemberRequest) GetFreeLevelId() int32 {
	if x != nil {
		return x.FreeLevelId
	}
	return 0
}

func (x *MemberRequest) GetPayLevelId() int32 {
	if x != nil {
		return x.PayLevelId
	}
	return 0
}

func (x *MemberRequest) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *MemberRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *MemberRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *MemberRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MemberRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MemberRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *MemberRequest) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

type MemberRegRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mobile string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile"`
	Email  string `protobuf:"bytes,2,opt,name=email,proto3" json:"email"`
}

func (x *MemberRegRequest) Reset() {
	*x = MemberRegRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberRegRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberRegRequest) ProtoMessage() {}

func (x *MemberRegRequest) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberRegRequest.ProtoReflect.Descriptor instead.
func (*MemberRegRequest) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{2}
}

func (x *MemberRegRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *MemberRegRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type MemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Member       `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items  []*Member     `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Msg    string        `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg"`
}

func (x *MemberResponse) Reset() {
	*x = MemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberResponse) ProtoMessage() {}

func (x *MemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberResponse.ProtoReflect.Descriptor instead.
func (*MemberResponse) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{3}
}

func (x *MemberResponse) GetEntity() *Member {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *MemberResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *MemberResponse) GetItems() []*Member {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MemberResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type MemberIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *LevelBaseInfo `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`
	NavList []*NavInfo     `protobuf:"bytes,3,rep,name=nav_list,json=navList,proto3" json:"nav_list"`
}

func (x *MemberIndexResponse) Reset() {
	*x = MemberIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberIndexResponse) ProtoMessage() {}

func (x *MemberIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberIndexResponse.ProtoReflect.Descriptor instead.
func (*MemberIndexResponse) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{4}
}

func (x *MemberIndexResponse) GetBase() *LevelBaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MemberIndexResponse) GetNavList() []*NavInfo {
	if x != nil {
		return x.NavList
	}
	return nil
}

// 等级配置
type LevelBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnableBuy             string `protobuf:"bytes,1,opt,name=is_enable_buy,json=isEnableBuy,proto3" json:"is_enable_buy"`                                         //开启购买会员,默认否(0否、1是)
	DefaultLevelImageUrl    string `protobuf:"bytes,2,opt,name=default_level_image_url,json=defaultLevelImageUrl,proto3" json:"default_level_image_url"`            //默认等级图标,建议50像素X50像素
	UserPosterShareImageUrl string `protobuf:"bytes,3,opt,name=user_poster_share_image_url,json=userPosterShareImageUrl,proto3" json:"user_poster_share_image_url"` //用户分享封面图片
	UserPosterShareTitle    string `protobuf:"bytes,4,opt,name=user_poster_share_title,json=userPosterShareTitle,proto3" json:"user_poster_share_title"`            //用户分享标题,空则读取站点页面名称
	UserPosterShareDesc     string `protobuf:"bytes,5,opt,name=user_poster_share_desc,json=userPosterShareDesc,proto3" json:"user_poster_share_desc"`               //用户分享描述,空则读取站点页面描述
	BannerTopTitle          string `protobuf:"bytes,6,opt,name=banner_top_title,json=bannerTopTitle,proto3" json:"banner_top_title"`                                //首页banner大标题空则不显示
	BannerMiddleName        string `protobuf:"bytes,7,opt,name=banner_middle_name,json=bannerMiddleName,proto3" json:"banner_middle_name"`                          //首页banner按钮文字,默认 开通会员
	BannerBottomContent     string `protobuf:"bytes,8,opt,name=banner_bottom_content,json=bannerBottomContent,proto3" json:"banner_bottom_content"`                 //首页banner背景图片,建议1920像素X475像素查看;默认背景图片
	NotOpeningVipDesc       string `protobuf:"bytes,9,opt,name=not_opening_vip_desc,json=notOpeningVipDesc,proto3" json:"not_opening_vip_desc"`                     //未开通会员介绍
	UserVipCenterNotice     string `protobuf:"bytes,10,opt,name=user_vip_center_notice,json=userVipCenterNotice,proto3" json:"user_vip_center_notice"`              //会员中心公告位于用户会员中心，空则不显示
}

func (x *LevelBaseInfo) Reset() {
	*x = LevelBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_memberService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelBaseInfo) ProtoMessage() {}

func (x *LevelBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_memberService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelBaseInfo.ProtoReflect.Descriptor instead.
func (*LevelBaseInfo) Descriptor() ([]byte, []int) {
	return file_memberService_proto_rawDescGZIP(), []int{5}
}

func (x *LevelBaseInfo) GetIsEnableBuy() string {
	if x != nil {
		return x.IsEnableBuy
	}
	return ""
}

func (x *LevelBaseInfo) GetDefaultLevelImageUrl() string {
	if x != nil {
		return x.DefaultLevelImageUrl
	}
	return ""
}

func (x *LevelBaseInfo) GetUserPosterShareImageUrl() string {
	if x != nil {
		return x.UserPosterShareImageUrl
	}
	return ""
}

func (x *LevelBaseInfo) GetUserPosterShareTitle() string {
	if x != nil {
		return x.UserPosterShareTitle
	}
	return ""
}

func (x *LevelBaseInfo) GetUserPosterShareDesc() string {
	if x != nil {
		return x.UserPosterShareDesc
	}
	return ""
}

func (x *LevelBaseInfo) GetBannerTopTitle() string {
	if x != nil {
		return x.BannerTopTitle
	}
	return ""
}

func (x *LevelBaseInfo) GetBannerMiddleName() string {
	if x != nil {
		return x.BannerMiddleName
	}
	return ""
}

func (x *LevelBaseInfo) GetBannerBottomContent() string {
	if x != nil {
		return x.BannerBottomContent
	}
	return ""
}

func (x *LevelBaseInfo) GetNotOpeningVipDesc() string {
	if x != nil {
		return x.NotOpeningVipDesc
	}
	return ""
}

func (x *LevelBaseInfo) GetUserVipCenterNotice() string {
	if x != nil {
		return x.UserVipCenterNotice
	}
	return ""
}

var File_memberService_proto protoreflect.FileDescriptor

var file_memberService_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a,
	0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x61, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x76, 0x69, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x0c, 0x0a, 0x06, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72,
	0x65, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x70, 0x6c,
	0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x73, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12,
	0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x31, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x56, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x70, 0x61, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x51, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x62,
	0x69, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x62, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x07, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66,
	0x72, 0x65, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61,
	0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x40,
	0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x99, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x70, 0x0a, 0x13,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x6e, 0x61, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4e, 0x61,
	0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6e, 0x61, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x86,
	0x04, 0x0a, 0x0d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x75, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x1b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6e, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x70, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x70, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x56, 0x69, 0x70, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x32, 0xba, 0x0b, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x52, 0x65, 0x67,
	0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x12, 0x17, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x41, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x10,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x10, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x17, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x6e,
	0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x53,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x46, 0x72, 0x65, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_memberService_proto_rawDescOnce sync.Once
	file_memberService_proto_rawDescData = file_memberService_proto_rawDesc
)

func file_memberService_proto_rawDescGZIP() []byte {
	file_memberService_proto_rawDescOnce.Do(func() {
		file_memberService_proto_rawDescData = protoimpl.X.CompressGZIP(file_memberService_proto_rawDescData)
	})
	return file_memberService_proto_rawDescData
}

var file_memberService_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_memberService_proto_goTypes = []interface{}{
	(*Member)(nil),              // 0: services.Member
	(*MemberRequest)(nil),       // 1: services.MemberRequest
	(*MemberRegRequest)(nil),    // 2: services.MemberRegRequest
	(*MemberResponse)(nil),      // 3: services.MemberResponse
	(*MemberIndexResponse)(nil), // 4: services.MemberIndexResponse
	(*LevelBaseInfo)(nil),       // 5: services.LevelBaseInfo
	nil,                         // 6: services.Member.BindDataEntry
	(*VipLevel)(nil),            // 7: services.VipLevel
	(*MemberQrcode)(nil),        // 8: services.MemberQrcode
	(*Tag)(nil),                 // 9: services.Tag
	(*MemberAddress)(nil),       // 10: services.MemberAddress
	(*common.Pager)(nil),        // 11: common.Pager
	(*NavInfo)(nil),             // 12: services.NavInfo
}
var file_memberService_proto_depIdxs = []int32{
	7,  // 0: services.Member.free_level:type_name -> services.VipLevel
	7,  // 1: services.Member.pay_level:type_name -> services.VipLevel
	0,  // 2: services.Member.referrer:type_name -> services.Member
	8,  // 3: services.Member.Qrcode:type_name -> services.MemberQrcode
	9,  // 4: services.Member.tags:type_name -> services.Tag
	10, // 5: services.Member.address_list:type_name -> services.MemberAddress
	6,  // 6: services.Member.bind_data:type_name -> services.Member.BindDataEntry
	0,  // 7: services.MemberResponse.entity:type_name -> services.Member
	11, // 8: services.MemberResponse.pager:type_name -> common.Pager
	0,  // 9: services.MemberResponse.items:type_name -> services.Member
	5,  // 10: services.MemberIndexResponse.base:type_name -> services.LevelBaseInfo
	12, // 11: services.MemberIndexResponse.nav_list:type_name -> services.NavInfo
	1,  // 12: services.MemberService.Reg:input_type -> services.MemberRequest
	1,  // 13: services.MemberService.AppMiniAuth:input_type -> services.MemberRequest
	1,  // 14: services.MemberService.MobileAuth:input_type -> services.MemberRequest
	1,  // 15: services.MemberService.EmailAuth:input_type -> services.MemberRequest
	1,  // 16: services.MemberService.AccountAuth:input_type -> services.MemberRequest
	1,  // 17: services.MemberService.Index:input_type -> services.MemberRequest
	0,  // 18: services.MemberService.Create:input_type -> services.Member
	0,  // 19: services.MemberService.CreateCompany:input_type -> services.Member
	0,  // 20: services.MemberService.UpdateCompany:input_type -> services.Member
	0,  // 21: services.MemberService.Update:input_type -> services.Member
	1,  // 22: services.MemberService.Delete:input_type -> services.MemberRequest
	1,  // 23: services.MemberService.Lock:input_type -> services.MemberRequest
	1,  // 24: services.MemberService.Unlock:input_type -> services.MemberRequest
	0,  // 25: services.MemberService.Get:input_type -> services.Member
	0,  // 26: services.MemberService.GetSelfAndReferrer:input_type -> services.Member
	0,  // 27: services.MemberService.Detail:input_type -> services.Member
	1,  // 28: services.MemberService.List:input_type -> services.MemberRequest
	1,  // 29: services.MemberService.Search:input_type -> services.MemberRequest
	0,  // 30: services.MemberService.SetTags:input_type -> services.Member
	1,  // 31: services.MemberService.SetFreeLevel:input_type -> services.MemberRequest
	1,  // 32: services.MemberService.GetByMobile:input_type -> services.MemberRequest
	1,  // 33: services.MemberService.GetByEmail:input_type -> services.MemberRequest
	1,  // 34: services.MemberService.GetByIdCard:input_type -> services.MemberRequest
	3,  // 35: services.MemberService.Reg:output_type -> services.MemberResponse
	3,  // 36: services.MemberService.AppMiniAuth:output_type -> services.MemberResponse
	3,  // 37: services.MemberService.MobileAuth:output_type -> services.MemberResponse
	3,  // 38: services.MemberService.EmailAuth:output_type -> services.MemberResponse
	3,  // 39: services.MemberService.AccountAuth:output_type -> services.MemberResponse
	4,  // 40: services.MemberService.Index:output_type -> services.MemberIndexResponse
	3,  // 41: services.MemberService.Create:output_type -> services.MemberResponse
	3,  // 42: services.MemberService.CreateCompany:output_type -> services.MemberResponse
	3,  // 43: services.MemberService.UpdateCompany:output_type -> services.MemberResponse
	3,  // 44: services.MemberService.Update:output_type -> services.MemberResponse
	3,  // 45: services.MemberService.Delete:output_type -> services.MemberResponse
	3,  // 46: services.MemberService.Lock:output_type -> services.MemberResponse
	3,  // 47: services.MemberService.Unlock:output_type -> services.MemberResponse
	3,  // 48: services.MemberService.Get:output_type -> services.MemberResponse
	3,  // 49: services.MemberService.GetSelfAndReferrer:output_type -> services.MemberResponse
	3,  // 50: services.MemberService.Detail:output_type -> services.MemberResponse
	3,  // 51: services.MemberService.List:output_type -> services.MemberResponse
	3,  // 52: services.MemberService.Search:output_type -> services.MemberResponse
	3,  // 53: services.MemberService.SetTags:output_type -> services.MemberResponse
	3,  // 54: services.MemberService.SetFreeLevel:output_type -> services.MemberResponse
	3,  // 55: services.MemberService.GetByMobile:output_type -> services.MemberResponse
	3,  // 56: services.MemberService.GetByEmail:output_type -> services.MemberResponse
	3,  // 57: services.MemberService.GetByIdCard:output_type -> services.MemberResponse
	35, // [35:58] is the sub-list for method output_type
	12, // [12:35] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_memberService_proto_init() }
func file_memberService_proto_init() {
	if File_memberService_proto != nil {
		return
	}
	file_baseInfoService_proto_init()
	file_tagService_proto_init()
	file_vipLevelService_proto_init()
	file_memberAddressService_proto_init()
	file_memberQrcodeService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_memberService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_memberService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_memberService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberRegRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_memberService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_memberService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_memberService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_memberService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_memberService_proto_goTypes,
		DependencyIndexes: file_memberService_proto_depIdxs,
		MessageInfos:      file_memberService_proto_msgTypes,
	}.Build()
	File_memberService_proto = out.File
	file_memberService_proto_rawDesc = nil
	file_memberService_proto_goTypes = nil
	file_memberService_proto_depIdxs = nil
}
