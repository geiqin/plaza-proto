// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: integralService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IntegralService service

func NewIntegralServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for IntegralService service

type IntegralService interface {
	//积分增加
	IntegralAdd(ctx context.Context, in *IntegralInfo, opts ...client.CallOption) (*IntegralResponse, error)
	//积分使用
	IntegralUse(ctx context.Context, in *IntegralInfo, opts ...client.CallOption) (*IntegralResponse, error)
	//积分释放
	IntegralRollback(ctx context.Context, in *IntegralInfo, opts ...client.CallOption) (*IntegralResponse, error)
}

type integralService struct {
	c    client.Client
	name string
}

func NewIntegralService(name string, c client.Client) IntegralService {
	return &integralService{
		c:    c,
		name: name,
	}
}

func (c *integralService) IntegralAdd(ctx context.Context, in *IntegralInfo, opts ...client.CallOption) (*IntegralResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralService.IntegralAdd", in)
	out := new(IntegralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralService) IntegralUse(ctx context.Context, in *IntegralInfo, opts ...client.CallOption) (*IntegralResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralService.IntegralUse", in)
	out := new(IntegralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralService) IntegralRollback(ctx context.Context, in *IntegralInfo, opts ...client.CallOption) (*IntegralResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralService.IntegralRollback", in)
	out := new(IntegralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IntegralService service

type IntegralServiceHandler interface {
	//积分增加
	IntegralAdd(context.Context, *IntegralInfo, *IntegralResponse) error
	//积分使用
	IntegralUse(context.Context, *IntegralInfo, *IntegralResponse) error
	//积分释放
	IntegralRollback(context.Context, *IntegralInfo, *IntegralResponse) error
}

func RegisterIntegralServiceHandler(s server.Server, hdlr IntegralServiceHandler, opts ...server.HandlerOption) error {
	type integralService interface {
		IntegralAdd(ctx context.Context, in *IntegralInfo, out *IntegralResponse) error
		IntegralUse(ctx context.Context, in *IntegralInfo, out *IntegralResponse) error
		IntegralRollback(ctx context.Context, in *IntegralInfo, out *IntegralResponse) error
	}
	type IntegralService struct {
		integralService
	}
	h := &integralServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&IntegralService{h}, opts...))
}

type integralServiceHandler struct {
	IntegralServiceHandler
}

func (h *integralServiceHandler) IntegralAdd(ctx context.Context, in *IntegralInfo, out *IntegralResponse) error {
	return h.IntegralServiceHandler.IntegralAdd(ctx, in, out)
}

func (h *integralServiceHandler) IntegralUse(ctx context.Context, in *IntegralInfo, out *IntegralResponse) error {
	return h.IntegralServiceHandler.IntegralUse(ctx, in, out)
}

func (h *integralServiceHandler) IntegralRollback(ctx context.Context, in *IntegralInfo, out *IntegralResponse) error {
	return h.IntegralServiceHandler.IntegralRollback(ctx, in, out)
}
