// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: baseInfoService.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                                   //ID
	ShopId               int64      `protobuf:"varint,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                             //多店铺ID
	TaxonomyId           int64      `protobuf:"varint,3,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                                 //标准类目ID
	CategoryId           int64      `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                                 //商品分类ID
	BrandId              int32      `protobuf:"varint,5,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                          //品牌ID
	Title                string     `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`                                                              //商品标题
	TitleColor           string     `protobuf:"bytes,7,opt,name=title_color,json=titleColor,proto3" json:"title_color"`                                  //标题颜色
	SimpleDesc           string     `protobuf:"bytes,8,opt,name=simple_desc,json=simpleDesc,proto3" json:"simple_desc"`                                  //简述
	Type                 string     `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`                                                                //商品类型：goods实物商品,fictitious虚拟商品,combine组合商品
	IsVirtual            string     `protobuf:"bytes,10,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`                                    //是否为虚拟商品（0否, 1是）
	IsManySpec           string     `protobuf:"bytes,11,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                               //是否多规格商品（0否, 1是）
	IsOpenWeight         string     `protobuf:"bytes,12,opt,name=is_open_weight,json=isOpenWeight,proto3" json:"is_open_weight"`                         //是否开启称重（0否, 1是）
	IsOpenPresale        string     `protobuf:"bytes,13,opt,name=is_open_presale,json=isOpenPresale,proto3" json:"is_open_presale"`                      //是否开启预售（0否, 1是）
	Model                string     `protobuf:"bytes,14,opt,name=model,proto3" json:"model"`                                                             //型号
	PlaceOriginId        int64      `protobuf:"varint,15,opt,name=place_origin_id,json=placeOriginId,proto3" json:"place_origin_id"`                     //产地ID（地区省id）
	Unit                 string     `protobuf:"bytes,16,opt,name=unit,proto3" json:"unit"`                                                               //计量单位
	UnitRate             float32    `protobuf:"fixed32,17,opt,name=unit_rate,json=unitRate,proto3" json:"unit_rate"`                                     //计量单位换算率(称重商品需要)
	WeightPluCode        string     `protobuf:"bytes,18,opt,name=weight_plu_code,json=weightPluCode,proto3" json:"weight_plu_code"`                      //称重PLU码
	Inventory            int64      `protobuf:"varint,19,opt,name=inventory,proto3" json:"inventory"`                                                    //库存（所有规格库存总和）
	ImageUrl             string     `protobuf:"bytes,20,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                                       //商品主图url
	VideoUrl             string     `protobuf:"bytes,21,opt,name=video_url,json=videoUrl,proto3" json:"video_url"`                                       //短视频url
	Content              string     `protobuf:"bytes,22,opt,name=content,proto3" json:"content"`                                                         //商品内容
	IsShelve             string     `protobuf:"bytes,24,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`                                       //是否上架（ 0否, 1是）
	IsOnlyDisplay        string     `protobuf:"bytes,25,opt,name=is_only_display,json=isOnlyDisplay,proto3" json:"is_only_display"`                      //是否仅供展示
	IsDeductionInventory string     `protobuf:"bytes,26,opt,name=is_deduction_inventory,json=isDeductionInventory,proto3" json:"is_deduction_inventory"` //是否扣减库存（0否, 1是）
	IsMemberRight        string     `protobuf:"bytes,27,opt,name=is_member_right,json=isMemberRight,proto3" json:"is_member_right"`                      //是否设置商品购买权限（0否, 1是）
	IsMemberPrice        string     `protobuf:"bytes,28,opt,name=is_member_price,json=isMemberPrice,proto3" json:"is_member_price"`                      //是否参与会员折扣价（0否, 1是）
	MinOriginalPrice     int64      `protobuf:"varint,29,opt,name=min_original_price,json=minOriginalPrice,proto3" json:"min_original_price"`            //最低原价
	MaxOriginalPrice     int64      `protobuf:"varint,30,opt,name=max_original_price,json=maxOriginalPrice,proto3" json:"max_original_price"`            //最大原价
	MinPrice             int64      `protobuf:"varint,31,opt,name=min_price,json=minPrice,proto3" json:"min_price"`                                      //最低价格
	MaxPrice             int64      `protobuf:"varint,32,opt,name=max_price,json=maxPrice,proto3" json:"max_price"`                                      //最高价格
	BuyMinNumber         int64      `protobuf:"varint,33,opt,name=buy_min_number,json=buyMinNumber,proto3" json:"buy_min_number"`                        //最低起购数量（默认1）
	BuyMaxNumber         int64      `protobuf:"varint,34,opt,name=buy_max_number,json=buyMaxNumber,proto3" json:"buy_max_number"`                        //最大购买数量（最大数值 100000000, 小于等于0或空则不限）
	PhotoCount           int32      `protobuf:"varint,35,opt,name=photo_count,json=photoCount,proto3" json:"photo_count"`                                //相册图片数量
	AccessCount          int32      `protobuf:"varint,36,opt,name=access_count,json=accessCount,proto3" json:"access_count"`                             //访问次数
	SaleCount            int32      `protobuf:"varint,37,opt,name=sale_count,json=saleCount,proto3" json:"sale_count"`                                   //实际销量
	InitialSaleCount     int32      `protobuf:"varint,38,opt,name=initial_sale_count,json=initialSaleCount,proto3" json:"initial_sale_count"`            //初始销售数量（前端展示销量=实际销量+初始销售数量）
	ButtonMode           string     `protobuf:"bytes,41,opt,name=button_mode,json=buttonMode,proto3" json:"button_mode"`                                 //立即购买按钮：1默认名称，2自定义名称
	ButtonCustom         string     `protobuf:"bytes,42,opt,name=button_custom,json=buttonCustom,proto3" json:"button_custom"`                           //按钮自定义名称,英文最多15个字符
	FreightType          string     `protobuf:"bytes,43,opt,name=freight_type,json=freightType,proto3" json:"freight_type"`                              //运费模式：0统一邮费，1运费模板
	FreightUniformFee    int64      `protobuf:"varint,44,opt,name=freight_uniform_fee,json=freightUniformFee,proto3" json:"freight_uniform_fee"`         //统一运费
	FreightTemplateId    int64      `protobuf:"varint,45,opt,name=freight_template_id,json=freightTemplateId,proto3" json:"freight_template_id"`         //运费模板ID
	Sort                 int32      `protobuf:"varint,53,opt,name=sort,proto3" json:"sort"`                                                              //排序(数字越大显示越靠前)
	Status               string     `protobuf:"bytes,54,opt,name=status,proto3" json:"status"`                                                           //商品状态。0创建 1新品 2正常 3清仓 4停售 5淘汰
	CreatedAt            string     `protobuf:"bytes,55,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string     `protobuf:"bytes,56,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Skus                 []*SkuInfo `protobuf:"bytes,70,rep,name=skus,proto3" json:"skus"`
	BrandName            string     `protobuf:"bytes,80,opt,name=brand_name,json=brandName,proto3" json:"brand_name"`
	StatusName           string     `protobuf:"bytes,81,opt,name=status_name,json=statusName,proto3" json:"status_name"`
	IsError              string     `protobuf:"bytes,82,opt,name=is_error,json=isError,proto3" json:"is_error"`    //是否错误（0否，1是）
	ErrorMsg             string     `protobuf:"bytes,83,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg"` //错误信息
}

func (x *SpuInfo) Reset() {
	*x = SpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseInfoService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuInfo) ProtoMessage() {}

func (x *SpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseInfoService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuInfo.ProtoReflect.Descriptor instead.
func (*SpuInfo) Descriptor() ([]byte, []int) {
	return file_baseInfoService_proto_rawDescGZIP(), []int{0}
}

func (x *SpuInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuInfo) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *SpuInfo) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *SpuInfo) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SpuInfo) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *SpuInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SpuInfo) GetTitleColor() string {
	if x != nil {
		return x.TitleColor
	}
	return ""
}

func (x *SpuInfo) GetSimpleDesc() string {
	if x != nil {
		return x.SimpleDesc
	}
	return ""
}

func (x *SpuInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SpuInfo) GetIsVirtual() string {
	if x != nil {
		return x.IsVirtual
	}
	return ""
}

func (x *SpuInfo) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *SpuInfo) GetIsOpenWeight() string {
	if x != nil {
		return x.IsOpenWeight
	}
	return ""
}

func (x *SpuInfo) GetIsOpenPresale() string {
	if x != nil {
		return x.IsOpenPresale
	}
	return ""
}

func (x *SpuInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *SpuInfo) GetPlaceOriginId() int64 {
	if x != nil {
		return x.PlaceOriginId
	}
	return 0
}

func (x *SpuInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *SpuInfo) GetUnitRate() float32 {
	if x != nil {
		return x.UnitRate
	}
	return 0
}

func (x *SpuInfo) GetWeightPluCode() string {
	if x != nil {
		return x.WeightPluCode
	}
	return ""
}

func (x *SpuInfo) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *SpuInfo) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *SpuInfo) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *SpuInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SpuInfo) GetIsShelve() string {
	if x != nil {
		return x.IsShelve
	}
	return ""
}

func (x *SpuInfo) GetIsOnlyDisplay() string {
	if x != nil {
		return x.IsOnlyDisplay
	}
	return ""
}

func (x *SpuInfo) GetIsDeductionInventory() string {
	if x != nil {
		return x.IsDeductionInventory
	}
	return ""
}

func (x *SpuInfo) GetIsMemberRight() string {
	if x != nil {
		return x.IsMemberRight
	}
	return ""
}

func (x *SpuInfo) GetIsMemberPrice() string {
	if x != nil {
		return x.IsMemberPrice
	}
	return ""
}

func (x *SpuInfo) GetMinOriginalPrice() int64 {
	if x != nil {
		return x.MinOriginalPrice
	}
	return 0
}

func (x *SpuInfo) GetMaxOriginalPrice() int64 {
	if x != nil {
		return x.MaxOriginalPrice
	}
	return 0
}

func (x *SpuInfo) GetMinPrice() int64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *SpuInfo) GetMaxPrice() int64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *SpuInfo) GetBuyMinNumber() int64 {
	if x != nil {
		return x.BuyMinNumber
	}
	return 0
}

func (x *SpuInfo) GetBuyMaxNumber() int64 {
	if x != nil {
		return x.BuyMaxNumber
	}
	return 0
}

func (x *SpuInfo) GetPhotoCount() int32 {
	if x != nil {
		return x.PhotoCount
	}
	return 0
}

func (x *SpuInfo) GetAccessCount() int32 {
	if x != nil {
		return x.AccessCount
	}
	return 0
}

func (x *SpuInfo) GetSaleCount() int32 {
	if x != nil {
		return x.SaleCount
	}
	return 0
}

func (x *SpuInfo) GetInitialSaleCount() int32 {
	if x != nil {
		return x.InitialSaleCount
	}
	return 0
}

func (x *SpuInfo) GetButtonMode() string {
	if x != nil {
		return x.ButtonMode
	}
	return ""
}

func (x *SpuInfo) GetButtonCustom() string {
	if x != nil {
		return x.ButtonCustom
	}
	return ""
}

func (x *SpuInfo) GetFreightType() string {
	if x != nil {
		return x.FreightType
	}
	return ""
}

func (x *SpuInfo) GetFreightUniformFee() int64 {
	if x != nil {
		return x.FreightUniformFee
	}
	return 0
}

func (x *SpuInfo) GetFreightTemplateId() int64 {
	if x != nil {
		return x.FreightTemplateId
	}
	return 0
}

func (x *SpuInfo) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SpuInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SpuInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *SpuInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *SpuInfo) GetSkus() []*SkuInfo {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *SpuInfo) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *SpuInfo) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *SpuInfo) GetIsError() string {
	if x != nil {
		return x.IsError
	}
	return ""
}

func (x *SpuInfo) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type SkuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                            //ID
	SpuId          int64          `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                         //SpuID
	OriginalPrice  int64          `protobuf:"varint,3,opt,name=original_price,json=originalPrice,proto3" json:"original_price"` //划线价
	CostPrice      int64          `protobuf:"varint,4,opt,name=cost_price,json=costPrice,proto3" json:"cost_price"`             //成本价
	Price          int64          `protobuf:"varint,5,opt,name=price,proto3" json:"price"`                                      //销售价
	Inventory      int64          `protobuf:"varint,6,opt,name=inventory,proto3" json:"inventory"`                              //库存
	SkuKey         string         `protobuf:"bytes,7,opt,name=sku_key,json=skuKey,proto3" json:"sku_key"`                       //唯一标识
	Coding         string         `protobuf:"bytes,8,opt,name=coding,proto3" json:"coding"`                                     //编号
	Barcode        string         `protobuf:"bytes,9,opt,name=barcode,proto3" json:"barcode"`                                   //条码
	Weight         int64          `protobuf:"varint,10,opt,name=weight,proto3" json:"weight"`                                   //重量：克
	Volume         int64          `protobuf:"varint,11,opt,name=volume,proto3" json:"volume"`                                   //体积
	SpecIndexes    string         `protobuf:"bytes,12,opt,name=spec_indexes,json=specIndexes,proto3" json:"spec_indexes"`       //规格索引
	CreatedAt      string         `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt      string         `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Spec           []*SkuSpecInfo `protobuf:"bytes,17,rep,name=spec,proto3" json:"spec"`                                            //规格信息列表
	PromotionPrice int64          `protobuf:"varint,18,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price"` //促销价
	PromotionType  string         `protobuf:"bytes,19,opt,name=promotion_type,json=promotionType,proto3" json:"promotion_type"`     //促销类型
}

func (x *SkuInfo) Reset() {
	*x = SkuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseInfoService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuInfo) ProtoMessage() {}

func (x *SkuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseInfoService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuInfo.ProtoReflect.Descriptor instead.
func (*SkuInfo) Descriptor() ([]byte, []int) {
	return file_baseInfoService_proto_rawDescGZIP(), []int{1}
}

func (x *SkuInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SkuInfo) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SkuInfo) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *SkuInfo) GetCostPrice() int64 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *SkuInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SkuInfo) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *SkuInfo) GetSkuKey() string {
	if x != nil {
		return x.SkuKey
	}
	return ""
}

func (x *SkuInfo) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *SkuInfo) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *SkuInfo) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SkuInfo) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *SkuInfo) GetSpecIndexes() string {
	if x != nil {
		return x.SpecIndexes
	}
	return ""
}

func (x *SkuInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *SkuInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *SkuInfo) GetSpec() []*SkuSpecInfo {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SkuInfo) GetPromotionPrice() int64 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *SkuInfo) GetPromotionType() string {
	if x != nil {
		return x.PromotionType
	}
	return ""
}

type SkuSpecInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (x *SkuSpecInfo) Reset() {
	*x = SkuSpecInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseInfoService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuSpecInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuSpecInfo) ProtoMessage() {}

func (x *SkuSpecInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseInfoService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuSpecInfo.ProtoReflect.Descriptor instead.
func (*SkuSpecInfo) Descriptor() ([]byte, []int) {
	return file_baseInfoService_proto_rawDescGZIP(), []int{2}
}

func (x *SkuSpecInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SkuSpecInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type NavInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon  string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Url   string `protobuf:"bytes,3,opt,name=url,proto3" json:"url"`
}

func (x *NavInfo) Reset() {
	*x = NavInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseInfoService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavInfo) ProtoMessage() {}

func (x *NavInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseInfoService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavInfo.ProtoReflect.Descriptor instead.
func (*NavInfo) Descriptor() ([]byte, []int) {
	return file_baseInfoService_proto_rawDescGZIP(), []int{3}
}

func (x *NavInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *NavInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NavInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DictInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text    string `protobuf:"bytes,1,opt,name=text,proto3" json:"text"`
	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	Checked bool   `protobuf:"varint,3,opt,name=checked,proto3" json:"checked"`
}

func (x *DictInfo) Reset() {
	*x = DictInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseInfoService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictInfo) ProtoMessage() {}

func (x *DictInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseInfoService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictInfo.ProtoReflect.Descriptor instead.
func (*DictInfo) Descriptor() ([]byte, []int) {
	return file_baseInfoService_proto_rawDescGZIP(), []int{4}
}

func (x *DictInfo) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DictInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DictInfo) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

var File_baseInfoService_proto protoreflect.FileDescriptor

var file_baseInfoService_proto_rawDesc = []byte{
	0x0a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x22, 0xa3, 0x0d, 0x0a, 0x07, 0x53, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c,
	0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x65, 0x6c, 0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x53, 0x68,
	0x65, 0x6c, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x34, 0x0a, 0x16,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73,
	0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6d, 0x69, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61,
	0x78, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x61,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x72, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x72, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73,
	0x18, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x6b, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x81, 0x04, 0x0a, 0x07, 0x53, 0x6b, 0x75, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64, 0x35, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x29, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x37, 0x0a, 0x0b, 0x53,
	0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x07, 0x4e, 0x61, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x4e, 0x0a, 0x08, 0x44,
	0x69, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x0d, 0x5a, 0x0b, 0x2f,
	0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_baseInfoService_proto_rawDescOnce sync.Once
	file_baseInfoService_proto_rawDescData = file_baseInfoService_proto_rawDesc
)

func file_baseInfoService_proto_rawDescGZIP() []byte {
	file_baseInfoService_proto_rawDescOnce.Do(func() {
		file_baseInfoService_proto_rawDescData = protoimpl.X.CompressGZIP(file_baseInfoService_proto_rawDescData)
	})
	return file_baseInfoService_proto_rawDescData
}

var file_baseInfoService_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_baseInfoService_proto_goTypes = []interface{}{
	(*SpuInfo)(nil),     // 0: services.SpuInfo
	(*SkuInfo)(nil),     // 1: services.SkuInfo
	(*SkuSpecInfo)(nil), // 2: services.SkuSpecInfo
	(*NavInfo)(nil),     // 3: services.NavInfo
	(*DictInfo)(nil),    // 4: services.DictInfo
}
var file_baseInfoService_proto_depIdxs = []int32{
	1, // 0: services.SpuInfo.skus:type_name -> services.SkuInfo
	2, // 1: services.SkuInfo.spec:type_name -> services.SkuSpecInfo
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_baseInfoService_proto_init() }
func file_baseInfoService_proto_init() {
	if File_baseInfoService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_baseInfoService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseInfoService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseInfoService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuSpecInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseInfoService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseInfoService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_baseInfoService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_baseInfoService_proto_goTypes,
		DependencyIndexes: file_baseInfoService_proto_depIdxs,
		MessageInfos:      file_baseInfoService_proto_msgTypes,
	}.Build()
	File_baseInfoService_proto = out.File
	file_baseInfoService_proto_rawDesc = nil
	file_baseInfoService_proto_goTypes = nil
	file_baseInfoService_proto_depIdxs = nil
}
