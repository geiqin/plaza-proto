// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: integralRecordService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IntegralRecordService service

func NewIntegralRecordServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for IntegralRecordService service

type IntegralRecordService interface {
	// 积分明细新增
	Create(ctx context.Context, in *IntegralRecord, opts ...client.CallOption) (*IntegralRecordResponse, error)
	// 积分明细获取
	Get(ctx context.Context, in *IntegralRecord, opts ...client.CallOption) (*IntegralRecordResponse, error)
	// 积分明细查询
	Search(ctx context.Context, in *IntegralRecordRequest, opts ...client.CallOption) (*IntegralRecordResponse, error)
	// 积分明细列表
	List(ctx context.Context, in *IntegralRecordRequest, opts ...client.CallOption) (*IntegralRecordResponse, error)
}

type integralRecordService struct {
	c    client.Client
	name string
}

func NewIntegralRecordService(name string, c client.Client) IntegralRecordService {
	return &integralRecordService{
		c:    c,
		name: name,
	}
}

func (c *integralRecordService) Create(ctx context.Context, in *IntegralRecord, opts ...client.CallOption) (*IntegralRecordResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralRecordService.Create", in)
	out := new(IntegralRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralRecordService) Get(ctx context.Context, in *IntegralRecord, opts ...client.CallOption) (*IntegralRecordResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralRecordService.Get", in)
	out := new(IntegralRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralRecordService) Search(ctx context.Context, in *IntegralRecordRequest, opts ...client.CallOption) (*IntegralRecordResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralRecordService.Search", in)
	out := new(IntegralRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralRecordService) List(ctx context.Context, in *IntegralRecordRequest, opts ...client.CallOption) (*IntegralRecordResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralRecordService.List", in)
	out := new(IntegralRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IntegralRecordService service

type IntegralRecordServiceHandler interface {
	// 积分明细新增
	Create(context.Context, *IntegralRecord, *IntegralRecordResponse) error
	// 积分明细获取
	Get(context.Context, *IntegralRecord, *IntegralRecordResponse) error
	// 积分明细查询
	Search(context.Context, *IntegralRecordRequest, *IntegralRecordResponse) error
	// 积分明细列表
	List(context.Context, *IntegralRecordRequest, *IntegralRecordResponse) error
}

func RegisterIntegralRecordServiceHandler(s server.Server, hdlr IntegralRecordServiceHandler, opts ...server.HandlerOption) error {
	type integralRecordService interface {
		Create(ctx context.Context, in *IntegralRecord, out *IntegralRecordResponse) error
		Get(ctx context.Context, in *IntegralRecord, out *IntegralRecordResponse) error
		Search(ctx context.Context, in *IntegralRecordRequest, out *IntegralRecordResponse) error
		List(ctx context.Context, in *IntegralRecordRequest, out *IntegralRecordResponse) error
	}
	type IntegralRecordService struct {
		integralRecordService
	}
	h := &integralRecordServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&IntegralRecordService{h}, opts...))
}

type integralRecordServiceHandler struct {
	IntegralRecordServiceHandler
}

func (h *integralRecordServiceHandler) Create(ctx context.Context, in *IntegralRecord, out *IntegralRecordResponse) error {
	return h.IntegralRecordServiceHandler.Create(ctx, in, out)
}

func (h *integralRecordServiceHandler) Get(ctx context.Context, in *IntegralRecord, out *IntegralRecordResponse) error {
	return h.IntegralRecordServiceHandler.Get(ctx, in, out)
}

func (h *integralRecordServiceHandler) Search(ctx context.Context, in *IntegralRecordRequest, out *IntegralRecordResponse) error {
	return h.IntegralRecordServiceHandler.Search(ctx, in, out)
}

func (h *integralRecordServiceHandler) List(ctx context.Context, in *IntegralRecordRequest, out *IntegralRecordResponse) error {
	return h.IntegralRecordServiceHandler.List(ctx, in, out)
}
