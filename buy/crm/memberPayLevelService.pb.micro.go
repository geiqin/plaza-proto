// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: memberPayLevelService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MemberPayLevelService service

func NewMemberPayLevelServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MemberPayLevelService service

type MemberPayLevelService interface {
	//分享海报
	Poster(ctx context.Context, in *MemberPayLevel, opts ...client.CallOption) (*MemberPayLevelPosterResponse, error)
	Get(ctx context.Context, in *MemberPayLevel, opts ...client.CallOption) (*MemberPayLevelResponse, error)
	Search(ctx context.Context, in *MemberPayLevelRequest, opts ...client.CallOption) (*MemberPayLevelResponse, error)
	List(ctx context.Context, in *MemberPayLevelRequest, opts ...client.CallOption) (*MemberPayLevelResponse, error)
}

type memberPayLevelService struct {
	c    client.Client
	name string
}

func NewMemberPayLevelService(name string, c client.Client) MemberPayLevelService {
	return &memberPayLevelService{
		c:    c,
		name: name,
	}
}

func (c *memberPayLevelService) Poster(ctx context.Context, in *MemberPayLevel, opts ...client.CallOption) (*MemberPayLevelPosterResponse, error) {
	req := c.c.NewRequest(c.name, "MemberPayLevelService.Poster", in)
	out := new(MemberPayLevelPosterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPayLevelService) Get(ctx context.Context, in *MemberPayLevel, opts ...client.CallOption) (*MemberPayLevelResponse, error) {
	req := c.c.NewRequest(c.name, "MemberPayLevelService.Get", in)
	out := new(MemberPayLevelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPayLevelService) Search(ctx context.Context, in *MemberPayLevelRequest, opts ...client.CallOption) (*MemberPayLevelResponse, error) {
	req := c.c.NewRequest(c.name, "MemberPayLevelService.Search", in)
	out := new(MemberPayLevelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberPayLevelService) List(ctx context.Context, in *MemberPayLevelRequest, opts ...client.CallOption) (*MemberPayLevelResponse, error) {
	req := c.c.NewRequest(c.name, "MemberPayLevelService.List", in)
	out := new(MemberPayLevelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MemberPayLevelService service

type MemberPayLevelServiceHandler interface {
	//分享海报
	Poster(context.Context, *MemberPayLevel, *MemberPayLevelPosterResponse) error
	Get(context.Context, *MemberPayLevel, *MemberPayLevelResponse) error
	Search(context.Context, *MemberPayLevelRequest, *MemberPayLevelResponse) error
	List(context.Context, *MemberPayLevelRequest, *MemberPayLevelResponse) error
}

func RegisterMemberPayLevelServiceHandler(s server.Server, hdlr MemberPayLevelServiceHandler, opts ...server.HandlerOption) error {
	type memberPayLevelService interface {
		Poster(ctx context.Context, in *MemberPayLevel, out *MemberPayLevelPosterResponse) error
		Get(ctx context.Context, in *MemberPayLevel, out *MemberPayLevelResponse) error
		Search(ctx context.Context, in *MemberPayLevelRequest, out *MemberPayLevelResponse) error
		List(ctx context.Context, in *MemberPayLevelRequest, out *MemberPayLevelResponse) error
	}
	type MemberPayLevelService struct {
		memberPayLevelService
	}
	h := &memberPayLevelServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MemberPayLevelService{h}, opts...))
}

type memberPayLevelServiceHandler struct {
	MemberPayLevelServiceHandler
}

func (h *memberPayLevelServiceHandler) Poster(ctx context.Context, in *MemberPayLevel, out *MemberPayLevelPosterResponse) error {
	return h.MemberPayLevelServiceHandler.Poster(ctx, in, out)
}

func (h *memberPayLevelServiceHandler) Get(ctx context.Context, in *MemberPayLevel, out *MemberPayLevelResponse) error {
	return h.MemberPayLevelServiceHandler.Get(ctx, in, out)
}

func (h *memberPayLevelServiceHandler) Search(ctx context.Context, in *MemberPayLevelRequest, out *MemberPayLevelResponse) error {
	return h.MemberPayLevelServiceHandler.Search(ctx, in, out)
}

func (h *memberPayLevelServiceHandler) List(ctx context.Context, in *MemberPayLevelRequest, out *MemberPayLevelResponse) error {
	return h.MemberPayLevelServiceHandler.List(ctx, in, out)
}
