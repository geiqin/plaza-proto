// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: vipPriceService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VipPriceService service

func NewVipPriceServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VipPriceService service

type VipPriceService interface {
	SetPrice(ctx context.Context, in *VipPriceRequest, opts ...client.CallOption) (*VipPriceResponse, error)
	List(ctx context.Context, in *VipPriceRequest, opts ...client.CallOption) (*VipPriceResponse, error)
	Detail(ctx context.Context, in *VipPriceRequest, opts ...client.CallOption) (*VipPriceDetailResponse, error)
}

type vipPriceService struct {
	c    client.Client
	name string
}

func NewVipPriceService(name string, c client.Client) VipPriceService {
	return &vipPriceService{
		c:    c,
		name: name,
	}
}

func (c *vipPriceService) SetPrice(ctx context.Context, in *VipPriceRequest, opts ...client.CallOption) (*VipPriceResponse, error) {
	req := c.c.NewRequest(c.name, "VipPriceService.SetPrice", in)
	out := new(VipPriceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipPriceService) List(ctx context.Context, in *VipPriceRequest, opts ...client.CallOption) (*VipPriceResponse, error) {
	req := c.c.NewRequest(c.name, "VipPriceService.List", in)
	out := new(VipPriceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipPriceService) Detail(ctx context.Context, in *VipPriceRequest, opts ...client.CallOption) (*VipPriceDetailResponse, error) {
	req := c.c.NewRequest(c.name, "VipPriceService.Detail", in)
	out := new(VipPriceDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VipPriceService service

type VipPriceServiceHandler interface {
	SetPrice(context.Context, *VipPriceRequest, *VipPriceResponse) error
	List(context.Context, *VipPriceRequest, *VipPriceResponse) error
	Detail(context.Context, *VipPriceRequest, *VipPriceDetailResponse) error
}

func RegisterVipPriceServiceHandler(s server.Server, hdlr VipPriceServiceHandler, opts ...server.HandlerOption) error {
	type vipPriceService interface {
		SetPrice(ctx context.Context, in *VipPriceRequest, out *VipPriceResponse) error
		List(ctx context.Context, in *VipPriceRequest, out *VipPriceResponse) error
		Detail(ctx context.Context, in *VipPriceRequest, out *VipPriceDetailResponse) error
	}
	type VipPriceService struct {
		vipPriceService
	}
	h := &vipPriceServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VipPriceService{h}, opts...))
}

type vipPriceServiceHandler struct {
	VipPriceServiceHandler
}

func (h *vipPriceServiceHandler) SetPrice(ctx context.Context, in *VipPriceRequest, out *VipPriceResponse) error {
	return h.VipPriceServiceHandler.SetPrice(ctx, in, out)
}

func (h *vipPriceServiceHandler) List(ctx context.Context, in *VipPriceRequest, out *VipPriceResponse) error {
	return h.VipPriceServiceHandler.List(ctx, in, out)
}

func (h *vipPriceServiceHandler) Detail(ctx context.Context, in *VipPriceRequest, out *VipPriceDetailResponse) error {
	return h.VipPriceServiceHandler.Detail(ctx, in, out)
}
