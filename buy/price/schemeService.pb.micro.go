// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: schemeService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SchemeService service

func NewSchemeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SchemeService service

type SchemeService interface {
	//购物车计算
	Cart(ctx context.Context, in *SchemeRequest, opts ...client.CallOption) (*SchemeResponse, error)
	//下单购买计算
	Purchase(ctx context.Context, in *SchemeRequest, opts ...client.CallOption) (*SchemeResponse, error)
	//商品列表计算
	List(ctx context.Context, in *SchemeRequest, opts ...client.CallOption) (*SchemeResponse, error)
	//商品分润计算
	Profit(ctx context.Context, in *SchemeRequest, opts ...client.CallOption) (*SchemeResponse, error)
	//商品佣金计算
	Commission(ctx context.Context, in *SchemeRequest, opts ...client.CallOption) (*SchemeResponse, error)
}

type schemeService struct {
	c    client.Client
	name string
}

func NewSchemeService(name string, c client.Client) SchemeService {
	return &schemeService{
		c:    c,
		name: name,
	}
}

func (c *schemeService) Cart(ctx context.Context, in *SchemeRequest, opts ...client.CallOption) (*SchemeResponse, error) {
	req := c.c.NewRequest(c.name, "SchemeService.Cart", in)
	out := new(SchemeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemeService) Purchase(ctx context.Context, in *SchemeRequest, opts ...client.CallOption) (*SchemeResponse, error) {
	req := c.c.NewRequest(c.name, "SchemeService.Purchase", in)
	out := new(SchemeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemeService) List(ctx context.Context, in *SchemeRequest, opts ...client.CallOption) (*SchemeResponse, error) {
	req := c.c.NewRequest(c.name, "SchemeService.List", in)
	out := new(SchemeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemeService) Profit(ctx context.Context, in *SchemeRequest, opts ...client.CallOption) (*SchemeResponse, error) {
	req := c.c.NewRequest(c.name, "SchemeService.Profit", in)
	out := new(SchemeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemeService) Commission(ctx context.Context, in *SchemeRequest, opts ...client.CallOption) (*SchemeResponse, error) {
	req := c.c.NewRequest(c.name, "SchemeService.Commission", in)
	out := new(SchemeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SchemeService service

type SchemeServiceHandler interface {
	//购物车计算
	Cart(context.Context, *SchemeRequest, *SchemeResponse) error
	//下单购买计算
	Purchase(context.Context, *SchemeRequest, *SchemeResponse) error
	//商品列表计算
	List(context.Context, *SchemeRequest, *SchemeResponse) error
	//商品分润计算
	Profit(context.Context, *SchemeRequest, *SchemeResponse) error
	//商品佣金计算
	Commission(context.Context, *SchemeRequest, *SchemeResponse) error
}

func RegisterSchemeServiceHandler(s server.Server, hdlr SchemeServiceHandler, opts ...server.HandlerOption) error {
	type schemeService interface {
		Cart(ctx context.Context, in *SchemeRequest, out *SchemeResponse) error
		Purchase(ctx context.Context, in *SchemeRequest, out *SchemeResponse) error
		List(ctx context.Context, in *SchemeRequest, out *SchemeResponse) error
		Profit(ctx context.Context, in *SchemeRequest, out *SchemeResponse) error
		Commission(ctx context.Context, in *SchemeRequest, out *SchemeResponse) error
	}
	type SchemeService struct {
		schemeService
	}
	h := &schemeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SchemeService{h}, opts...))
}

type schemeServiceHandler struct {
	SchemeServiceHandler
}

func (h *schemeServiceHandler) Cart(ctx context.Context, in *SchemeRequest, out *SchemeResponse) error {
	return h.SchemeServiceHandler.Cart(ctx, in, out)
}

func (h *schemeServiceHandler) Purchase(ctx context.Context, in *SchemeRequest, out *SchemeResponse) error {
	return h.SchemeServiceHandler.Purchase(ctx, in, out)
}

func (h *schemeServiceHandler) List(ctx context.Context, in *SchemeRequest, out *SchemeResponse) error {
	return h.SchemeServiceHandler.List(ctx, in, out)
}

func (h *schemeServiceHandler) Profit(ctx context.Context, in *SchemeRequest, out *SchemeResponse) error {
	return h.SchemeServiceHandler.Profit(ctx, in, out)
}

func (h *schemeServiceHandler) Commission(ctx context.Context, in *SchemeRequest, out *SchemeResponse) error {
	return h.SchemeServiceHandler.Commission(ctx, in, out)
}
