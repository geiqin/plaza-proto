// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: payService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PayService service

func NewPayServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PayService service

type PayService interface {
	//下线支付
	Offline(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error)
	//余额支付
	Surplus(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error)
	//信用支付
	Credit(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error)
	//微信APP支付
	WxApp(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error)
	//微信小程序支付
	WxMini(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error)
	//支付宝手机网页支付
	AliWap(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error)
	//支付宝APP支付
	AliApp(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error)
}

type payService struct {
	c    client.Client
	name string
}

func NewPayService(name string, c client.Client) PayService {
	return &payService{
		c:    c,
		name: name,
	}
}

func (c *payService) Offline(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.Offline", in)
	out := new(PayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) Surplus(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.Surplus", in)
	out := new(PayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) Credit(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.Credit", in)
	out := new(PayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) WxApp(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.WxApp", in)
	out := new(PayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) WxMini(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.WxMini", in)
	out := new(PayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) AliWap(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.AliWap", in)
	out := new(PayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payService) AliApp(ctx context.Context, in *PayRequest, opts ...client.CallOption) (*PayResponse, error) {
	req := c.c.NewRequest(c.name, "PayService.AliApp", in)
	out := new(PayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PayService service

type PayServiceHandler interface {
	//下线支付
	Offline(context.Context, *PayRequest, *PayResponse) error
	//余额支付
	Surplus(context.Context, *PayRequest, *PayResponse) error
	//信用支付
	Credit(context.Context, *PayRequest, *PayResponse) error
	//微信APP支付
	WxApp(context.Context, *PayRequest, *PayResponse) error
	//微信小程序支付
	WxMini(context.Context, *PayRequest, *PayResponse) error
	//支付宝手机网页支付
	AliWap(context.Context, *PayRequest, *PayResponse) error
	//支付宝APP支付
	AliApp(context.Context, *PayRequest, *PayResponse) error
}

func RegisterPayServiceHandler(s server.Server, hdlr PayServiceHandler, opts ...server.HandlerOption) error {
	type payService interface {
		Offline(ctx context.Context, in *PayRequest, out *PayResponse) error
		Surplus(ctx context.Context, in *PayRequest, out *PayResponse) error
		Credit(ctx context.Context, in *PayRequest, out *PayResponse) error
		WxApp(ctx context.Context, in *PayRequest, out *PayResponse) error
		WxMini(ctx context.Context, in *PayRequest, out *PayResponse) error
		AliWap(ctx context.Context, in *PayRequest, out *PayResponse) error
		AliApp(ctx context.Context, in *PayRequest, out *PayResponse) error
	}
	type PayService struct {
		payService
	}
	h := &payServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PayService{h}, opts...))
}

type payServiceHandler struct {
	PayServiceHandler
}

func (h *payServiceHandler) Offline(ctx context.Context, in *PayRequest, out *PayResponse) error {
	return h.PayServiceHandler.Offline(ctx, in, out)
}

func (h *payServiceHandler) Surplus(ctx context.Context, in *PayRequest, out *PayResponse) error {
	return h.PayServiceHandler.Surplus(ctx, in, out)
}

func (h *payServiceHandler) Credit(ctx context.Context, in *PayRequest, out *PayResponse) error {
	return h.PayServiceHandler.Credit(ctx, in, out)
}

func (h *payServiceHandler) WxApp(ctx context.Context, in *PayRequest, out *PayResponse) error {
	return h.PayServiceHandler.WxApp(ctx, in, out)
}

func (h *payServiceHandler) WxMini(ctx context.Context, in *PayRequest, out *PayResponse) error {
	return h.PayServiceHandler.WxMini(ctx, in, out)
}

func (h *payServiceHandler) AliWap(ctx context.Context, in *PayRequest, out *PayResponse) error {
	return h.PayServiceHandler.AliWap(ctx, in, out)
}

func (h *payServiceHandler) AliApp(ctx context.Context, in *PayRequest, out *PayResponse) error {
	return h.PayServiceHandler.AliApp(ctx, in, out)
}
