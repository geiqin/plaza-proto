// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: shipmentService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShipmentService service

func NewShipmentServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShipmentService service

type ShipmentService interface {
	//创建配送方式
	Create(ctx context.Context, in *Shipment, opts ...client.CallOption) (*ShipmentResponse, error)
	//获取配送
	Get(ctx context.Context, in *ShipmentRequest, opts ...client.CallOption) (*ShipmentResponse, error)
	//获取配送列表
	List(ctx context.Context, in *ShipmentRequest, opts ...client.CallOption) (*ShipmentResponse, error)
	//开启/关闭配送方式
	Switch(ctx context.Context, in *ShipmentRequest, opts ...client.CallOption) (*ShipmentResponse, error)
	//查询配送方式
	Search(ctx context.Context, in *ShipmentRequest, opts ...client.CallOption) (*ShipmentResponse, error)
}

type shipmentService struct {
	c    client.Client
	name string
}

func NewShipmentService(name string, c client.Client) ShipmentService {
	return &shipmentService{
		c:    c,
		name: name,
	}
}

func (c *shipmentService) Create(ctx context.Context, in *Shipment, opts ...client.CallOption) (*ShipmentResponse, error) {
	req := c.c.NewRequest(c.name, "ShipmentService.Create", in)
	out := new(ShipmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentService) Get(ctx context.Context, in *ShipmentRequest, opts ...client.CallOption) (*ShipmentResponse, error) {
	req := c.c.NewRequest(c.name, "ShipmentService.Get", in)
	out := new(ShipmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentService) List(ctx context.Context, in *ShipmentRequest, opts ...client.CallOption) (*ShipmentResponse, error) {
	req := c.c.NewRequest(c.name, "ShipmentService.List", in)
	out := new(ShipmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentService) Switch(ctx context.Context, in *ShipmentRequest, opts ...client.CallOption) (*ShipmentResponse, error) {
	req := c.c.NewRequest(c.name, "ShipmentService.Switch", in)
	out := new(ShipmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentService) Search(ctx context.Context, in *ShipmentRequest, opts ...client.CallOption) (*ShipmentResponse, error) {
	req := c.c.NewRequest(c.name, "ShipmentService.Search", in)
	out := new(ShipmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShipmentService service

type ShipmentServiceHandler interface {
	//创建配送方式
	Create(context.Context, *Shipment, *ShipmentResponse) error
	//获取配送
	Get(context.Context, *ShipmentRequest, *ShipmentResponse) error
	//获取配送列表
	List(context.Context, *ShipmentRequest, *ShipmentResponse) error
	//开启/关闭配送方式
	Switch(context.Context, *ShipmentRequest, *ShipmentResponse) error
	//查询配送方式
	Search(context.Context, *ShipmentRequest, *ShipmentResponse) error
}

func RegisterShipmentServiceHandler(s server.Server, hdlr ShipmentServiceHandler, opts ...server.HandlerOption) error {
	type shipmentService interface {
		Create(ctx context.Context, in *Shipment, out *ShipmentResponse) error
		Get(ctx context.Context, in *ShipmentRequest, out *ShipmentResponse) error
		List(ctx context.Context, in *ShipmentRequest, out *ShipmentResponse) error
		Switch(ctx context.Context, in *ShipmentRequest, out *ShipmentResponse) error
		Search(ctx context.Context, in *ShipmentRequest, out *ShipmentResponse) error
	}
	type ShipmentService struct {
		shipmentService
	}
	h := &shipmentServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShipmentService{h}, opts...))
}

type shipmentServiceHandler struct {
	ShipmentServiceHandler
}

func (h *shipmentServiceHandler) Create(ctx context.Context, in *Shipment, out *ShipmentResponse) error {
	return h.ShipmentServiceHandler.Create(ctx, in, out)
}

func (h *shipmentServiceHandler) Get(ctx context.Context, in *ShipmentRequest, out *ShipmentResponse) error {
	return h.ShipmentServiceHandler.Get(ctx, in, out)
}

func (h *shipmentServiceHandler) List(ctx context.Context, in *ShipmentRequest, out *ShipmentResponse) error {
	return h.ShipmentServiceHandler.List(ctx, in, out)
}

func (h *shipmentServiceHandler) Switch(ctx context.Context, in *ShipmentRequest, out *ShipmentResponse) error {
	return h.ShipmentServiceHandler.Switch(ctx, in, out)
}

func (h *shipmentServiceHandler) Search(ctx context.Context, in *ShipmentRequest, out *ShipmentResponse) error {
	return h.ShipmentServiceHandler.Search(ctx, in, out)
}
