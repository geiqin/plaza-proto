// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: buyService.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 购买分组
type BuyGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Alias                 string                 `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias"`
	IconUrl               string                 `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url"`
	Lng                   string                 `protobuf:"bytes,5,opt,name=lng,proto3" json:"lng"`
	Lat                   string                 `protobuf:"bytes,6,opt,name=lat,proto3" json:"lat"`
	AreaId                int64                  `protobuf:"varint,7,opt,name=area_id,json=areaId,proto3" json:"area_id"`
	Address               string                 `protobuf:"bytes,8,opt,name=address,proto3" json:"address"`
	ProvinceName          string                 `protobuf:"bytes,9,opt,name=province_name,json=provinceName,proto3" json:"province_name"`
	CityName              string                 `protobuf:"bytes,10,opt,name=city_name,json=cityName,proto3" json:"city_name"`
	CountyName            string                 `protobuf:"bytes,11,opt,name=county_name,json=countyName,proto3" json:"county_name"`
	OrderBase             *OrderBase             `protobuf:"bytes,12,opt,name=order_base,json=orderBase,proto3" json:"order_base"`                                       //订单基本信息
	GoodsItems            []*BuyGoodsItem        `protobuf:"bytes,13,rep,name=goods_items,json=goodsItems,proto3" json:"goods_items"`                                    //商品列表
	IntegralDeductionData *IntegralDeductionData `protobuf:"bytes,14,opt,name=integral_deduction_data,json=integralDeductionData,proto3" json:"integral_deduction_data"` //积分抵现数据
	IntegralExchangeData  *IntegralExchangeData  `protobuf:"bytes,15,opt,name=integral_exchange_data,json=integralExchangeData,proto3" json:"integral_exchange_data"`    //积分兑换数据
}

func (x *BuyGroup) Reset() {
	*x = BuyGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyGroup) ProtoMessage() {}

func (x *BuyGroup) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyGroup.ProtoReflect.Descriptor instead.
func (*BuyGroup) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{0}
}

func (x *BuyGroup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BuyGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BuyGroup) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *BuyGroup) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *BuyGroup) GetLng() string {
	if x != nil {
		return x.Lng
	}
	return ""
}

func (x *BuyGroup) GetLat() string {
	if x != nil {
		return x.Lat
	}
	return ""
}

func (x *BuyGroup) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *BuyGroup) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BuyGroup) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *BuyGroup) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *BuyGroup) GetCountyName() string {
	if x != nil {
		return x.CountyName
	}
	return ""
}

func (x *BuyGroup) GetOrderBase() *OrderBase {
	if x != nil {
		return x.OrderBase
	}
	return nil
}

func (x *BuyGroup) GetGoodsItems() []*BuyGoodsItem {
	if x != nil {
		return x.GoodsItems
	}
	return nil
}

func (x *BuyGroup) GetIntegralDeductionData() *IntegralDeductionData {
	if x != nil {
		return x.IntegralDeductionData
	}
	return nil
}

func (x *BuyGroup) GetIntegralExchangeData() *IntegralExchangeData {
	if x != nil {
		return x.IntegralExchangeData
	}
	return nil
}

type BuyGoodsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CartId        int64             `protobuf:"varint,1,opt,name=cart_id,json=cartId,proto3" json:"cart_id"`                                                                             //购物车ID
	Title         string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`                                                                                              //标题
	ImageUrl      string            `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                                                                        //封面图片
	SpuId         int64             `protobuf:"varint,4,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                                                                                //商品spuId
	Md5Key        string            `protobuf:"bytes,5,opt,name=md5_key,json=md5Key,proto3" json:"md5_key"`                                                                              //商品规格md5_key
	Inventory     int32             `protobuf:"varint,6,opt,name=inventory,proto3" json:"inventory"`                                                                                     //库存数量
	SalePrice     int64             `protobuf:"varint,7,opt,name=sale_price,json=salePrice,proto3" json:"sale_price"`                                                                    //销售价
	Price         int64             `protobuf:"varint,8,opt,name=price,proto3" json:"price"`                                                                                             //购买价
	BuyMinNumber  int64             `protobuf:"varint,9,opt,name=buy_min_number,json=buyMinNumber,proto3" json:"buy_min_number"`                                                         //购买数量
	BuyMaxNumber  int64             `protobuf:"varint,10,opt,name=buy_max_number,json=buyMaxNumber,proto3" json:"buy_max_number"`                                                        //购买数量
	SpecWeight    int64             `protobuf:"varint,11,opt,name=spec_weight,json=specWeight,proto3" json:"spec_weight"`                                                                //规格重量
	SpecVolume    int64             `protobuf:"varint,12,opt,name=spec_volume,json=specVolume,proto3" json:"spec_volume"`                                                                //规格体积
	SpecCoding    string            `protobuf:"bytes,13,opt,name=spec_coding,json=specCoding,proto3" json:"spec_coding"`                                                                 //规格编码
	SpecBarcode   string            `protobuf:"bytes,14,opt,name=spec_barcode,json=specBarcode,proto3" json:"spec_barcode"`                                                              //规格条码
	Unit          string            `protobuf:"bytes,15,opt,name=unit,proto3" json:"unit"`                                                                                               //库存单位
	UnitRate      float32           `protobuf:"fixed32,16,opt,name=unit_rate,json=unitRate,proto3" json:"unit_rate"`                                                                     //库存单位换算率
	IsOpenWeight  string            `protobuf:"bytes,17,opt,name=is_open_weight,json=isOpenWeight,proto3" json:"is_open_weight"`                                                         //是否开启称重（0否，1是）
	Extends       map[string]string `protobuf:"bytes,18,rep,name=extends,proto3" json:"extends" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //扩展数据
	IsInvalid     string            `protobuf:"bytes,19,opt,name=is_invalid,json=isInvalid,proto3" json:"is_invalid"`                                                                    //是否无效（0否，1是）
	IsError       string            `protobuf:"bytes,20,opt,name=is_error,json=isError,proto3" json:"is_error"`                                                                          //是否错误（0否，1是）
	ErrorMsg      string            `protobuf:"bytes,21,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg"`                                                                       //错误信息
	Stock         int64             `protobuf:"varint,22,opt,name=stock,proto3" json:"stock"`                                                                                            //购买数量
	SubtotalPrice int64             `protobuf:"varint,23,opt,name=subtotal_price,json=subtotalPrice,proto3" json:"subtotal_price"`                                                       //商品小计
	Spec          []*SkuSpecInfo    `protobuf:"bytes,24,rep,name=spec,proto3" json:"spec"`                                                                                               //规格描述
	SpecDesc      string            `protobuf:"bytes,25,opt,name=spec_desc,json=specDesc,proto3" json:"spec_desc"`
	BrandName     string            `protobuf:"bytes,26,opt,name=brand_name,json=brandName,proto3" json:"brand_name"`
	GoodsUrl      string            `protobuf:"bytes,27,opt,name=goods_url,json=goodsUrl,proto3" json:"goods_url"`
	SiteType      string            `protobuf:"bytes,28,opt,name=site_type,json=siteType,proto3" json:"site_type"`
}

func (x *BuyGoodsItem) Reset() {
	*x = BuyGoodsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyGoodsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyGoodsItem) ProtoMessage() {}

func (x *BuyGoodsItem) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyGoodsItem.ProtoReflect.Descriptor instead.
func (*BuyGoodsItem) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{1}
}

func (x *BuyGoodsItem) GetCartId() int64 {
	if x != nil {
		return x.CartId
	}
	return 0
}

func (x *BuyGoodsItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BuyGoodsItem) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *BuyGoodsItem) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *BuyGoodsItem) GetMd5Key() string {
	if x != nil {
		return x.Md5Key
	}
	return ""
}

func (x *BuyGoodsItem) GetInventory() int32 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *BuyGoodsItem) GetSalePrice() int64 {
	if x != nil {
		return x.SalePrice
	}
	return 0
}

func (x *BuyGoodsItem) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *BuyGoodsItem) GetBuyMinNumber() int64 {
	if x != nil {
		return x.BuyMinNumber
	}
	return 0
}

func (x *BuyGoodsItem) GetBuyMaxNumber() int64 {
	if x != nil {
		return x.BuyMaxNumber
	}
	return 0
}

func (x *BuyGoodsItem) GetSpecWeight() int64 {
	if x != nil {
		return x.SpecWeight
	}
	return 0
}

func (x *BuyGoodsItem) GetSpecVolume() int64 {
	if x != nil {
		return x.SpecVolume
	}
	return 0
}

func (x *BuyGoodsItem) GetSpecCoding() string {
	if x != nil {
		return x.SpecCoding
	}
	return ""
}

func (x *BuyGoodsItem) GetSpecBarcode() string {
	if x != nil {
		return x.SpecBarcode
	}
	return ""
}

func (x *BuyGoodsItem) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *BuyGoodsItem) GetUnitRate() float32 {
	if x != nil {
		return x.UnitRate
	}
	return 0
}

func (x *BuyGoodsItem) GetIsOpenWeight() string {
	if x != nil {
		return x.IsOpenWeight
	}
	return ""
}

func (x *BuyGoodsItem) GetExtends() map[string]string {
	if x != nil {
		return x.Extends
	}
	return nil
}

func (x *BuyGoodsItem) GetIsInvalid() string {
	if x != nil {
		return x.IsInvalid
	}
	return ""
}

func (x *BuyGoodsItem) GetIsError() string {
	if x != nil {
		return x.IsError
	}
	return ""
}

func (x *BuyGoodsItem) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *BuyGoodsItem) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *BuyGoodsItem) GetSubtotalPrice() int64 {
	if x != nil {
		return x.SubtotalPrice
	}
	return 0
}

func (x *BuyGoodsItem) GetSpec() []*SkuSpecInfo {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BuyGoodsItem) GetSpecDesc() string {
	if x != nil {
		return x.SpecDesc
	}
	return ""
}

func (x *BuyGoodsItem) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *BuyGoodsItem) GetGoodsUrl() string {
	if x != nil {
		return x.GoodsUrl
	}
	return ""
}

func (x *BuyGoodsItem) GetSiteType() string {
	if x != nil {
		return x.SiteType
	}
	return ""
}

// 订单基础信息
type OrderBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPrice        int64             `protobuf:"varint,1,opt,name=total_price,json=totalPrice,proto3" json:"total_price"`                      //订单总价
	ActualPrice       int64             `protobuf:"varint,2,opt,name=actual_price,json=actualPrice,proto3" json:"actual_price"`                   //订单实际支付金额(已减去优惠金额, 已加上增加金额)
	IncreasePrice     int64             `protobuf:"varint,3,opt,name=increase_price,json=increasePrice,proto3" json:"increase_price"`             //增加金额
	PreferentialPrice int64             `protobuf:"varint,4,opt,name=preferential_price,json=preferentialPrice,proto3" json:"preferential_price"` //优惠金额
	SpecWeightTotal   int64             `protobuf:"varint,6,opt,name=spec_weight_total,json=specWeightTotal,proto3" json:"spec_weight_total"`     //规格重量总计
	SpecVolumeTotal   int64             `protobuf:"varint,7,opt,name=spec_volume_total,json=specVolumeTotal,proto3" json:"spec_volume_total"`     //规格体积总计
	BuyCount          float32           `protobuf:"fixed32,8,opt,name=buy_count,json=buyCount,proto3" json:"buy_count"`                           //购买商品总数量(总件数+总称重（千克）)
	BuyNumberCount    int64             `protobuf:"varint,9,opt,name=buy_number_count,json=buyNumberCount,proto3" json:"buy_number_count"`        //购买商品总件数（非称重商品）
	BuyWeightCount    int64             `protobuf:"varint,10,opt,name=buy_weight_count,json=buyWeightCount,proto3" json:"buy_weight_count"`       //购买商品总称重（称重商品.克）
	GoodsCount        int64             `protobuf:"varint,11,opt,name=goods_count,json=goodsCount,proto3" json:"goods_count"`                     //商品总数
	SiteModel         string            `protobuf:"bytes,12,opt,name=site_model,json=siteModel,proto3" json:"site_model"`                         //当前使用的站点模式
	CommonSiteType    string            `protobuf:"bytes,13,opt,name=common_site_type,json=commonSiteType,proto3" json:"common_site_type"`        //公共站点模式
	UseIntegral       int64             `protobuf:"varint,14,opt,name=use_integral,json=useIntegral,proto3" json:"use_integral"`                  //使用的积分
	UseSurplus        int64             `protobuf:"varint,15,opt,name=use_surplus,json=useSurplus,proto3" json:"use_surplus"`                     //使用的余额
	Address           *OrderAddress     `protobuf:"bytes,16,opt,name=address,proto3" json:"address"`                                              //收件地址
	ExtractionAddress []*OrderAddress   `protobuf:"bytes,17,rep,name=extraction_address,json=extractionAddress,proto3" json:"extraction_address"` //自提点地址
	ExtensionData     []*OrderExtension `protobuf:"bytes,18,rep,name=extension_data,json=extensionData,proto3" json:"extension_data"`             //扩展数据
}

func (x *OrderBase) Reset() {
	*x = OrderBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBase) ProtoMessage() {}

func (x *OrderBase) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBase.ProtoReflect.Descriptor instead.
func (*OrderBase) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{2}
}

func (x *OrderBase) GetTotalPrice() int64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *OrderBase) GetActualPrice() int64 {
	if x != nil {
		return x.ActualPrice
	}
	return 0
}

func (x *OrderBase) GetIncreasePrice() int64 {
	if x != nil {
		return x.IncreasePrice
	}
	return 0
}

func (x *OrderBase) GetPreferentialPrice() int64 {
	if x != nil {
		return x.PreferentialPrice
	}
	return 0
}

func (x *OrderBase) GetSpecWeightTotal() int64 {
	if x != nil {
		return x.SpecWeightTotal
	}
	return 0
}

func (x *OrderBase) GetSpecVolumeTotal() int64 {
	if x != nil {
		return x.SpecVolumeTotal
	}
	return 0
}

func (x *OrderBase) GetBuyCount() float32 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

func (x *OrderBase) GetBuyNumberCount() int64 {
	if x != nil {
		return x.BuyNumberCount
	}
	return 0
}

func (x *OrderBase) GetBuyWeightCount() int64 {
	if x != nil {
		return x.BuyWeightCount
	}
	return 0
}

func (x *OrderBase) GetGoodsCount() int64 {
	if x != nil {
		return x.GoodsCount
	}
	return 0
}

func (x *OrderBase) GetSiteModel() string {
	if x != nil {
		return x.SiteModel
	}
	return ""
}

func (x *OrderBase) GetCommonSiteType() string {
	if x != nil {
		return x.CommonSiteType
	}
	return ""
}

func (x *OrderBase) GetUseIntegral() int64 {
	if x != nil {
		return x.UseIntegral
	}
	return 0
}

func (x *OrderBase) GetUseSurplus() int64 {
	if x != nil {
		return x.UseSurplus
	}
	return 0
}

func (x *OrderBase) GetAddress() *OrderAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *OrderBase) GetExtractionAddress() []*OrderAddress {
	if x != nil {
		return x.ExtractionAddress
	}
	return nil
}

func (x *OrderBase) GetExtensionData() []*OrderExtension {
	if x != nil {
		return x.ExtensionData
	}
	return nil
}

// 确认信息请求参数
type BuyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyType         string          `protobuf:"bytes,1,opt,name=buy_type,json=buyType,proto3" json:"buy_type"`                                                                                                                      //购买类型
	AddressId       int64           `protobuf:"varint,2,opt,name=address_id,json=addressId,proto3" json:"address_id"`                                                                                                               //收货地址ID
	UserNote        string          `protobuf:"bytes,3,opt,name=user_note,json=userNote,proto3" json:"user_note"`                                                                                                                   //买家留言(50字以内)
	ShipmentId      int32           `protobuf:"varint,4,opt,name=shipment_id,json=shipmentId,proto3" json:"shipment_id"`                                                                                                            //选中的配送方式
	PaymentId       int32           `protobuf:"varint,5,opt,name=payment_id,json=paymentId,proto3" json:"payment_id"`                                                                                                               //选中的支付方式
	CouponId        int64           `protobuf:"varint,6,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id"`                                                                                                                  //选中的优惠劵凭证ID
	UseIntegral     int64           `protobuf:"varint,7,opt,name=use_integral,json=useIntegral,proto3" json:"use_integral"`                                                                                                         //使用的积分
	UseSurplus      int64           `protobuf:"varint,8,opt,name=use_surplus,json=useSurplus,proto3" json:"use_surplus"`                                                                                                            //使用的余额
	BuyMemberId     int64           `protobuf:"varint,9,opt,name=buy_member_id,json=buyMemberId,proto3" json:"buy_member_id"`                                                                                                       //代理的客户ID（操作员代客下单）
	RealstoreId     int64           `protobuf:"varint,10,opt,name=realstore_id,json=realstoreId,proto3" json:"realstore_id"`                                                                                                        //多门店Id
	ShopId          int64           `protobuf:"varint,11,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                                                                                                       //多商户Id
	LogisticsType   string          `protobuf:"bytes,22,opt,name=logistics_type,json=logisticsType,proto3" json:"logistics_type"`                                                                                                   //物流模式：1-物流快递，2-同城配送，3-虚拟发货，4-用户自提
	ChoiceCouponIds map[int64]int64 `protobuf:"bytes,15,rep,name=choice_coupon_ids,json=choiceCouponIds,proto3" json:"choice_coupon_ids" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //选中优惠劵 <仓库ID,用户优惠劵ID>
	BuyCartIds      []int64         `protobuf:"varint,16,rep,packed,name=buy_cart_ids,json=buyCartIds,proto3" json:"buy_cart_ids"`                                                                                                  ///购物车ids
	BuyCommodity    *BuyCommodity   `protobuf:"bytes,17,opt,name=buy_commodity,json=buyCommodity,proto3" json:"buy_commodity"`                                                                                                      //直接购买商品【单个商品】
	BuyCommodities  []*BuyCommodity `protobuf:"bytes,18,rep,name=buy_commodities,json=buyCommodities,proto3" json:"buy_commodities"`                                                                                                //购买商品清单【多个商品】
	IsIntegral      string          `protobuf:"bytes,19,opt,name=is_integral,json=isIntegral,proto3" json:"is_integral"`                                                                                                            //是否使用积分(0否，1是)
	IsSurplus       string          `protobuf:"bytes,20,opt,name=is_surplus,json=isSurplus,proto3" json:"is_surplus"`                                                                                                               //是否使用余额(0否，1是)
}

func (x *BuyRequest) Reset() {
	*x = BuyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyRequest) ProtoMessage() {}

func (x *BuyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyRequest.ProtoReflect.Descriptor instead.
func (*BuyRequest) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{3}
}

func (x *BuyRequest) GetBuyType() string {
	if x != nil {
		return x.BuyType
	}
	return ""
}

func (x *BuyRequest) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *BuyRequest) GetUserNote() string {
	if x != nil {
		return x.UserNote
	}
	return ""
}

func (x *BuyRequest) GetShipmentId() int32 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *BuyRequest) GetPaymentId() int32 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *BuyRequest) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *BuyRequest) GetUseIntegral() int64 {
	if x != nil {
		return x.UseIntegral
	}
	return 0
}

func (x *BuyRequest) GetUseSurplus() int64 {
	if x != nil {
		return x.UseSurplus
	}
	return 0
}

func (x *BuyRequest) GetBuyMemberId() int64 {
	if x != nil {
		return x.BuyMemberId
	}
	return 0
}

func (x *BuyRequest) GetRealstoreId() int64 {
	if x != nil {
		return x.RealstoreId
	}
	return 0
}

func (x *BuyRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *BuyRequest) GetLogisticsType() string {
	if x != nil {
		return x.LogisticsType
	}
	return ""
}

func (x *BuyRequest) GetChoiceCouponIds() map[int64]int64 {
	if x != nil {
		return x.ChoiceCouponIds
	}
	return nil
}

func (x *BuyRequest) GetBuyCartIds() []int64 {
	if x != nil {
		return x.BuyCartIds
	}
	return nil
}

func (x *BuyRequest) GetBuyCommodity() *BuyCommodity {
	if x != nil {
		return x.BuyCommodity
	}
	return nil
}

func (x *BuyRequest) GetBuyCommodities() []*BuyCommodity {
	if x != nil {
		return x.BuyCommodities
	}
	return nil
}

func (x *BuyRequest) GetIsIntegral() string {
	if x != nil {
		return x.IsIntegral
	}
	return ""
}

func (x *BuyRequest) GetIsSurplus() string {
	if x != nil {
		return x.IsSurplus
	}
	return ""
}

// 购买商品信息
type BuyCommodity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpuId  int64          `protobuf:"varint,1,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`    //商品ID
	Md5Key string         `protobuf:"bytes,2,opt,name=md5_key,json=md5Key,proto3" json:"md5_key"`  //规格md5_key
	Stock  int64          `protobuf:"varint,3,opt,name=stock,proto3" json:"stock"`                 //数量
	CartId int64          `protobuf:"varint,4,opt,name=cart_id,json=cartId,proto3" json:"cart_id"` //购物车行id【购物车专用】
	Spec   []*SkuSpecInfo `protobuf:"bytes,5,rep,name=spec,proto3" json:"spec"`                    //规格【待弃用：为兼容旧版小程序】
}

func (x *BuyCommodity) Reset() {
	*x = BuyCommodity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyCommodity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyCommodity) ProtoMessage() {}

func (x *BuyCommodity) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyCommodity.ProtoReflect.Descriptor instead.
func (*BuyCommodity) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{4}
}

func (x *BuyCommodity) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *BuyCommodity) GetMd5Key() string {
	if x != nil {
		return x.Md5Key
	}
	return ""
}

func (x *BuyCommodity) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *BuyCommodity) GetCartId() int64 {
	if x != nil {
		return x.CartId
	}
	return 0
}

func (x *BuyCommodity) GetSpec() []*SkuSpecInfo {
	if x != nil {
		return x.Spec
	}
	return nil
}

// 配送选择数据
type DeliveryChoose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags                    []string              `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags"`                                                                            //物流模式：1-物流快递，2-同城配送，3-虚拟发货，4-用户自提
	BuyHeaderNav             []*DeliveryChooseItem `protobuf:"bytes,2,rep,name=buy_header_nav,json=buyHeaderNav,proto3" json:"buy_header_nav"`                                        //购买头部导航
	BuyDropdownList          []*DeliveryChooseItem `protobuf:"bytes,3,rep,name=buy_dropdown_list,json=buyDropdownList,proto3" json:"buy_dropdown_list"`                               //购买下拉选择
	IsHeaderNav              string                `protobuf:"bytes,4,opt,name=is_header_nav,json=isHeaderNav,proto3" json:"is_header_nav"`                                           //是否显示头部导航(0否，1是)
	IsDropdownList           string                `protobuf:"bytes,5,opt,name=is_dropdown_list,json=isDropdownList,proto3" json:"is_dropdown_list"`                                  //是否显示下拉选择(0否，1是)
	IsExpressDelivery        string                `protobuf:"bytes,6,opt,name=is_express_delivery,json=isExpressDelivery,proto3" json:"is_express_delivery"`                         //是否支持快递发货(0否，1是)
	IsTimelyDelivery         string                `protobuf:"bytes,7,opt,name=is_timely_delivery,json=isTimelyDelivery,proto3" json:"is_timely_delivery"`                            //是否支持同城配送(0否，1是)
	IsPickupDelivery         string                `protobuf:"bytes,8,opt,name=is_pickup_delivery,json=isPickupDelivery,proto3" json:"is_pickup_delivery"`                            //是否支持上门自提(0否，1是)
	CurrentLogisticsType     string                `protobuf:"bytes,9,opt,name=current_logistics_type,json=currentLogisticsType,proto3" json:"current_logistics_type"`                //当前选中的配送方式值
	CurrentLogisticsTypeName string                `protobuf:"bytes,10,opt,name=current_logistics_type_name,json=currentLogisticsTypeName,proto3" json:"current_logistics_type_name"` //当前选中的配送方式名称
	IsError                  string                `protobuf:"bytes,11,opt,name=is_error,json=isError,proto3" json:"is_error"`                                                        //是否有错误 0否，1是
	ErrorMsg                 string                `protobuf:"bytes,12,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg"`                                                     //错误信息
}

func (x *DeliveryChoose) Reset() {
	*x = DeliveryChoose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryChoose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryChoose) ProtoMessage() {}

func (x *DeliveryChoose) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryChoose.ProtoReflect.Descriptor instead.
func (*DeliveryChoose) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{5}
}

func (x *DeliveryChoose) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *DeliveryChoose) GetBuyHeaderNav() []*DeliveryChooseItem {
	if x != nil {
		return x.BuyHeaderNav
	}
	return nil
}

func (x *DeliveryChoose) GetBuyDropdownList() []*DeliveryChooseItem {
	if x != nil {
		return x.BuyDropdownList
	}
	return nil
}

func (x *DeliveryChoose) GetIsHeaderNav() string {
	if x != nil {
		return x.IsHeaderNav
	}
	return ""
}

func (x *DeliveryChoose) GetIsDropdownList() string {
	if x != nil {
		return x.IsDropdownList
	}
	return ""
}

func (x *DeliveryChoose) GetIsExpressDelivery() string {
	if x != nil {
		return x.IsExpressDelivery
	}
	return ""
}

func (x *DeliveryChoose) GetIsTimelyDelivery() string {
	if x != nil {
		return x.IsTimelyDelivery
	}
	return ""
}

func (x *DeliveryChoose) GetIsPickupDelivery() string {
	if x != nil {
		return x.IsPickupDelivery
	}
	return ""
}

func (x *DeliveryChoose) GetCurrentLogisticsType() string {
	if x != nil {
		return x.CurrentLogisticsType
	}
	return ""
}

func (x *DeliveryChoose) GetCurrentLogisticsTypeName() string {
	if x != nil {
		return x.CurrentLogisticsTypeName
	}
	return ""
}

func (x *DeliveryChoose) GetIsError() string {
	if x != nil {
		return x.IsError
	}
	return ""
}

func (x *DeliveryChoose) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// 购买确认数据
type BuyConfirmData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base             *OrderBase        `protobuf:"bytes,1,opt,name=base,proto3" json:"base"`                                                    //结算信息(汇总)
	GroupList        []*BuyGroup       `protobuf:"bytes,2,rep,name=group_list,json=groupList,proto3" json:"group_list"`                         //分组商品列表
	PaymentList      []*PaymentInfo    `protobuf:"bytes,3,rep,name=payment_list,json=paymentList,proto3" json:"payment_list"`                   //支付方式列表
	RequestData      *BuyRequest       `protobuf:"bytes,4,opt,name=request_data,json=requestData,proto3" json:"request_data"`                   //提交信息反馈
	DefaultPaymentId int32             `protobuf:"varint,7,opt,name=default_payment_id,json=defaultPaymentId,proto3" json:"default_payment_id"` //默认支付ID
	CommonSiteType   string            `protobuf:"bytes,8,opt,name=common_site_type,json=commonSiteType,proto3" json:"common_site_type"`        //站点类型
	ExtensionData    []*OrderExtension `protobuf:"bytes,9,rep,name=extension_data,json=extensionData,proto3" json:"extension_data"`             //扩展数据
	// map<string,string> plugins_data =10;//插件数据
	DeliveryChoose        *DeliveryChoose        `protobuf:"bytes,11,opt,name=delivery_choose,json=deliveryChoose,proto3" json:"delivery_choose"`                        //配送选择数据
	IsOrderSubmit         string                 `protobuf:"bytes,12,opt,name=is_order_submit,json=isOrderSubmit,proto3" json:"is_order_submit"`                         //是否订单已提交 0否，1是
	IntegralDeductionData *IntegralDeductionData `protobuf:"bytes,13,opt,name=integral_deduction_data,json=integralDeductionData,proto3" json:"integral_deduction_data"` //积分抵现数据
	IntegralExchangeData  *IntegralExchangeData  `protobuf:"bytes,14,opt,name=integral_exchange_data,json=integralExchangeData,proto3" json:"integral_exchange_data"`    //积分兑换数据
}

func (x *BuyConfirmData) Reset() {
	*x = BuyConfirmData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyConfirmData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyConfirmData) ProtoMessage() {}

func (x *BuyConfirmData) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyConfirmData.ProtoReflect.Descriptor instead.
func (*BuyConfirmData) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{6}
}

func (x *BuyConfirmData) GetBase() *OrderBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *BuyConfirmData) GetGroupList() []*BuyGroup {
	if x != nil {
		return x.GroupList
	}
	return nil
}

func (x *BuyConfirmData) GetPaymentList() []*PaymentInfo {
	if x != nil {
		return x.PaymentList
	}
	return nil
}

func (x *BuyConfirmData) GetRequestData() *BuyRequest {
	if x != nil {
		return x.RequestData
	}
	return nil
}

func (x *BuyConfirmData) GetDefaultPaymentId() int32 {
	if x != nil {
		return x.DefaultPaymentId
	}
	return 0
}

func (x *BuyConfirmData) GetCommonSiteType() string {
	if x != nil {
		return x.CommonSiteType
	}
	return ""
}

func (x *BuyConfirmData) GetExtensionData() []*OrderExtension {
	if x != nil {
		return x.ExtensionData
	}
	return nil
}

func (x *BuyConfirmData) GetDeliveryChoose() *DeliveryChoose {
	if x != nil {
		return x.DeliveryChoose
	}
	return nil
}

func (x *BuyConfirmData) GetIsOrderSubmit() string {
	if x != nil {
		return x.IsOrderSubmit
	}
	return ""
}

func (x *BuyConfirmData) GetIntegralDeductionData() *IntegralDeductionData {
	if x != nil {
		return x.IntegralDeductionData
	}
	return nil
}

func (x *BuyConfirmData) GetIntegralExchangeData() *IntegralExchangeData {
	if x != nil {
		return x.IntegralExchangeData
	}
	return nil
}

// 积分抵现数据
type IntegralDeductionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIntegral      int64 `protobuf:"varint,1,opt,name=user_integral,json=userIntegral,proto3" json:"user_integral"`                  //用户积分
	UseIntegral       int64 `protobuf:"varint,2,opt,name=use_integral,json=useIntegral,proto3" json:"use_integral"`                     //使用积分
	DiscountPrice     int64 `protobuf:"varint,3,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price"`               //抵扣积分金额
	ActualUseIntegral int64 `protobuf:"varint,4,opt,name=actual_use_integral,json=actualUseIntegral,proto3" json:"actual_use_integral"` //实际使用积分
}

func (x *IntegralDeductionData) Reset() {
	*x = IntegralDeductionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegralDeductionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegralDeductionData) ProtoMessage() {}

func (x *IntegralDeductionData) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegralDeductionData.ProtoReflect.Descriptor instead.
func (*IntegralDeductionData) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{7}
}

func (x *IntegralDeductionData) GetUserIntegral() int64 {
	if x != nil {
		return x.UserIntegral
	}
	return 0
}

func (x *IntegralDeductionData) GetUseIntegral() int64 {
	if x != nil {
		return x.UseIntegral
	}
	return 0
}

func (x *IntegralDeductionData) GetDiscountPrice() int64 {
	if x != nil {
		return x.DiscountPrice
	}
	return 0
}

func (x *IntegralDeductionData) GetActualUseIntegral() int64 {
	if x != nil {
		return x.ActualUseIntegral
	}
	return 0
}

// 积分兑换数据
type IntegralExchangeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSupportGoodsExchange string `protobuf:"bytes,1,opt,name=is_support_goods_exchange,json=isSupportGoodsExchange,proto3" json:"is_support_goods_exchange"` //是否支持商品兑换（0否，1是）
	IsContainOnlyExchange  string `protobuf:"bytes,2,opt,name=is_contain_only_exchange,json=isContainOnlyExchange,proto3" json:"is_contain_only_exchange"`    //是否包含仅兑换商品
	UseIntegral            int64  `protobuf:"varint,3,opt,name=use_integral,json=useIntegral,proto3" json:"use_integral"`                                     //使用积分
	UseMoney               int64  `protobuf:"varint,4,opt,name=use_money,json=useMoney,proto3" json:"use_money"`                                              //使用金额
	UserIntegral           int64  `protobuf:"varint,5,opt,name=user_integral,json=userIntegral,proto3" json:"user_integral"`                                  //用户积分
}

func (x *IntegralExchangeData) Reset() {
	*x = IntegralExchangeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegralExchangeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegralExchangeData) ProtoMessage() {}

func (x *IntegralExchangeData) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegralExchangeData.ProtoReflect.Descriptor instead.
func (*IntegralExchangeData) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{8}
}

func (x *IntegralExchangeData) GetIsSupportGoodsExchange() string {
	if x != nil {
		return x.IsSupportGoodsExchange
	}
	return ""
}

func (x *IntegralExchangeData) GetIsContainOnlyExchange() string {
	if x != nil {
		return x.IsContainOnlyExchange
	}
	return ""
}

func (x *IntegralExchangeData) GetUseIntegral() int64 {
	if x != nil {
		return x.UseIntegral
	}
	return 0
}

func (x *IntegralExchangeData) GetUseMoney() int64 {
	if x != nil {
		return x.UseMoney
	}
	return 0
}

func (x *IntegralExchangeData) GetUserIntegral() int64 {
	if x != nil {
		return x.UserIntegral
	}
	return 0
}

// 购买提交数据
type BuySubmitData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderStatus string  `protobuf:"bytes,1,opt,name=order_status,json=orderStatus,proto3" json:"order_status"`
	OrderIds    []int64 `protobuf:"varint,2,rep,packed,name=order_ids,json=orderIds,proto3" json:"order_ids"`
	PaymentId   int32   `protobuf:"varint,3,opt,name=payment_id,json=paymentId,proto3" json:"payment_id"`
	JumpUrl     string  `protobuf:"bytes,4,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url"`
}

func (x *BuySubmitData) Reset() {
	*x = BuySubmitData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuySubmitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuySubmitData) ProtoMessage() {}

func (x *BuySubmitData) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuySubmitData.ProtoReflect.Descriptor instead.
func (*BuySubmitData) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{9}
}

func (x *BuySubmitData) GetOrderStatus() string {
	if x != nil {
		return x.OrderStatus
	}
	return ""
}

func (x *BuySubmitData) GetOrderIds() []int64 {
	if x != nil {
		return x.OrderIds
	}
	return nil
}

func (x *BuySubmitData) GetPaymentId() int32 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *BuySubmitData) GetJumpUrl() string {
	if x != nil {
		return x.JumpUrl
	}
	return ""
}

// 购买提交数据
type BuyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmData *BuyConfirmData `protobuf:"bytes,1,opt,name=confirm_data,json=confirmData,proto3" json:"confirm_data"`
	SubmitData  *BuySubmitData  `protobuf:"bytes,2,opt,name=submit_data,json=submitData,proto3" json:"submit_data"`
}

func (x *BuyResponse) Reset() {
	*x = BuyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyResponse) ProtoMessage() {}

func (x *BuyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyResponse.ProtoReflect.Descriptor instead.
func (*BuyResponse) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{10}
}

func (x *BuyResponse) GetConfirmData() *BuyConfirmData {
	if x != nil {
		return x.ConfirmData
	}
	return nil
}

func (x *BuyResponse) GetSubmitData() *BuySubmitData {
	if x != nil {
		return x.SubmitData
	}
	return nil
}

// 配送选择项
type DeliveryChooseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`    //选项名称
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`  //选项值
	Price int64  `protobuf:"varint,3,opt,name=price,proto3" json:"price"` //选项价格
}

func (x *DeliveryChooseItem) Reset() {
	*x = DeliveryChooseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buyService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryChooseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryChooseItem) ProtoMessage() {}

func (x *DeliveryChooseItem) ProtoReflect() protoreflect.Message {
	mi := &file_buyService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryChooseItem.ProtoReflect.Descriptor instead.
func (*DeliveryChooseItem) Descriptor() ([]byte, []int) {
	return file_buyService_proto_rawDescGZIP(), []int{5, 0}
}

func (x *DeliveryChooseItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeliveryChooseItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DeliveryChooseItem) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

var File_buyService_proto protoreflect.FileDescriptor

var file_buyService_proto_rawDesc = []byte{
	0x0a, 0x10, 0x62, 0x75, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x19, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5,
	0x04, 0x0a, 0x08, 0x42, 0x75, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c,
	0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6c, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42,
	0x75, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x6c, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x54, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb6, 0x07, 0x0a, 0x0c, 0x42, 0x75, 0x79, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x61, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64,
	0x35, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35,
	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x62, 0x75, 0x79, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x75, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65,
	0x63, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x79, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x53,
	0x70, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xd6, 0x05, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x70, 0x65, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x75, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x79, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x62, 0x75, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x12, 0x30,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x45, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x86, 0x06, 0x0a, 0x0a, 0x42, 0x75, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x62, 0x75, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x43, 0x61, 0x72, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x3b, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x62, 0x75, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0f,
	0x62, 0x75, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x62,
	0x75, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x1a, 0x42, 0x0a,
	0x14, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64, 0x35,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x61, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x70,
	0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x85, 0x05, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x62, 0x75,
	0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x76, 0x12, 0x49, 0x0a, 0x11, 0x62, 0x75,
	0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x2e,
	0x69, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x76, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x69, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x79,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69,
	0x73, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x46, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x92, 0x05, 0x0a, 0x0e, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x42, 0x75, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42,
	0x75, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x57, 0x0a, 0x17, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x44,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x6c, 0x22, 0xef, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x19, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x42, 0x75, 0x79, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c,
	0x22, 0x84, 0x01, 0x0a, 0x0b, 0x42, 0x75, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75,
	0x79, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x32, 0x82, 0x02, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x10, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42,
	0x75, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d,
	0x42, 0x75, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42,
	0x75, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b,
	0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_buyService_proto_rawDescOnce sync.Once
	file_buyService_proto_rawDescData = file_buyService_proto_rawDesc
)

func file_buyService_proto_rawDescGZIP() []byte {
	file_buyService_proto_rawDescOnce.Do(func() {
		file_buyService_proto_rawDescData = protoimpl.X.CompressGZIP(file_buyService_proto_rawDescData)
	})
	return file_buyService_proto_rawDescData
}

var file_buyService_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_buyService_proto_goTypes = []interface{}{
	(*BuyGroup)(nil),              // 0: services.BuyGroup
	(*BuyGoodsItem)(nil),          // 1: services.BuyGoodsItem
	(*OrderBase)(nil),             // 2: services.OrderBase
	(*BuyRequest)(nil),            // 3: services.BuyRequest
	(*BuyCommodity)(nil),          // 4: services.BuyCommodity
	(*DeliveryChoose)(nil),        // 5: services.DeliveryChoose
	(*BuyConfirmData)(nil),        // 6: services.BuyConfirmData
	(*IntegralDeductionData)(nil), // 7: services.IntegralDeductionData
	(*IntegralExchangeData)(nil),  // 8: services.IntegralExchangeData
	(*BuySubmitData)(nil),         // 9: services.BuySubmitData
	(*BuyResponse)(nil),           // 10: services.BuyResponse
	nil,                           // 11: services.BuyGoodsItem.ExtendsEntry
	nil,                           // 12: services.BuyRequest.ChoiceCouponIdsEntry
	(*DeliveryChooseItem)(nil),    // 13: services.DeliveryChoose.item
	(*SkuSpecInfo)(nil),           // 14: services.SkuSpecInfo
	(*OrderAddress)(nil),          // 15: services.OrderAddress
	(*OrderExtension)(nil),        // 16: services.OrderExtension
	(*PaymentInfo)(nil),           // 17: services.PaymentInfo
}
var file_buyService_proto_depIdxs = []int32{
	2,  // 0: services.BuyGroup.order_base:type_name -> services.OrderBase
	1,  // 1: services.BuyGroup.goods_items:type_name -> services.BuyGoodsItem
	7,  // 2: services.BuyGroup.integral_deduction_data:type_name -> services.IntegralDeductionData
	8,  // 3: services.BuyGroup.integral_exchange_data:type_name -> services.IntegralExchangeData
	11, // 4: services.BuyGoodsItem.extends:type_name -> services.BuyGoodsItem.ExtendsEntry
	14, // 5: services.BuyGoodsItem.spec:type_name -> services.SkuSpecInfo
	15, // 6: services.OrderBase.address:type_name -> services.OrderAddress
	15, // 7: services.OrderBase.extraction_address:type_name -> services.OrderAddress
	16, // 8: services.OrderBase.extension_data:type_name -> services.OrderExtension
	12, // 9: services.BuyRequest.choice_coupon_ids:type_name -> services.BuyRequest.ChoiceCouponIdsEntry
	4,  // 10: services.BuyRequest.buy_commodity:type_name -> services.BuyCommodity
	4,  // 11: services.BuyRequest.buy_commodities:type_name -> services.BuyCommodity
	14, // 12: services.BuyCommodity.spec:type_name -> services.SkuSpecInfo
	13, // 13: services.DeliveryChoose.buy_header_nav:type_name -> services.DeliveryChoose.item
	13, // 14: services.DeliveryChoose.buy_dropdown_list:type_name -> services.DeliveryChoose.item
	2,  // 15: services.BuyConfirmData.base:type_name -> services.OrderBase
	0,  // 16: services.BuyConfirmData.group_list:type_name -> services.BuyGroup
	17, // 17: services.BuyConfirmData.payment_list:type_name -> services.PaymentInfo
	3,  // 18: services.BuyConfirmData.request_data:type_name -> services.BuyRequest
	16, // 19: services.BuyConfirmData.extension_data:type_name -> services.OrderExtension
	5,  // 20: services.BuyConfirmData.delivery_choose:type_name -> services.DeliveryChoose
	7,  // 21: services.BuyConfirmData.integral_deduction_data:type_name -> services.IntegralDeductionData
	8,  // 22: services.BuyConfirmData.integral_exchange_data:type_name -> services.IntegralExchangeData
	6,  // 23: services.BuyResponse.confirm_data:type_name -> services.BuyConfirmData
	9,  // 24: services.BuyResponse.submit_data:type_name -> services.BuySubmitData
	3,  // 25: services.BuyService.Confirm:input_type -> services.BuyRequest
	3,  // 26: services.BuyService.Submit:input_type -> services.BuyRequest
	3,  // 27: services.BuyService.OrderSplitHandle:input_type -> services.BuyRequest
	3,  // 28: services.BuyService.BuyGoodsCheck:input_type -> services.BuyRequest
	10, // 29: services.BuyService.Confirm:output_type -> services.BuyResponse
	10, // 30: services.BuyService.Submit:output_type -> services.BuyResponse
	10, // 31: services.BuyService.OrderSplitHandle:output_type -> services.BuyResponse
	10, // 32: services.BuyService.BuyGoodsCheck:output_type -> services.BuyResponse
	29, // [29:33] is the sub-list for method output_type
	25, // [25:29] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_buyService_proto_init() }
func file_buyService_proto_init() {
	if File_buyService_proto != nil {
		return
	}
	file_orderAddressService_proto_init()
	file_baseInfoService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_buyService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buyService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyGoodsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buyService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buyService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buyService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyCommodity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buyService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryChoose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buyService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyConfirmData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buyService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegralDeductionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buyService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegralExchangeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buyService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuySubmitData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buyService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buyService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryChooseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_buyService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_buyService_proto_goTypes,
		DependencyIndexes: file_buyService_proto_depIdxs,
		MessageInfos:      file_buyService_proto_msgTypes,
	}.Build()
	File_buyService_proto = out.File
	file_buyService_proto_rawDesc = nil
	file_buyService_proto_goTypes = nil
	file_buyService_proto_depIdxs = nil
}
