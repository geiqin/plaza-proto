// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: synchroniseService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SynchroniseService service

func NewSynchroniseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SynchroniseService service

type SynchroniseService interface {
	//同步订单支付情况
	OrderPay(ctx context.Context, in *SynchroniseRequest, opts ...client.CallOption) (*SynchroniseResponse, error)
	//同步订单物流情况
	OrderShip(ctx context.Context, in *SynchroniseRequest, opts ...client.CallOption) (*SynchroniseResponse, error)
}

type synchroniseService struct {
	c    client.Client
	name string
}

func NewSynchroniseService(name string, c client.Client) SynchroniseService {
	return &synchroniseService{
		c:    c,
		name: name,
	}
}

func (c *synchroniseService) OrderPay(ctx context.Context, in *SynchroniseRequest, opts ...client.CallOption) (*SynchroniseResponse, error) {
	req := c.c.NewRequest(c.name, "SynchroniseService.OrderPay", in)
	out := new(SynchroniseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchroniseService) OrderShip(ctx context.Context, in *SynchroniseRequest, opts ...client.CallOption) (*SynchroniseResponse, error) {
	req := c.c.NewRequest(c.name, "SynchroniseService.OrderShip", in)
	out := new(SynchroniseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SynchroniseService service

type SynchroniseServiceHandler interface {
	//同步订单支付情况
	OrderPay(context.Context, *SynchroniseRequest, *SynchroniseResponse) error
	//同步订单物流情况
	OrderShip(context.Context, *SynchroniseRequest, *SynchroniseResponse) error
}

func RegisterSynchroniseServiceHandler(s server.Server, hdlr SynchroniseServiceHandler, opts ...server.HandlerOption) error {
	type synchroniseService interface {
		OrderPay(ctx context.Context, in *SynchroniseRequest, out *SynchroniseResponse) error
		OrderShip(ctx context.Context, in *SynchroniseRequest, out *SynchroniseResponse) error
	}
	type SynchroniseService struct {
		synchroniseService
	}
	h := &synchroniseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SynchroniseService{h}, opts...))
}

type synchroniseServiceHandler struct {
	SynchroniseServiceHandler
}

func (h *synchroniseServiceHandler) OrderPay(ctx context.Context, in *SynchroniseRequest, out *SynchroniseResponse) error {
	return h.SynchroniseServiceHandler.OrderPay(ctx, in, out)
}

func (h *synchroniseServiceHandler) OrderShip(ctx context.Context, in *SynchroniseRequest, out *SynchroniseResponse) error {
	return h.SynchroniseServiceHandler.OrderShip(ctx, in, out)
}
