// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: safeguardService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SafeguardService service

func NewSafeguardServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SafeguardService service

type SafeguardService interface {
	// 申请仅退款
	ApplyRefund(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 申请退货退款
	ApplyReturn(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 申请换货
	ApplyExchange(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 申请维修
	ApplyRepair(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 获取维权类型
	GetTypes(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	//审核维权通过
	CheckAgreed(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	//审核维权驳回
	CheckRefused(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	//商家已发货（针对换货商品的发货）
	MerchantShipped(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	//商家已收货（已收到回寄的商品）
	MerchantReceived(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	//买家已撤销维权
	BuyerCanceled(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	//买家已寄回商品
	BuyerSent(ctx context.Context, in *SafeguardReturn, opts ...client.CallOption) (*SafeguardResponse, error)
	//买家已签收（针对换货商品的签收）
	BuyerReceived(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	//立即打款
	DoRefund(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 获取维权信息（基本信息）
	Get(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	// 获取维权信息
	Display(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error)
	//查询维权信息
	Search(ctx context.Context, in *SafeguardRequest, opts ...client.CallOption) (*SafeguardResponse, error)
}

type safeguardService struct {
	c    client.Client
	name string
}

func NewSafeguardService(name string, c client.Client) SafeguardService {
	return &safeguardService{
		c:    c,
		name: name,
	}
}

func (c *safeguardService) ApplyRefund(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.ApplyRefund", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) ApplyReturn(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.ApplyReturn", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) ApplyExchange(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.ApplyExchange", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) ApplyRepair(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.ApplyRepair", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) GetTypes(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.GetTypes", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) CheckAgreed(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.CheckAgreed", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) CheckRefused(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.CheckRefused", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) MerchantShipped(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.MerchantShipped", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) MerchantReceived(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.MerchantReceived", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) BuyerCanceled(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.BuyerCanceled", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) BuyerSent(ctx context.Context, in *SafeguardReturn, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.BuyerSent", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) BuyerReceived(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.BuyerReceived", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) DoRefund(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.DoRefund", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) Get(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.Get", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) Display(ctx context.Context, in *Safeguard, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.Display", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *safeguardService) Search(ctx context.Context, in *SafeguardRequest, opts ...client.CallOption) (*SafeguardResponse, error) {
	req := c.c.NewRequest(c.name, "SafeguardService.Search", in)
	out := new(SafeguardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SafeguardService service

type SafeguardServiceHandler interface {
	// 申请仅退款
	ApplyRefund(context.Context, *Safeguard, *SafeguardResponse) error
	// 申请退货退款
	ApplyReturn(context.Context, *Safeguard, *SafeguardResponse) error
	// 申请换货
	ApplyExchange(context.Context, *Safeguard, *SafeguardResponse) error
	// 申请维修
	ApplyRepair(context.Context, *Safeguard, *SafeguardResponse) error
	// 获取维权类型
	GetTypes(context.Context, *Safeguard, *SafeguardResponse) error
	//审核维权通过
	CheckAgreed(context.Context, *Safeguard, *SafeguardResponse) error
	//审核维权驳回
	CheckRefused(context.Context, *Safeguard, *SafeguardResponse) error
	//商家已发货（针对换货商品的发货）
	MerchantShipped(context.Context, *Safeguard, *SafeguardResponse) error
	//商家已收货（已收到回寄的商品）
	MerchantReceived(context.Context, *Safeguard, *SafeguardResponse) error
	//买家已撤销维权
	BuyerCanceled(context.Context, *Safeguard, *SafeguardResponse) error
	//买家已寄回商品
	BuyerSent(context.Context, *SafeguardReturn, *SafeguardResponse) error
	//买家已签收（针对换货商品的签收）
	BuyerReceived(context.Context, *Safeguard, *SafeguardResponse) error
	//立即打款
	DoRefund(context.Context, *Safeguard, *SafeguardResponse) error
	// 获取维权信息（基本信息）
	Get(context.Context, *Safeguard, *SafeguardResponse) error
	// 获取维权信息
	Display(context.Context, *Safeguard, *SafeguardResponse) error
	//查询维权信息
	Search(context.Context, *SafeguardRequest, *SafeguardResponse) error
}

func RegisterSafeguardServiceHandler(s server.Server, hdlr SafeguardServiceHandler, opts ...server.HandlerOption) error {
	type safeguardService interface {
		ApplyRefund(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		ApplyReturn(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		ApplyExchange(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		ApplyRepair(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		GetTypes(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		CheckAgreed(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		CheckRefused(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		MerchantShipped(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		MerchantReceived(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		BuyerCanceled(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		BuyerSent(ctx context.Context, in *SafeguardReturn, out *SafeguardResponse) error
		BuyerReceived(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		DoRefund(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		Get(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		Display(ctx context.Context, in *Safeguard, out *SafeguardResponse) error
		Search(ctx context.Context, in *SafeguardRequest, out *SafeguardResponse) error
	}
	type SafeguardService struct {
		safeguardService
	}
	h := &safeguardServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SafeguardService{h}, opts...))
}

type safeguardServiceHandler struct {
	SafeguardServiceHandler
}

func (h *safeguardServiceHandler) ApplyRefund(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.ApplyRefund(ctx, in, out)
}

func (h *safeguardServiceHandler) ApplyReturn(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.ApplyReturn(ctx, in, out)
}

func (h *safeguardServiceHandler) ApplyExchange(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.ApplyExchange(ctx, in, out)
}

func (h *safeguardServiceHandler) ApplyRepair(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.ApplyRepair(ctx, in, out)
}

func (h *safeguardServiceHandler) GetTypes(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.GetTypes(ctx, in, out)
}

func (h *safeguardServiceHandler) CheckAgreed(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.CheckAgreed(ctx, in, out)
}

func (h *safeguardServiceHandler) CheckRefused(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.CheckRefused(ctx, in, out)
}

func (h *safeguardServiceHandler) MerchantShipped(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.MerchantShipped(ctx, in, out)
}

func (h *safeguardServiceHandler) MerchantReceived(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.MerchantReceived(ctx, in, out)
}

func (h *safeguardServiceHandler) BuyerCanceled(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.BuyerCanceled(ctx, in, out)
}

func (h *safeguardServiceHandler) BuyerSent(ctx context.Context, in *SafeguardReturn, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.BuyerSent(ctx, in, out)
}

func (h *safeguardServiceHandler) BuyerReceived(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.BuyerReceived(ctx, in, out)
}

func (h *safeguardServiceHandler) DoRefund(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.DoRefund(ctx, in, out)
}

func (h *safeguardServiceHandler) Get(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.Get(ctx, in, out)
}

func (h *safeguardServiceHandler) Display(ctx context.Context, in *Safeguard, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.Display(ctx, in, out)
}

func (h *safeguardServiceHandler) Search(ctx context.Context, in *SafeguardRequest, out *SafeguardResponse) error {
	return h.SafeguardServiceHandler.Search(ctx, in, out)
}
