// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orderShippingService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OrderShippingService service

func NewOrderShippingServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderShippingService service

type OrderShippingService interface {
	//订单发货【admin】
	Create(ctx context.Context, in *OrderShipping, opts ...client.CallOption) (*OrderShippingResponse, error)
	//订单收货【user】
	Collect(ctx context.Context, in *OrderShippingRequest, opts ...client.CallOption) (*OrderShippingResponse, error)
	//发货详细
	Detail(ctx context.Context, in *OrderShipping, opts ...client.CallOption) (*OrderShippingResponse, error)
	//发货查询
	Search(ctx context.Context, in *OrderShippingRequest, opts ...client.CallOption) (*OrderShippingResponse, error)
}

type orderShippingService struct {
	c    client.Client
	name string
}

func NewOrderShippingService(name string, c client.Client) OrderShippingService {
	return &orderShippingService{
		c:    c,
		name: name,
	}
}

func (c *orderShippingService) Create(ctx context.Context, in *OrderShipping, opts ...client.CallOption) (*OrderShippingResponse, error) {
	req := c.c.NewRequest(c.name, "OrderShippingService.Create", in)
	out := new(OrderShippingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderShippingService) Collect(ctx context.Context, in *OrderShippingRequest, opts ...client.CallOption) (*OrderShippingResponse, error) {
	req := c.c.NewRequest(c.name, "OrderShippingService.Collect", in)
	out := new(OrderShippingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderShippingService) Detail(ctx context.Context, in *OrderShipping, opts ...client.CallOption) (*OrderShippingResponse, error) {
	req := c.c.NewRequest(c.name, "OrderShippingService.Detail", in)
	out := new(OrderShippingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderShippingService) Search(ctx context.Context, in *OrderShippingRequest, opts ...client.CallOption) (*OrderShippingResponse, error) {
	req := c.c.NewRequest(c.name, "OrderShippingService.Search", in)
	out := new(OrderShippingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderShippingService service

type OrderShippingServiceHandler interface {
	//订单发货【admin】
	Create(context.Context, *OrderShipping, *OrderShippingResponse) error
	//订单收货【user】
	Collect(context.Context, *OrderShippingRequest, *OrderShippingResponse) error
	//发货详细
	Detail(context.Context, *OrderShipping, *OrderShippingResponse) error
	//发货查询
	Search(context.Context, *OrderShippingRequest, *OrderShippingResponse) error
}

func RegisterOrderShippingServiceHandler(s server.Server, hdlr OrderShippingServiceHandler, opts ...server.HandlerOption) error {
	type orderShippingService interface {
		Create(ctx context.Context, in *OrderShipping, out *OrderShippingResponse) error
		Collect(ctx context.Context, in *OrderShippingRequest, out *OrderShippingResponse) error
		Detail(ctx context.Context, in *OrderShipping, out *OrderShippingResponse) error
		Search(ctx context.Context, in *OrderShippingRequest, out *OrderShippingResponse) error
	}
	type OrderShippingService struct {
		orderShippingService
	}
	h := &orderShippingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderShippingService{h}, opts...))
}

type orderShippingServiceHandler struct {
	OrderShippingServiceHandler
}

func (h *orderShippingServiceHandler) Create(ctx context.Context, in *OrderShipping, out *OrderShippingResponse) error {
	return h.OrderShippingServiceHandler.Create(ctx, in, out)
}

func (h *orderShippingServiceHandler) Collect(ctx context.Context, in *OrderShippingRequest, out *OrderShippingResponse) error {
	return h.OrderShippingServiceHandler.Collect(ctx, in, out)
}

func (h *orderShippingServiceHandler) Detail(ctx context.Context, in *OrderShipping, out *OrderShippingResponse) error {
	return h.OrderShippingServiceHandler.Detail(ctx, in, out)
}

func (h *orderShippingServiceHandler) Search(ctx context.Context, in *OrderShippingRequest, out *OrderShippingResponse) error {
	return h.OrderShippingServiceHandler.Search(ctx, in, out)
}
