// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orderStatusLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OrderStatusLogService service

func NewOrderStatusLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderStatusLogService service

type OrderStatusLogService interface {
	//获取订单状态日志
	Get(ctx context.Context, in *OrderStatusLogRequest, opts ...client.CallOption) (*OrderStatusLogResponse, error)
	//查询订单状态日志
	Search(ctx context.Context, in *OrderStatusLogRequest, opts ...client.CallOption) (*OrderStatusLogResponse, error)
}

type orderStatusLogService struct {
	c    client.Client
	name string
}

func NewOrderStatusLogService(name string, c client.Client) OrderStatusLogService {
	return &orderStatusLogService{
		c:    c,
		name: name,
	}
}

func (c *orderStatusLogService) Get(ctx context.Context, in *OrderStatusLogRequest, opts ...client.CallOption) (*OrderStatusLogResponse, error) {
	req := c.c.NewRequest(c.name, "OrderStatusLogService.Get", in)
	out := new(OrderStatusLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStatusLogService) Search(ctx context.Context, in *OrderStatusLogRequest, opts ...client.CallOption) (*OrderStatusLogResponse, error) {
	req := c.c.NewRequest(c.name, "OrderStatusLogService.Search", in)
	out := new(OrderStatusLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderStatusLogService service

type OrderStatusLogServiceHandler interface {
	//获取订单状态日志
	Get(context.Context, *OrderStatusLogRequest, *OrderStatusLogResponse) error
	//查询订单状态日志
	Search(context.Context, *OrderStatusLogRequest, *OrderStatusLogResponse) error
}

func RegisterOrderStatusLogServiceHandler(s server.Server, hdlr OrderStatusLogServiceHandler, opts ...server.HandlerOption) error {
	type orderStatusLogService interface {
		Get(ctx context.Context, in *OrderStatusLogRequest, out *OrderStatusLogResponse) error
		Search(ctx context.Context, in *OrderStatusLogRequest, out *OrderStatusLogResponse) error
	}
	type OrderStatusLogService struct {
		orderStatusLogService
	}
	h := &orderStatusLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderStatusLogService{h}, opts...))
}

type orderStatusLogServiceHandler struct {
	OrderStatusLogServiceHandler
}

func (h *orderStatusLogServiceHandler) Get(ctx context.Context, in *OrderStatusLogRequest, out *OrderStatusLogResponse) error {
	return h.OrderStatusLogServiceHandler.Get(ctx, in, out)
}

func (h *orderStatusLogServiceHandler) Search(ctx context.Context, in *OrderStatusLogRequest, out *OrderStatusLogResponse) error {
	return h.OrderStatusLogServiceHandler.Search(ctx, in, out)
}
