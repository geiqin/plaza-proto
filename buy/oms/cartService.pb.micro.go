// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cartService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CartService service

func NewCartServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CartService service

type CartService interface {
	//购物车信息
	Index(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error)
	//加入购物车
	Add(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error)
	//删除购物车商品
	Remove(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error)
	//清除购物车
	Clear(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error)
	//更新购物车数量（根据cartId）
	Update(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error)
	//获得统计数量(服务调的多)
	Count(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error)
	//选中商品计算
	Checked(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error)
}

type cartService struct {
	c    client.Client
	name string
}

func NewCartService(name string, c client.Client) CartService {
	return &cartService{
		c:    c,
		name: name,
	}
}

func (c *cartService) Index(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.Index", in)
	out := new(CartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) Add(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.Add", in)
	out := new(CartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) Remove(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.Remove", in)
	out := new(CartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) Clear(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.Clear", in)
	out := new(CartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) Update(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.Update", in)
	out := new(CartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) Count(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.Count", in)
	out := new(CartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) Checked(ctx context.Context, in *CartRequest, opts ...client.CallOption) (*CartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.Checked", in)
	out := new(CartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CartService service

type CartServiceHandler interface {
	//购物车信息
	Index(context.Context, *CartRequest, *CartResponse) error
	//加入购物车
	Add(context.Context, *CartRequest, *CartResponse) error
	//删除购物车商品
	Remove(context.Context, *CartRequest, *CartResponse) error
	//清除购物车
	Clear(context.Context, *CartRequest, *CartResponse) error
	//更新购物车数量（根据cartId）
	Update(context.Context, *CartRequest, *CartResponse) error
	//获得统计数量(服务调的多)
	Count(context.Context, *CartRequest, *CartResponse) error
	//选中商品计算
	Checked(context.Context, *CartRequest, *CartResponse) error
}

func RegisterCartServiceHandler(s server.Server, hdlr CartServiceHandler, opts ...server.HandlerOption) error {
	type cartService interface {
		Index(ctx context.Context, in *CartRequest, out *CartResponse) error
		Add(ctx context.Context, in *CartRequest, out *CartResponse) error
		Remove(ctx context.Context, in *CartRequest, out *CartResponse) error
		Clear(ctx context.Context, in *CartRequest, out *CartResponse) error
		Update(ctx context.Context, in *CartRequest, out *CartResponse) error
		Count(ctx context.Context, in *CartRequest, out *CartResponse) error
		Checked(ctx context.Context, in *CartRequest, out *CartResponse) error
	}
	type CartService struct {
		cartService
	}
	h := &cartServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CartService{h}, opts...))
}

type cartServiceHandler struct {
	CartServiceHandler
}

func (h *cartServiceHandler) Index(ctx context.Context, in *CartRequest, out *CartResponse) error {
	return h.CartServiceHandler.Index(ctx, in, out)
}

func (h *cartServiceHandler) Add(ctx context.Context, in *CartRequest, out *CartResponse) error {
	return h.CartServiceHandler.Add(ctx, in, out)
}

func (h *cartServiceHandler) Remove(ctx context.Context, in *CartRequest, out *CartResponse) error {
	return h.CartServiceHandler.Remove(ctx, in, out)
}

func (h *cartServiceHandler) Clear(ctx context.Context, in *CartRequest, out *CartResponse) error {
	return h.CartServiceHandler.Clear(ctx, in, out)
}

func (h *cartServiceHandler) Update(ctx context.Context, in *CartRequest, out *CartResponse) error {
	return h.CartServiceHandler.Update(ctx, in, out)
}

func (h *cartServiceHandler) Count(ctx context.Context, in *CartRequest, out *CartResponse) error {
	return h.CartServiceHandler.Count(ctx, in, out)
}

func (h *cartServiceHandler) Checked(ctx context.Context, in *CartRequest, out *CartResponse) error {
	return h.CartServiceHandler.Checked(ctx, in, out)
}
