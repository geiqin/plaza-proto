// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orderRefundService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OrderRefundService service

func NewOrderRefundServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderRefundService service

type OrderRefundService interface {
	// 获取可以退货的订单商品列表
	Refundable(ctx context.Context, in *OrderRefundRequest, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 订单退款理由信息
	Reasons(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 订单申请退款
	Apply(ctx context.Context, in *OrderRefundApplyReq, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 用户取消退款申请
	Cancel(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 订单退款审核
	Verify(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error)
	//  拒绝退款
	RefuseRefund(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 商家同意退款，等待客户退货
	AgreeRefund(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 用户退货提交快递单号
	WriteExpress(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 商家同意用户退货
	AgreeExpress(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 退款订单备注
	Remark(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 退款订单详情
	Detail(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 删除退款订单
	Delete(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 订单售后查询
	Search(ctx context.Context, in *OrderRefundRequest, opts ...client.CallOption) (*OrderRefundResponse, error)
	// 订单售后列表
	List(ctx context.Context, in *OrderRefundRequest, opts ...client.CallOption) (*OrderRefundResponse, error)
}

type orderRefundService struct {
	c    client.Client
	name string
}

func NewOrderRefundService(name string, c client.Client) OrderRefundService {
	return &orderRefundService{
		c:    c,
		name: name,
	}
}

func (c *orderRefundService) Refundable(ctx context.Context, in *OrderRefundRequest, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.Refundable", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) Reasons(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.Reasons", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) Apply(ctx context.Context, in *OrderRefundApplyReq, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.Apply", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) Cancel(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.Cancel", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) Verify(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.Verify", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) RefuseRefund(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.RefuseRefund", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) AgreeRefund(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.AgreeRefund", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) WriteExpress(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.WriteExpress", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) AgreeExpress(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.AgreeExpress", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) Remark(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.Remark", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) Detail(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.Detail", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) Delete(ctx context.Context, in *OrderRefund, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.Delete", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) Search(ctx context.Context, in *OrderRefundRequest, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.Search", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderRefundService) List(ctx context.Context, in *OrderRefundRequest, opts ...client.CallOption) (*OrderRefundResponse, error) {
	req := c.c.NewRequest(c.name, "OrderRefundService.List", in)
	out := new(OrderRefundResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderRefundService service

type OrderRefundServiceHandler interface {
	// 获取可以退货的订单商品列表
	Refundable(context.Context, *OrderRefundRequest, *OrderRefundResponse) error
	// 订单退款理由信息
	Reasons(context.Context, *OrderRefund, *OrderRefundResponse) error
	// 订单申请退款
	Apply(context.Context, *OrderRefundApplyReq, *OrderRefundResponse) error
	// 用户取消退款申请
	Cancel(context.Context, *OrderRefund, *OrderRefundResponse) error
	// 订单退款审核
	Verify(context.Context, *OrderRefund, *OrderRefundResponse) error
	//  拒绝退款
	RefuseRefund(context.Context, *OrderRefund, *OrderRefundResponse) error
	// 商家同意退款，等待客户退货
	AgreeRefund(context.Context, *OrderRefund, *OrderRefundResponse) error
	// 用户退货提交快递单号
	WriteExpress(context.Context, *OrderRefund, *OrderRefundResponse) error
	// 商家同意用户退货
	AgreeExpress(context.Context, *OrderRefund, *OrderRefundResponse) error
	// 退款订单备注
	Remark(context.Context, *OrderRefund, *OrderRefundResponse) error
	// 退款订单详情
	Detail(context.Context, *OrderRefund, *OrderRefundResponse) error
	// 删除退款订单
	Delete(context.Context, *OrderRefund, *OrderRefundResponse) error
	// 订单售后查询
	Search(context.Context, *OrderRefundRequest, *OrderRefundResponse) error
	// 订单售后列表
	List(context.Context, *OrderRefundRequest, *OrderRefundResponse) error
}

func RegisterOrderRefundServiceHandler(s server.Server, hdlr OrderRefundServiceHandler, opts ...server.HandlerOption) error {
	type orderRefundService interface {
		Refundable(ctx context.Context, in *OrderRefundRequest, out *OrderRefundResponse) error
		Reasons(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error
		Apply(ctx context.Context, in *OrderRefundApplyReq, out *OrderRefundResponse) error
		Cancel(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error
		Verify(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error
		RefuseRefund(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error
		AgreeRefund(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error
		WriteExpress(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error
		AgreeExpress(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error
		Remark(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error
		Detail(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error
		Delete(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error
		Search(ctx context.Context, in *OrderRefundRequest, out *OrderRefundResponse) error
		List(ctx context.Context, in *OrderRefundRequest, out *OrderRefundResponse) error
	}
	type OrderRefundService struct {
		orderRefundService
	}
	h := &orderRefundServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderRefundService{h}, opts...))
}

type orderRefundServiceHandler struct {
	OrderRefundServiceHandler
}

func (h *orderRefundServiceHandler) Refundable(ctx context.Context, in *OrderRefundRequest, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.Refundable(ctx, in, out)
}

func (h *orderRefundServiceHandler) Reasons(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.Reasons(ctx, in, out)
}

func (h *orderRefundServiceHandler) Apply(ctx context.Context, in *OrderRefundApplyReq, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.Apply(ctx, in, out)
}

func (h *orderRefundServiceHandler) Cancel(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.Cancel(ctx, in, out)
}

func (h *orderRefundServiceHandler) Verify(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.Verify(ctx, in, out)
}

func (h *orderRefundServiceHandler) RefuseRefund(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.RefuseRefund(ctx, in, out)
}

func (h *orderRefundServiceHandler) AgreeRefund(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.AgreeRefund(ctx, in, out)
}

func (h *orderRefundServiceHandler) WriteExpress(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.WriteExpress(ctx, in, out)
}

func (h *orderRefundServiceHandler) AgreeExpress(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.AgreeExpress(ctx, in, out)
}

func (h *orderRefundServiceHandler) Remark(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.Remark(ctx, in, out)
}

func (h *orderRefundServiceHandler) Detail(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.Detail(ctx, in, out)
}

func (h *orderRefundServiceHandler) Delete(ctx context.Context, in *OrderRefund, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.Delete(ctx, in, out)
}

func (h *orderRefundServiceHandler) Search(ctx context.Context, in *OrderRefundRequest, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.Search(ctx, in, out)
}

func (h *orderRefundServiceHandler) List(ctx context.Context, in *OrderRefundRequest, out *OrderRefundResponse) error {
	return h.OrderRefundServiceHandler.List(ctx, in, out)
}
