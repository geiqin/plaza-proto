// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orderPayService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OrderPayService service

func NewOrderPayServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderPayService service

type OrderPayService interface {
	//收银台【user】
	Cashier(ctx context.Context, in *OrderPayRequest, opts ...client.CallOption) (*OrderPayResponse, error)
	//统一支付【user】
	Pay(ctx context.Context, in *OrderPayRequest, opts ...client.CallOption) (*OrderPayResponse, error)
	//线下支付确认【admin】
	OfflinePay(ctx context.Context, in *OfflinePayRequest, opts ...client.CallOption) (*OrderPayResponse, error)
}

type orderPayService struct {
	c    client.Client
	name string
}

func NewOrderPayService(name string, c client.Client) OrderPayService {
	return &orderPayService{
		c:    c,
		name: name,
	}
}

func (c *orderPayService) Cashier(ctx context.Context, in *OrderPayRequest, opts ...client.CallOption) (*OrderPayResponse, error) {
	req := c.c.NewRequest(c.name, "OrderPayService.Cashier", in)
	out := new(OrderPayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderPayService) Pay(ctx context.Context, in *OrderPayRequest, opts ...client.CallOption) (*OrderPayResponse, error) {
	req := c.c.NewRequest(c.name, "OrderPayService.Pay", in)
	out := new(OrderPayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderPayService) OfflinePay(ctx context.Context, in *OfflinePayRequest, opts ...client.CallOption) (*OrderPayResponse, error) {
	req := c.c.NewRequest(c.name, "OrderPayService.OfflinePay", in)
	out := new(OrderPayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderPayService service

type OrderPayServiceHandler interface {
	//收银台【user】
	Cashier(context.Context, *OrderPayRequest, *OrderPayResponse) error
	//统一支付【user】
	Pay(context.Context, *OrderPayRequest, *OrderPayResponse) error
	//线下支付确认【admin】
	OfflinePay(context.Context, *OfflinePayRequest, *OrderPayResponse) error
}

func RegisterOrderPayServiceHandler(s server.Server, hdlr OrderPayServiceHandler, opts ...server.HandlerOption) error {
	type orderPayService interface {
		Cashier(ctx context.Context, in *OrderPayRequest, out *OrderPayResponse) error
		Pay(ctx context.Context, in *OrderPayRequest, out *OrderPayResponse) error
		OfflinePay(ctx context.Context, in *OfflinePayRequest, out *OrderPayResponse) error
	}
	type OrderPayService struct {
		orderPayService
	}
	h := &orderPayServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderPayService{h}, opts...))
}

type orderPayServiceHandler struct {
	OrderPayServiceHandler
}

func (h *orderPayServiceHandler) Cashier(ctx context.Context, in *OrderPayRequest, out *OrderPayResponse) error {
	return h.OrderPayServiceHandler.Cashier(ctx, in, out)
}

func (h *orderPayServiceHandler) Pay(ctx context.Context, in *OrderPayRequest, out *OrderPayResponse) error {
	return h.OrderPayServiceHandler.Pay(ctx, in, out)
}

func (h *orderPayServiceHandler) OfflinePay(ctx context.Context, in *OfflinePayRequest, out *OrderPayResponse) error {
	return h.OrderPayServiceHandler.OfflinePay(ctx, in, out)
}
