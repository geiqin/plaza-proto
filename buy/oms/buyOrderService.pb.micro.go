// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: buyOrderService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BuyOrderService service

func NewBuyOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BuyOrderService service

type BuyOrderService interface {
	//下单确认
	Confirm(ctx context.Context, in *BuyOrderRequest, opts ...client.CallOption) (*BuyOrderResponse, error)
	//下单提交
	Submit(ctx context.Context, in *BuyOrderRequest, opts ...client.CallOption) (*BuyOrderResponse, error)
	//获取确认订单页面是否展示快递配送和到店自提
	CheckShipping(ctx context.Context, in *BuyOrderRequest, opts ...client.CallOption) (*BuyOrderResponse, error)
	//计算订单金额
	ComputedOrder(ctx context.Context, in *BuyOrderRequest, opts ...client.CallOption) (*BuyOrderResponse, error)
	//可选优惠劵列表
	AvailableCoupons(ctx context.Context, in *BuyOrderRequest, opts ...client.CallOption) (*BuyOrderResponse, error)
}

type buyOrderService struct {
	c    client.Client
	name string
}

func NewBuyOrderService(name string, c client.Client) BuyOrderService {
	return &buyOrderService{
		c:    c,
		name: name,
	}
}

func (c *buyOrderService) Confirm(ctx context.Context, in *BuyOrderRequest, opts ...client.CallOption) (*BuyOrderResponse, error) {
	req := c.c.NewRequest(c.name, "BuyOrderService.Confirm", in)
	out := new(BuyOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyOrderService) Submit(ctx context.Context, in *BuyOrderRequest, opts ...client.CallOption) (*BuyOrderResponse, error) {
	req := c.c.NewRequest(c.name, "BuyOrderService.Submit", in)
	out := new(BuyOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyOrderService) CheckShipping(ctx context.Context, in *BuyOrderRequest, opts ...client.CallOption) (*BuyOrderResponse, error) {
	req := c.c.NewRequest(c.name, "BuyOrderService.CheckShipping", in)
	out := new(BuyOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyOrderService) ComputedOrder(ctx context.Context, in *BuyOrderRequest, opts ...client.CallOption) (*BuyOrderResponse, error) {
	req := c.c.NewRequest(c.name, "BuyOrderService.ComputedOrder", in)
	out := new(BuyOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyOrderService) AvailableCoupons(ctx context.Context, in *BuyOrderRequest, opts ...client.CallOption) (*BuyOrderResponse, error) {
	req := c.c.NewRequest(c.name, "BuyOrderService.AvailableCoupons", in)
	out := new(BuyOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BuyOrderService service

type BuyOrderServiceHandler interface {
	//下单确认
	Confirm(context.Context, *BuyOrderRequest, *BuyOrderResponse) error
	//下单提交
	Submit(context.Context, *BuyOrderRequest, *BuyOrderResponse) error
	//获取确认订单页面是否展示快递配送和到店自提
	CheckShipping(context.Context, *BuyOrderRequest, *BuyOrderResponse) error
	//计算订单金额
	ComputedOrder(context.Context, *BuyOrderRequest, *BuyOrderResponse) error
	//可选优惠劵列表
	AvailableCoupons(context.Context, *BuyOrderRequest, *BuyOrderResponse) error
}

func RegisterBuyOrderServiceHandler(s server.Server, hdlr BuyOrderServiceHandler, opts ...server.HandlerOption) error {
	type buyOrderService interface {
		Confirm(ctx context.Context, in *BuyOrderRequest, out *BuyOrderResponse) error
		Submit(ctx context.Context, in *BuyOrderRequest, out *BuyOrderResponse) error
		CheckShipping(ctx context.Context, in *BuyOrderRequest, out *BuyOrderResponse) error
		ComputedOrder(ctx context.Context, in *BuyOrderRequest, out *BuyOrderResponse) error
		AvailableCoupons(ctx context.Context, in *BuyOrderRequest, out *BuyOrderResponse) error
	}
	type BuyOrderService struct {
		buyOrderService
	}
	h := &buyOrderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BuyOrderService{h}, opts...))
}

type buyOrderServiceHandler struct {
	BuyOrderServiceHandler
}

func (h *buyOrderServiceHandler) Confirm(ctx context.Context, in *BuyOrderRequest, out *BuyOrderResponse) error {
	return h.BuyOrderServiceHandler.Confirm(ctx, in, out)
}

func (h *buyOrderServiceHandler) Submit(ctx context.Context, in *BuyOrderRequest, out *BuyOrderResponse) error {
	return h.BuyOrderServiceHandler.Submit(ctx, in, out)
}

func (h *buyOrderServiceHandler) CheckShipping(ctx context.Context, in *BuyOrderRequest, out *BuyOrderResponse) error {
	return h.BuyOrderServiceHandler.CheckShipping(ctx, in, out)
}

func (h *buyOrderServiceHandler) ComputedOrder(ctx context.Context, in *BuyOrderRequest, out *BuyOrderResponse) error {
	return h.BuyOrderServiceHandler.ComputedOrder(ctx, in, out)
}

func (h *buyOrderServiceHandler) AvailableCoupons(ctx context.Context, in *BuyOrderRequest, out *BuyOrderResponse) error {
	return h.BuyOrderServiceHandler.AvailableCoupons(ctx, in, out)
}
