// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: complaintService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 售后维权
type Complaint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                               //ID
	Code           string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`                                            //维权编号
	MemberId       int64                  `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id"`                   //用户id
	OrderId        int64                  `protobuf:"varint,4,opt,name=order_id,json=orderId,proto3" json:"order_id"`                      //订单ID
	OrderNo        string                 `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3" json:"order_no"`                       //订单编号
	FirstSpuId     int64                  `protobuf:"varint,6,opt,name=first_spu_id,json=firstSpuId,proto3" json:"first_spu_id"`           //首个商品ID
	FirstSkuKey    string                 `protobuf:"bytes,7,opt,name=first_sku_key,json=firstSkuKey,proto3" json:"first_sku_key"`         //首个货品Key
	TotalNumber    int64                  `protobuf:"varint,8,opt,name=total_number,json=totalNumber,proto3" json:"total_number"`          //退货总数
	FinalAmount    int64                  `protobuf:"varint,9,opt,name=final_amount,json=finalAmount,proto3" json:"final_amount"`          //实收金额
	Type           string                 `protobuf:"bytes,10,opt,name=type,proto3" json:"type"`                                           //售后类型
	Reason         string                 `protobuf:"bytes,11,opt,name=reason,proto3" json:"reason"`                                       //维权原因
	Description    string                 `protobuf:"bytes,12,opt,name=description,proto3" json:"description"`                             //情况描述
	EvidenceImages string                 `protobuf:"bytes,13,opt,name=evidence_images,json=evidenceImages,proto3" json:"evidence_images"` //证据图片
	ReviewType     string                 `protobuf:"bytes,14,opt,name=review_type,json=reviewType,proto3" json:"review_type"`             //审核类型：0待审核，1审核通过，2审核拒绝
	ReviewComment  string                 `protobuf:"bytes,15,opt,name=review_comment,json=reviewComment,proto3" json:"review_comment"`    //审核意见
	ReviewerId     int64                  `protobuf:"varint,16,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id"`            //审核人员
	RefundType     string                 `protobuf:"bytes,17,opt,name=refund_type,json=refundType,proto3" json:"refund_type"`             //退款类型
	RefundTime     int64                  `protobuf:"varint,18,opt,name=refund_time,json=refundTime,proto3" json:"refund_time"`            //退款时间
	CancelTime     int64                  `protobuf:"varint,19,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time"`            //取消时间
	Status         string                 `protobuf:"bytes,20,opt,name=status,proto3" json:"status"`                                       //售后状态
	CreatedAt      int64                  `protobuf:"varint,21,opt,name=created_at,json=createdAt,proto3" json:"created_at"`               //创建时间
	UpdatedAt      int64                  `protobuf:"varint,22,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`               //修改时间
	Solution       *ComplaintSolution     `protobuf:"bytes,25,opt,name=solution,proto3" json:"solution"`
	ProgressList   []*ComplaintProgress   `protobuf:"bytes,26,rep,name=progress_list,json=progressList,proto3" json:"progress_list"`
	Details        []*ComplaintDetail     `protobuf:"bytes,27,rep,name=details,proto3" json:"details"`
	Product        *ProductInfo           `protobuf:"bytes,28,opt,name=product,proto3" json:"product"`
	Order          *Order                 `protobuf:"bytes,29,opt,name=order,proto3" json:"order"`
	Member         *MemberInfo            `protobuf:"bytes,30,opt,name=member,proto3" json:"member"`
	TypeName       string                 `protobuf:"bytes,31,opt,name=type_name,json=typeName,proto3" json:"type_name"`                   //售后类型名称
	StatusName     string                 `protobuf:"bytes,32,opt,name=status_name,json=statusName,proto3" json:"status_name"`             //售后状态名称
	OrderDetailId  int64                  `protobuf:"varint,33,opt,name=order_detail_id,json=orderDetailId,proto3" json:"order_detail_id"` //订单明细ID [创建用]
	AdminCommand   *ComplaintAdminCommand `protobuf:"bytes,34,opt,name=admin_command,json=adminCommand,proto3" json:"admin_command"`
	UserCommand    *ComplaintUserCommand  `protobuf:"bytes,35,opt,name=user_command,json=userCommand,proto3" json:"user_command"`
}

func (x *Complaint) Reset() {
	*x = Complaint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complaintService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Complaint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Complaint) ProtoMessage() {}

func (x *Complaint) ProtoReflect() protoreflect.Message {
	mi := &file_complaintService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Complaint.ProtoReflect.Descriptor instead.
func (*Complaint) Descriptor() ([]byte, []int) {
	return file_complaintService_proto_rawDescGZIP(), []int{0}
}

func (x *Complaint) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Complaint) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Complaint) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *Complaint) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *Complaint) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *Complaint) GetFirstSpuId() int64 {
	if x != nil {
		return x.FirstSpuId
	}
	return 0
}

func (x *Complaint) GetFirstSkuKey() string {
	if x != nil {
		return x.FirstSkuKey
	}
	return ""
}

func (x *Complaint) GetTotalNumber() int64 {
	if x != nil {
		return x.TotalNumber
	}
	return 0
}

func (x *Complaint) GetFinalAmount() int64 {
	if x != nil {
		return x.FinalAmount
	}
	return 0
}

func (x *Complaint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Complaint) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Complaint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Complaint) GetEvidenceImages() string {
	if x != nil {
		return x.EvidenceImages
	}
	return ""
}

func (x *Complaint) GetReviewType() string {
	if x != nil {
		return x.ReviewType
	}
	return ""
}

func (x *Complaint) GetReviewComment() string {
	if x != nil {
		return x.ReviewComment
	}
	return ""
}

func (x *Complaint) GetReviewerId() int64 {
	if x != nil {
		return x.ReviewerId
	}
	return 0
}

func (x *Complaint) GetRefundType() string {
	if x != nil {
		return x.RefundType
	}
	return ""
}

func (x *Complaint) GetRefundTime() int64 {
	if x != nil {
		return x.RefundTime
	}
	return 0
}

func (x *Complaint) GetCancelTime() int64 {
	if x != nil {
		return x.CancelTime
	}
	return 0
}

func (x *Complaint) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Complaint) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Complaint) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Complaint) GetSolution() *ComplaintSolution {
	if x != nil {
		return x.Solution
	}
	return nil
}

func (x *Complaint) GetProgressList() []*ComplaintProgress {
	if x != nil {
		return x.ProgressList
	}
	return nil
}

func (x *Complaint) GetDetails() []*ComplaintDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Complaint) GetProduct() *ProductInfo {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Complaint) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *Complaint) GetMember() *MemberInfo {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Complaint) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *Complaint) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *Complaint) GetOrderDetailId() int64 {
	if x != nil {
		return x.OrderDetailId
	}
	return 0
}

func (x *Complaint) GetAdminCommand() *ComplaintAdminCommand {
	if x != nil {
		return x.AdminCommand
	}
	return nil
}

func (x *Complaint) GetUserCommand() *ComplaintUserCommand {
	if x != nil {
		return x.UserCommand
	}
	return nil
}

type ComplaintDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                              //ID
	ComplaintId   int64          `protobuf:"varint,2,opt,name=complaint_id,json=complaintId,proto3" json:"complaint_id"`         //售后维权单ID
	OrderDetailId int64          `protobuf:"varint,3,opt,name=order_detail_id,json=orderDetailId,proto3" json:"order_detail_id"` //订单明细ID
	SpuId         int64          `protobuf:"varint,4,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                           //商品ID
	SkuKey        string         `protobuf:"bytes,5,opt,name=sku_key,json=skuKey,proto3" json:"sku_key"`                         //SKUKey
	Name          string         `protobuf:"bytes,6,opt,name=name,proto3" json:"name"`                                           //商品名称
	ImageUrl      string         `protobuf:"bytes,7,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                   //图片路径
	UnitName      string         `protobuf:"bytes,8,opt,name=unit_name,json=unitName,proto3" json:"unit_name"`                   //计量单位名称
	Quantity      int64          `protobuf:"varint,9,opt,name=quantity,proto3" json:"quantity"`                                  //购买数量
	FinalAmount   int64          `protobuf:"varint,10,opt,name=final_amount,json=finalAmount,proto3" json:"final_amount"`        //实付价格
	RefundAmount  int64          `protobuf:"varint,11,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount"`     //退款金额
	Spec          []*SkuSpecInfo `protobuf:"bytes,12,rep,name=spec,proto3" json:"spec"`                                          //规格
	SpecDesc      string         `protobuf:"bytes,13,opt,name=spec_desc,json=specDesc,proto3" json:"spec_desc"`                  //规格描述
	ExtraMainId   string         `protobuf:"bytes,14,opt,name=extra_main_id,json=extraMainId,proto3" json:"extra_main_id"`       //扩展业务主要ID
	ExtraDetailId string         `protobuf:"bytes,15,opt,name=extra_detail_id,json=extraDetailId,proto3" json:"extra_detail_id"` //扩展业务明细ID
	CreatedAt     string         `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at"`               //创建时间
	UpdatedAt     string         `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`               //修改时间
	OrderDetail   *OrderDetail   `protobuf:"bytes,18,opt,name=order_detail,json=orderDetail,proto3" json:"order_detail"`
}

func (x *ComplaintDetail) Reset() {
	*x = ComplaintDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complaintService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintDetail) ProtoMessage() {}

func (x *ComplaintDetail) ProtoReflect() protoreflect.Message {
	mi := &file_complaintService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintDetail.ProtoReflect.Descriptor instead.
func (*ComplaintDetail) Descriptor() ([]byte, []int) {
	return file_complaintService_proto_rawDescGZIP(), []int{1}
}

func (x *ComplaintDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ComplaintDetail) GetComplaintId() int64 {
	if x != nil {
		return x.ComplaintId
	}
	return 0
}

func (x *ComplaintDetail) GetOrderDetailId() int64 {
	if x != nil {
		return x.OrderDetailId
	}
	return 0
}

func (x *ComplaintDetail) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *ComplaintDetail) GetSkuKey() string {
	if x != nil {
		return x.SkuKey
	}
	return ""
}

func (x *ComplaintDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplaintDetail) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ComplaintDetail) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *ComplaintDetail) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ComplaintDetail) GetFinalAmount() int64 {
	if x != nil {
		return x.FinalAmount
	}
	return 0
}

func (x *ComplaintDetail) GetRefundAmount() int64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *ComplaintDetail) GetSpec() []*SkuSpecInfo {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ComplaintDetail) GetSpecDesc() string {
	if x != nil {
		return x.SpecDesc
	}
	return ""
}

func (x *ComplaintDetail) GetExtraMainId() string {
	if x != nil {
		return x.ExtraMainId
	}
	return ""
}

func (x *ComplaintDetail) GetExtraDetailId() string {
	if x != nil {
		return x.ExtraDetailId
	}
	return ""
}

func (x *ComplaintDetail) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ComplaintDetail) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ComplaintDetail) GetOrderDetail() *OrderDetail {
	if x != nil {
		return x.OrderDetail
	}
	return nil
}

// 售后处理方案
type ComplaintSolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                             //ID
	ComplaintId        int64          `protobuf:"varint,2,opt,name=complaint_id,json=complaintId,proto3" json:"complaint_id"`                        //维权申请id
	SolutionType       string         `protobuf:"bytes,3,opt,name=solution_type,json=solutionType,proto3" json:"solution_type"`                      //解决方案类型：1全额退款, 2部分退款,3补发商品，4优惠券补偿
	RefundAmount       int64          `protobuf:"varint,4,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount"`                     //退款金额
	CompensateSpuId    int64          `protobuf:"varint,5,opt,name=compensate_spu_id,json=compensateSpuId,proto3" json:"compensate_spu_id"`          //补偿商品SpuID
	CompensateSkuKey   string         `protobuf:"bytes,6,opt,name=compensate_sku_key,json=compensateSkuKey,proto3" json:"compensate_sku_key"`        //补偿商品SKUKey
	CompensateCouponId int64          `protobuf:"varint,7,opt,name=compensate_coupon_id,json=compensateCouponId,proto3" json:"compensate_coupon_id"` //补偿优惠劵ID
	CompensateNumber   int64          `protobuf:"varint,8,opt,name=compensate_number,json=compensateNumber,proto3" json:"compensate_number"`         //补偿数量
	ReturnAddressId    int64          `protobuf:"varint,9,opt,name=return_address_id,json=returnAddressId,proto3" json:"return_address_id"`          //退货地址ID
	ExchangeOrderId    int64          `protobuf:"varint,10,opt,name=exchange_order_id,json=exchangeOrderId,proto3" json:"exchange_order_id"`         //换货新订单ID
	ExchangeOrderNo    string         `protobuf:"bytes,11,opt,name=exchange_order_no,json=exchangeOrderNo,proto3" json:"exchange_order_no"`          //换货新订单号
	ExecutorId         int64          `protobuf:"varint,12,opt,name=executor_id,json=executorId,proto3" json:"executor_id"`                          //负责执行人
	CreatedAt          string         `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at"`                              //创建时间
	UpdatedAt          string         `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`                              //修改时间
	ReturnAddress      *ReturnAddress `protobuf:"bytes,15,opt,name=return_address,json=returnAddress,proto3" json:"return_address"`
}

func (x *ComplaintSolution) Reset() {
	*x = ComplaintSolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complaintService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintSolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintSolution) ProtoMessage() {}

func (x *ComplaintSolution) ProtoReflect() protoreflect.Message {
	mi := &file_complaintService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintSolution.ProtoReflect.Descriptor instead.
func (*ComplaintSolution) Descriptor() ([]byte, []int) {
	return file_complaintService_proto_rawDescGZIP(), []int{2}
}

func (x *ComplaintSolution) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ComplaintSolution) GetComplaintId() int64 {
	if x != nil {
		return x.ComplaintId
	}
	return 0
}

func (x *ComplaintSolution) GetSolutionType() string {
	if x != nil {
		return x.SolutionType
	}
	return ""
}

func (x *ComplaintSolution) GetRefundAmount() int64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *ComplaintSolution) GetCompensateSpuId() int64 {
	if x != nil {
		return x.CompensateSpuId
	}
	return 0
}

func (x *ComplaintSolution) GetCompensateSkuKey() string {
	if x != nil {
		return x.CompensateSkuKey
	}
	return ""
}

func (x *ComplaintSolution) GetCompensateCouponId() int64 {
	if x != nil {
		return x.CompensateCouponId
	}
	return 0
}

func (x *ComplaintSolution) GetCompensateNumber() int64 {
	if x != nil {
		return x.CompensateNumber
	}
	return 0
}

func (x *ComplaintSolution) GetReturnAddressId() int64 {
	if x != nil {
		return x.ReturnAddressId
	}
	return 0
}

func (x *ComplaintSolution) GetExchangeOrderId() int64 {
	if x != nil {
		return x.ExchangeOrderId
	}
	return 0
}

func (x *ComplaintSolution) GetExchangeOrderNo() string {
	if x != nil {
		return x.ExchangeOrderNo
	}
	return ""
}

func (x *ComplaintSolution) GetExecutorId() int64 {
	if x != nil {
		return x.ExecutorId
	}
	return 0
}

func (x *ComplaintSolution) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ComplaintSolution) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ComplaintSolution) GetReturnAddress() *ReturnAddress {
	if x != nil {
		return x.ReturnAddress
	}
	return nil
}

// 管理员命令
type ComplaintAdminCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasConfirmReview   bool `protobuf:"varint,1,opt,name=has_confirm_review,json=hasConfirmReview,proto3" json:"has_confirm_review"`       //确认审核
	HasConfirmCollect  bool `protobuf:"varint,2,opt,name=has_confirm_collect,json=hasConfirmCollect,proto3" json:"has_confirm_collect"`    //确认收货
	HasConfirmRefund   bool `protobuf:"varint,3,opt,name=has_confirm_refund,json=hasConfirmRefund,proto3" json:"has_confirm_refund"`       // 确认退款
	HasComplaintDelete bool `protobuf:"varint,4,opt,name=has_complaint_delete,json=hasComplaintDelete,proto3" json:"has_complaint_delete"` // 删除订单
}

func (x *ComplaintAdminCommand) Reset() {
	*x = ComplaintAdminCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complaintService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintAdminCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintAdminCommand) ProtoMessage() {}

func (x *ComplaintAdminCommand) ProtoReflect() protoreflect.Message {
	mi := &file_complaintService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintAdminCommand.ProtoReflect.Descriptor instead.
func (*ComplaintAdminCommand) Descriptor() ([]byte, []int) {
	return file_complaintService_proto_rawDescGZIP(), []int{3}
}

func (x *ComplaintAdminCommand) GetHasConfirmReview() bool {
	if x != nil {
		return x.HasConfirmReview
	}
	return false
}

func (x *ComplaintAdminCommand) GetHasConfirmCollect() bool {
	if x != nil {
		return x.HasConfirmCollect
	}
	return false
}

func (x *ComplaintAdminCommand) GetHasConfirmRefund() bool {
	if x != nil {
		return x.HasConfirmRefund
	}
	return false
}

func (x *ComplaintAdminCommand) GetHasComplaintDelete() bool {
	if x != nil {
		return x.HasComplaintDelete
	}
	return false
}

// 用户命令
type ComplaintUserCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasReturnGoods     bool `protobuf:"varint,1,opt,name=has_return_goods,json=hasReturnGoods,proto3" json:"has_return_goods"`             //买家退货
	HasComplaintCancel bool `protobuf:"varint,2,opt,name=has_complaint_cancel,json=hasComplaintCancel,proto3" json:"has_complaint_cancel"` // 取消订单
	HasComplaintDelete bool `protobuf:"varint,3,opt,name=has_complaint_delete,json=hasComplaintDelete,proto3" json:"has_complaint_delete"` // 删除订单
}

func (x *ComplaintUserCommand) Reset() {
	*x = ComplaintUserCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complaintService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintUserCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintUserCommand) ProtoMessage() {}

func (x *ComplaintUserCommand) ProtoReflect() protoreflect.Message {
	mi := &file_complaintService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintUserCommand.ProtoReflect.Descriptor instead.
func (*ComplaintUserCommand) Descriptor() ([]byte, []int) {
	return file_complaintService_proto_rawDescGZIP(), []int{4}
}

func (x *ComplaintUserCommand) GetHasReturnGoods() bool {
	if x != nil {
		return x.HasReturnGoods
	}
	return false
}

func (x *ComplaintUserCommand) GetHasComplaintCancel() bool {
	if x != nil {
		return x.HasComplaintCancel
	}
	return false
}

func (x *ComplaintUserCommand) GetHasComplaintDelete() bool {
	if x != nil {
		return x.HasComplaintDelete
	}
	return false
}

// 售后维权审核请求
type ComplaintReviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComplaintId        int64  `protobuf:"varint,1,opt,name=complaint_id,json=complaintId,proto3" json:"complaint_id"`                         //维权申请id
	ReviewType         string `protobuf:"bytes,2,opt,name=review_type,json=reviewType,proto3" json:"review_type"`                             //审核类型：1通过, 2拒绝
	ReviewerId         int64  `protobuf:"varint,3,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id"`                            //审核人员
	ReviewComment      string `protobuf:"bytes,4,opt,name=review_comment,json=reviewComment,proto3" json:"review_comment"`                    //审核意见
	RefundType         string `protobuf:"bytes,5,opt,name=refund_type,json=refundType,proto3" json:"refund_type"`                             //退款类型
	SolutionType       string `protobuf:"bytes,6,opt,name=solution_type,json=solutionType,proto3" json:"solution_type"`                       //解决方案类型：1全额退款, 2部分退款,3补发商品，4优惠券补偿
	RefundAmount       int64  `protobuf:"varint,7,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount"`                      //退款金额
	CompensateSpuId    int64  `protobuf:"varint,8,opt,name=compensate_spu_id,json=compensateSpuId,proto3" json:"compensate_spu_id"`           //补偿商品SpuID
	CompensateSkuKey   string `protobuf:"bytes,9,opt,name=compensate_sku_key,json=compensateSkuKey,proto3" json:"compensate_sku_key"`         //补偿商品SKUKey
	CompensateCouponId int64  `protobuf:"varint,10,opt,name=compensate_coupon_id,json=compensateCouponId,proto3" json:"compensate_coupon_id"` //补偿优惠劵ID
	CompensateNumber   int64  `protobuf:"varint,11,opt,name=compensate_number,json=compensateNumber,proto3" json:"compensate_number"`         //补偿数量
	ReturnAddressId    int64  `protobuf:"varint,12,opt,name=return_address_id,json=returnAddressId,proto3" json:"return_address_id"`          //退货地址ID
}

func (x *ComplaintReviewRequest) Reset() {
	*x = ComplaintReviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complaintService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintReviewRequest) ProtoMessage() {}

func (x *ComplaintReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_complaintService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintReviewRequest.ProtoReflect.Descriptor instead.
func (*ComplaintReviewRequest) Descriptor() ([]byte, []int) {
	return file_complaintService_proto_rawDescGZIP(), []int{5}
}

func (x *ComplaintReviewRequest) GetComplaintId() int64 {
	if x != nil {
		return x.ComplaintId
	}
	return 0
}

func (x *ComplaintReviewRequest) GetReviewType() string {
	if x != nil {
		return x.ReviewType
	}
	return ""
}

func (x *ComplaintReviewRequest) GetReviewerId() int64 {
	if x != nil {
		return x.ReviewerId
	}
	return 0
}

func (x *ComplaintReviewRequest) GetReviewComment() string {
	if x != nil {
		return x.ReviewComment
	}
	return ""
}

func (x *ComplaintReviewRequest) GetRefundType() string {
	if x != nil {
		return x.RefundType
	}
	return ""
}

func (x *ComplaintReviewRequest) GetSolutionType() string {
	if x != nil {
		return x.SolutionType
	}
	return ""
}

func (x *ComplaintReviewRequest) GetRefundAmount() int64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *ComplaintReviewRequest) GetCompensateSpuId() int64 {
	if x != nil {
		return x.CompensateSpuId
	}
	return 0
}

func (x *ComplaintReviewRequest) GetCompensateSkuKey() string {
	if x != nil {
		return x.CompensateSkuKey
	}
	return ""
}

func (x *ComplaintReviewRequest) GetCompensateCouponId() int64 {
	if x != nil {
		return x.CompensateCouponId
	}
	return 0
}

func (x *ComplaintReviewRequest) GetCompensateNumber() int64 {
	if x != nil {
		return x.CompensateNumber
	}
	return 0
}

func (x *ComplaintReviewRequest) GetReturnAddressId() int64 {
	if x != nil {
		return x.ReturnAddressId
	}
	return 0
}

// 售后维权请求参数
type ComplaintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top       int32    `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64    `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sort      []string `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort"`
	DateRange []string `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int64  `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	//以下为自定义参数
	Code          string `protobuf:"bytes,11,opt,name=code,proto3" json:"code"`                                           //维权编号
	MemberId      int64  `protobuf:"varint,12,opt,name=member_id,json=memberId,proto3" json:"member_id"`                  //用户id
	OrderId       int64  `protobuf:"varint,13,opt,name=order_id,json=orderId,proto3" json:"order_id"`                     //订单ID
	OrderDetailId int64  `protobuf:"varint,14,opt,name=order_detail_id,json=orderDetailId,proto3" json:"order_detail_id"` //订单详情id
	SpuId         int64  `protobuf:"varint,15,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                           //商品ID
	Type          string `protobuf:"bytes,16,opt,name=type,proto3" json:"type"`                                           //售后类型
	ReviewerId    int64  `protobuf:"varint,17,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id"`            //审核人员
	RefundType    string `protobuf:"bytes,18,opt,name=refund_type,json=refundType,proto3" json:"refund_type"`             //退款类型
	ReviewType    string `protobuf:"bytes,19,opt,name=review_type,json=reviewType,proto3" json:"review_type"`             //审核类型：0待审核 1通过, 2拒绝
	Status        string `protobuf:"bytes,20,opt,name=status,proto3" json:"status"`                                       //售后状态
}

func (x *ComplaintRequest) Reset() {
	*x = ComplaintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complaintService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintRequest) ProtoMessage() {}

func (x *ComplaintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_complaintService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintRequest.ProtoReflect.Descriptor instead.
func (*ComplaintRequest) Descriptor() ([]byte, []int) {
	return file_complaintService_proto_rawDescGZIP(), []int{6}
}

func (x *ComplaintRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *ComplaintRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *ComplaintRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ComplaintRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ComplaintRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ComplaintRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *ComplaintRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ComplaintRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ComplaintRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ComplaintRequest) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *ComplaintRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ComplaintRequest) GetOrderDetailId() int64 {
	if x != nil {
		return x.OrderDetailId
	}
	return 0
}

func (x *ComplaintRequest) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *ComplaintRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ComplaintRequest) GetReviewerId() int64 {
	if x != nil {
		return x.ReviewerId
	}
	return 0
}

func (x *ComplaintRequest) GetRefundType() string {
	if x != nil {
		return x.RefundType
	}
	return ""
}

func (x *ComplaintRequest) GetReviewType() string {
	if x != nil {
		return x.ReviewType
	}
	return ""
}

func (x *ComplaintRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 售后维权响应数据
type ComplaintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg        string               `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg"`
	Pager      *common.Pager        `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Entity     *Complaint           `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity"`
	Items      []*Complaint         `protobuf:"bytes,4,rep,name=items,proto3" json:"items"`
	ApplyIndex *ComplaintApplyIndex `protobuf:"bytes,5,opt,name=apply_index,json=applyIndex,proto3" json:"apply_index"`
}

func (x *ComplaintResponse) Reset() {
	*x = ComplaintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complaintService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintResponse) ProtoMessage() {}

func (x *ComplaintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_complaintService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintResponse.ProtoReflect.Descriptor instead.
func (*ComplaintResponse) Descriptor() ([]byte, []int) {
	return file_complaintService_proto_rawDescGZIP(), []int{7}
}

func (x *ComplaintResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ComplaintResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *ComplaintResponse) GetEntity() *Complaint {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ComplaintResponse) GetItems() []*Complaint {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ComplaintResponse) GetApplyIndex() *ComplaintApplyIndex {
	if x != nil {
		return x.ApplyIndex
	}
	return nil
}

type ComplaintRefundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnQuantity int64 `protobuf:"varint,1,opt,name=return_quantity,json=returnQuantity,proto3" json:"return_quantity"` //可退回数量
	RefundPrice    int64 `protobuf:"varint,2,opt,name=refund_price,json=refundPrice,proto3" json:"refund_price"`          //可退款金额
}

func (x *ComplaintRefundInfo) Reset() {
	*x = ComplaintRefundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complaintService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintRefundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintRefundInfo) ProtoMessage() {}

func (x *ComplaintRefundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_complaintService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintRefundInfo.ProtoReflect.Descriptor instead.
func (*ComplaintRefundInfo) Descriptor() ([]byte, []int) {
	return file_complaintService_proto_rawDescGZIP(), []int{8}
}

func (x *ComplaintRefundInfo) GetReturnQuantity() int64 {
	if x != nil {
		return x.ReturnQuantity
	}
	return 0
}

func (x *ComplaintRefundInfo) GetRefundPrice() int64 {
	if x != nil {
		return x.RefundPrice
	}
	return 0
}

type ComplaintTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32  `protobuf:"varint,1,opt,name=value,proto3" json:"value"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Desc  string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc"`
	Icon  string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon"`
	Class string `protobuf:"bytes,5,opt,name=class,proto3" json:"class"`
}

func (x *ComplaintTypeInfo) Reset() {
	*x = ComplaintTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complaintService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintTypeInfo) ProtoMessage() {}

func (x *ComplaintTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_complaintService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintTypeInfo.ProtoReflect.Descriptor instead.
func (*ComplaintTypeInfo) Descriptor() ([]byte, []int) {
	return file_complaintService_proto_rawDescGZIP(), []int{9}
}

func (x *ComplaintTypeInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ComplaintTypeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComplaintTypeInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ComplaintTypeInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ComplaintTypeInfo) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

type ComplaintApplyIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgressIndex          int32                `protobuf:"varint,1,opt,name=progress_index,json=progressIndex,proto3" json:"progress_index"`                               //进度位置
	OrderInfo              *Order               `protobuf:"bytes,2,opt,name=order_info,json=orderInfo,proto3" json:"order_info"`                                            //订单信息
	ComplaintInfo          *Complaint           `protobuf:"bytes,3,opt,name=complaint_info,json=complaintInfo,proto3" json:"complaint_info"`                                //维权信息
	RefundInfo             *ComplaintRefundInfo `protobuf:"bytes,4,opt,name=refund_info,json=refundInfo,proto3" json:"refund_info"`                                         //退款数据
	RefundOnlyReasons      []string             `protobuf:"bytes,5,rep,name=refund_only_reasons,json=refundOnlyReasons,proto3" json:"refund_only_reasons"`                  //仅退款原因
	ReturnAndRefundReasons []string             `protobuf:"bytes,6,rep,name=return_and_refund_reasons,json=returnAndRefundReasons,proto3" json:"return_and_refund_reasons"` //退货退款原因
	TypeList               []*ComplaintTypeInfo `protobuf:"bytes,7,rep,name=type_list,json=typeList,proto3" json:"type_list"`                                               //维权类型列表
	UploadPathType         string               `protobuf:"bytes,8,opt,name=upload_path_type,json=uploadPathType,proto3" json:"upload_path_type"`
}

func (x *ComplaintApplyIndex) Reset() {
	*x = ComplaintApplyIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complaintService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplaintApplyIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplaintApplyIndex) ProtoMessage() {}

func (x *ComplaintApplyIndex) ProtoReflect() protoreflect.Message {
	mi := &file_complaintService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplaintApplyIndex.ProtoReflect.Descriptor instead.
func (*ComplaintApplyIndex) Descriptor() ([]byte, []int) {
	return file_complaintService_proto_rawDescGZIP(), []int{10}
}

func (x *ComplaintApplyIndex) GetProgressIndex() int32 {
	if x != nil {
		return x.ProgressIndex
	}
	return 0
}

func (x *ComplaintApplyIndex) GetOrderInfo() *Order {
	if x != nil {
		return x.OrderInfo
	}
	return nil
}

func (x *ComplaintApplyIndex) GetComplaintInfo() *Complaint {
	if x != nil {
		return x.ComplaintInfo
	}
	return nil
}

func (x *ComplaintApplyIndex) GetRefundInfo() *ComplaintRefundInfo {
	if x != nil {
		return x.RefundInfo
	}
	return nil
}

func (x *ComplaintApplyIndex) GetRefundOnlyReasons() []string {
	if x != nil {
		return x.RefundOnlyReasons
	}
	return nil
}

func (x *ComplaintApplyIndex) GetReturnAndRefundReasons() []string {
	if x != nil {
		return x.ReturnAndRefundReasons
	}
	return nil
}

func (x *ComplaintApplyIndex) GetTypeList() []*ComplaintTypeInfo {
	if x != nil {
		return x.TypeList
	}
	return nil
}

func (x *ComplaintApplyIndex) GetUploadPathType() string {
	if x != nil {
		return x.UploadPathType
	}
	return ""
}

var File_complaintService_proto protoreflect.FileDescriptor

var file_complaintService_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x09, 0x0a, 0x09, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x20, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x70, 0x75, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53,
	0x6b, 0x75, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xda, 0x04, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6b, 0x75, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6b, 0x75, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x4d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xec, 0x04, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x53, 0x70, 0x75, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75,
	0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e, 0x0a,
	0x13, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x68,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xa4, 0x01,
	0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x68, 0x61, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x22, 0xf4, 0x03, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x53, 0x70, 0x75,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x4b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xe2, 0x03, 0x0a, 0x10,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74,
	0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xe2, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x61, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x7b, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xb7, 0x03, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x85, 0x07, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x1a,
	0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_complaintService_proto_rawDescOnce sync.Once
	file_complaintService_proto_rawDescData = file_complaintService_proto_rawDesc
)

func file_complaintService_proto_rawDescGZIP() []byte {
	file_complaintService_proto_rawDescOnce.Do(func() {
		file_complaintService_proto_rawDescData = protoimpl.X.CompressGZIP(file_complaintService_proto_rawDescData)
	})
	return file_complaintService_proto_rawDescData
}

var file_complaintService_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_complaintService_proto_goTypes = []interface{}{
	(*Complaint)(nil),              // 0: services.Complaint
	(*ComplaintDetail)(nil),        // 1: services.ComplaintDetail
	(*ComplaintSolution)(nil),      // 2: services.ComplaintSolution
	(*ComplaintAdminCommand)(nil),  // 3: services.ComplaintAdminCommand
	(*ComplaintUserCommand)(nil),   // 4: services.ComplaintUserCommand
	(*ComplaintReviewRequest)(nil), // 5: services.ComplaintReviewRequest
	(*ComplaintRequest)(nil),       // 6: services.ComplaintRequest
	(*ComplaintResponse)(nil),      // 7: services.ComplaintResponse
	(*ComplaintRefundInfo)(nil),    // 8: services.ComplaintRefundInfo
	(*ComplaintTypeInfo)(nil),      // 9: services.ComplaintTypeInfo
	(*ComplaintApplyIndex)(nil),    // 10: services.ComplaintApplyIndex
	(*ComplaintProgress)(nil),      // 11: services.ComplaintProgress
	(*ProductInfo)(nil),            // 12: services.ProductInfo
	(*Order)(nil),                  // 13: services.Order
	(*MemberInfo)(nil),             // 14: services.MemberInfo
	(*SkuSpecInfo)(nil),            // 15: services.SkuSpecInfo
	(*OrderDetail)(nil),            // 16: services.OrderDetail
	(*ReturnAddress)(nil),          // 17: services.ReturnAddress
	(*common.Pager)(nil),           // 18: common.Pager
}
var file_complaintService_proto_depIdxs = []int32{
	2,  // 0: services.Complaint.solution:type_name -> services.ComplaintSolution
	11, // 1: services.Complaint.progress_list:type_name -> services.ComplaintProgress
	1,  // 2: services.Complaint.details:type_name -> services.ComplaintDetail
	12, // 3: services.Complaint.product:type_name -> services.ProductInfo
	13, // 4: services.Complaint.order:type_name -> services.Order
	14, // 5: services.Complaint.member:type_name -> services.MemberInfo
	3,  // 6: services.Complaint.admin_command:type_name -> services.ComplaintAdminCommand
	4,  // 7: services.Complaint.user_command:type_name -> services.ComplaintUserCommand
	15, // 8: services.ComplaintDetail.spec:type_name -> services.SkuSpecInfo
	16, // 9: services.ComplaintDetail.order_detail:type_name -> services.OrderDetail
	17, // 10: services.ComplaintSolution.return_address:type_name -> services.ReturnAddress
	18, // 11: services.ComplaintResponse.pager:type_name -> common.Pager
	0,  // 12: services.ComplaintResponse.entity:type_name -> services.Complaint
	0,  // 13: services.ComplaintResponse.items:type_name -> services.Complaint
	10, // 14: services.ComplaintResponse.apply_index:type_name -> services.ComplaintApplyIndex
	13, // 15: services.ComplaintApplyIndex.order_info:type_name -> services.Order
	0,  // 16: services.ComplaintApplyIndex.complaint_info:type_name -> services.Complaint
	8,  // 17: services.ComplaintApplyIndex.refund_info:type_name -> services.ComplaintRefundInfo
	9,  // 18: services.ComplaintApplyIndex.type_list:type_name -> services.ComplaintTypeInfo
	6,  // 19: services.ComplaintService.ApplyIndex:input_type -> services.ComplaintRequest
	0,  // 20: services.ComplaintService.ApplyCreate:input_type -> services.Complaint
	0,  // 21: services.ComplaintService.Cancel:input_type -> services.Complaint
	0,  // 22: services.ComplaintService.Delete:input_type -> services.Complaint
	0,  // 23: services.ComplaintService.ReturnGoods:input_type -> services.Complaint
	5,  // 24: services.ComplaintService.ConfirmReview:input_type -> services.ComplaintReviewRequest
	0,  // 25: services.ComplaintService.ConfirmCollect:input_type -> services.Complaint
	0,  // 26: services.ComplaintService.ConfirmRefund:input_type -> services.Complaint
	0,  // 27: services.ComplaintService.RefundAgain:input_type -> services.Complaint
	6,  // 28: services.ComplaintService.Detail:input_type -> services.ComplaintRequest
	0,  // 29: services.ComplaintService.Get:input_type -> services.Complaint
	6,  // 30: services.ComplaintService.Search:input_type -> services.ComplaintRequest
	6,  // 31: services.ComplaintService.List:input_type -> services.ComplaintRequest
	7,  // 32: services.ComplaintService.ApplyIndex:output_type -> services.ComplaintResponse
	7,  // 33: services.ComplaintService.ApplyCreate:output_type -> services.ComplaintResponse
	7,  // 34: services.ComplaintService.Cancel:output_type -> services.ComplaintResponse
	7,  // 35: services.ComplaintService.Delete:output_type -> services.ComplaintResponse
	7,  // 36: services.ComplaintService.ReturnGoods:output_type -> services.ComplaintResponse
	7,  // 37: services.ComplaintService.ConfirmReview:output_type -> services.ComplaintResponse
	7,  // 38: services.ComplaintService.ConfirmCollect:output_type -> services.ComplaintResponse
	7,  // 39: services.ComplaintService.ConfirmRefund:output_type -> services.ComplaintResponse
	7,  // 40: services.ComplaintService.RefundAgain:output_type -> services.ComplaintResponse
	7,  // 41: services.ComplaintService.Detail:output_type -> services.ComplaintResponse
	7,  // 42: services.ComplaintService.Get:output_type -> services.ComplaintResponse
	7,  // 43: services.ComplaintService.Search:output_type -> services.ComplaintResponse
	7,  // 44: services.ComplaintService.List:output_type -> services.ComplaintResponse
	32, // [32:45] is the sub-list for method output_type
	19, // [19:32] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_complaintService_proto_init() }
func file_complaintService_proto_init() {
	if File_complaintService_proto != nil {
		return
	}
	file_complaintProgressService_proto_init()
	file_baseInfoService_proto_init()
	file_orderService_proto_init()
	file_orderDetailService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_complaintService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Complaint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_complaintService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_complaintService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintSolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_complaintService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintAdminCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_complaintService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintUserCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_complaintService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintReviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_complaintService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_complaintService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_complaintService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintRefundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_complaintService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_complaintService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplaintApplyIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_complaintService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_complaintService_proto_goTypes,
		DependencyIndexes: file_complaintService_proto_depIdxs,
		MessageInfos:      file_complaintService_proto_msgTypes,
	}.Build()
	File_complaintService_proto = out.File
	file_complaintService_proto_rawDesc = nil
	file_complaintService_proto_goTypes = nil
	file_complaintService_proto_depIdxs = nil
}
