// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: aftersaleService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AftersaleService service

func NewAftersaleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AftersaleService service

type AftersaleService interface {
	//售后单列表【user】
	AftersaleIndex(ctx context.Context, in *AftersaleRequest, opts ...client.CallOption) (*AftersaleResponse, error)
	//售后单详情【admin/user】
	AftersaleDetail(ctx context.Context, in *AftersaleRequest, opts ...client.CallOption) (*AftersaleDetailResponse, error)
	//售后单查询【admin】
	AftersaleSearch(ctx context.Context, in *AftersaleRequest, opts ...client.CallOption) (*AftersaleResponse, error)
	//售后单总数
	AftersaleTotal(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error)
	// 售后单创建【user】
	AftersaleCreate(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error)
	//用户退货【user】
	AftersaleDelivery(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error)
	//售后单审核【admin】
	AftersaleAudit(ctx context.Context, in *AftersaleRequest, opts ...client.CallOption) (*AftersaleResponse, error)
	//售后单拒绝【admin】
	AftersaleRefuse(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error)
	//售后单删除【admin/user】
	AftersaleDelete(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error)
	//售后单确认【admin】
	AftersaleConfirm(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error)
	//售后单取消【admin/user】
	AftersaleCancel(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error)
	//启动打款【admin】
	LaunchRefund(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error)
	//售后单获取【service】
	Get(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error)
	//售后单列表【service】
	List(ctx context.Context, in *AftersaleRequest, opts ...client.CallOption) (*AftersaleResponse, error)
}

type aftersaleService struct {
	c    client.Client
	name string
}

func NewAftersaleService(name string, c client.Client) AftersaleService {
	return &aftersaleService{
		c:    c,
		name: name,
	}
}

func (c *aftersaleService) AftersaleIndex(ctx context.Context, in *AftersaleRequest, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.AftersaleIndex", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) AftersaleDetail(ctx context.Context, in *AftersaleRequest, opts ...client.CallOption) (*AftersaleDetailResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.AftersaleDetail", in)
	out := new(AftersaleDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) AftersaleSearch(ctx context.Context, in *AftersaleRequest, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.AftersaleSearch", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) AftersaleTotal(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.AftersaleTotal", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) AftersaleCreate(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.AftersaleCreate", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) AftersaleDelivery(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.AftersaleDelivery", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) AftersaleAudit(ctx context.Context, in *AftersaleRequest, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.AftersaleAudit", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) AftersaleRefuse(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.AftersaleRefuse", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) AftersaleDelete(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.AftersaleDelete", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) AftersaleConfirm(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.AftersaleConfirm", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) AftersaleCancel(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.AftersaleCancel", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) LaunchRefund(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.LaunchRefund", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) Get(ctx context.Context, in *Aftersale, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.Get", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aftersaleService) List(ctx context.Context, in *AftersaleRequest, opts ...client.CallOption) (*AftersaleResponse, error) {
	req := c.c.NewRequest(c.name, "AftersaleService.List", in)
	out := new(AftersaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AftersaleService service

type AftersaleServiceHandler interface {
	//售后单列表【user】
	AftersaleIndex(context.Context, *AftersaleRequest, *AftersaleResponse) error
	//售后单详情【admin/user】
	AftersaleDetail(context.Context, *AftersaleRequest, *AftersaleDetailResponse) error
	//售后单查询【admin】
	AftersaleSearch(context.Context, *AftersaleRequest, *AftersaleResponse) error
	//售后单总数
	AftersaleTotal(context.Context, *Aftersale, *AftersaleResponse) error
	// 售后单创建【user】
	AftersaleCreate(context.Context, *Aftersale, *AftersaleResponse) error
	//用户退货【user】
	AftersaleDelivery(context.Context, *Aftersale, *AftersaleResponse) error
	//售后单审核【admin】
	AftersaleAudit(context.Context, *AftersaleRequest, *AftersaleResponse) error
	//售后单拒绝【admin】
	AftersaleRefuse(context.Context, *Aftersale, *AftersaleResponse) error
	//售后单删除【admin/user】
	AftersaleDelete(context.Context, *Aftersale, *AftersaleResponse) error
	//售后单确认【admin】
	AftersaleConfirm(context.Context, *Aftersale, *AftersaleResponse) error
	//售后单取消【admin/user】
	AftersaleCancel(context.Context, *Aftersale, *AftersaleResponse) error
	//启动打款【admin】
	LaunchRefund(context.Context, *Aftersale, *AftersaleResponse) error
	//售后单获取【service】
	Get(context.Context, *Aftersale, *AftersaleResponse) error
	//售后单列表【service】
	List(context.Context, *AftersaleRequest, *AftersaleResponse) error
}

func RegisterAftersaleServiceHandler(s server.Server, hdlr AftersaleServiceHandler, opts ...server.HandlerOption) error {
	type aftersaleService interface {
		AftersaleIndex(ctx context.Context, in *AftersaleRequest, out *AftersaleResponse) error
		AftersaleDetail(ctx context.Context, in *AftersaleRequest, out *AftersaleDetailResponse) error
		AftersaleSearch(ctx context.Context, in *AftersaleRequest, out *AftersaleResponse) error
		AftersaleTotal(ctx context.Context, in *Aftersale, out *AftersaleResponse) error
		AftersaleCreate(ctx context.Context, in *Aftersale, out *AftersaleResponse) error
		AftersaleDelivery(ctx context.Context, in *Aftersale, out *AftersaleResponse) error
		AftersaleAudit(ctx context.Context, in *AftersaleRequest, out *AftersaleResponse) error
		AftersaleRefuse(ctx context.Context, in *Aftersale, out *AftersaleResponse) error
		AftersaleDelete(ctx context.Context, in *Aftersale, out *AftersaleResponse) error
		AftersaleConfirm(ctx context.Context, in *Aftersale, out *AftersaleResponse) error
		AftersaleCancel(ctx context.Context, in *Aftersale, out *AftersaleResponse) error
		LaunchRefund(ctx context.Context, in *Aftersale, out *AftersaleResponse) error
		Get(ctx context.Context, in *Aftersale, out *AftersaleResponse) error
		List(ctx context.Context, in *AftersaleRequest, out *AftersaleResponse) error
	}
	type AftersaleService struct {
		aftersaleService
	}
	h := &aftersaleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AftersaleService{h}, opts...))
}

type aftersaleServiceHandler struct {
	AftersaleServiceHandler
}

func (h *aftersaleServiceHandler) AftersaleIndex(ctx context.Context, in *AftersaleRequest, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.AftersaleIndex(ctx, in, out)
}

func (h *aftersaleServiceHandler) AftersaleDetail(ctx context.Context, in *AftersaleRequest, out *AftersaleDetailResponse) error {
	return h.AftersaleServiceHandler.AftersaleDetail(ctx, in, out)
}

func (h *aftersaleServiceHandler) AftersaleSearch(ctx context.Context, in *AftersaleRequest, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.AftersaleSearch(ctx, in, out)
}

func (h *aftersaleServiceHandler) AftersaleTotal(ctx context.Context, in *Aftersale, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.AftersaleTotal(ctx, in, out)
}

func (h *aftersaleServiceHandler) AftersaleCreate(ctx context.Context, in *Aftersale, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.AftersaleCreate(ctx, in, out)
}

func (h *aftersaleServiceHandler) AftersaleDelivery(ctx context.Context, in *Aftersale, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.AftersaleDelivery(ctx, in, out)
}

func (h *aftersaleServiceHandler) AftersaleAudit(ctx context.Context, in *AftersaleRequest, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.AftersaleAudit(ctx, in, out)
}

func (h *aftersaleServiceHandler) AftersaleRefuse(ctx context.Context, in *Aftersale, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.AftersaleRefuse(ctx, in, out)
}

func (h *aftersaleServiceHandler) AftersaleDelete(ctx context.Context, in *Aftersale, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.AftersaleDelete(ctx, in, out)
}

func (h *aftersaleServiceHandler) AftersaleConfirm(ctx context.Context, in *Aftersale, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.AftersaleConfirm(ctx, in, out)
}

func (h *aftersaleServiceHandler) AftersaleCancel(ctx context.Context, in *Aftersale, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.AftersaleCancel(ctx, in, out)
}

func (h *aftersaleServiceHandler) LaunchRefund(ctx context.Context, in *Aftersale, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.LaunchRefund(ctx, in, out)
}

func (h *aftersaleServiceHandler) Get(ctx context.Context, in *Aftersale, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.Get(ctx, in, out)
}

func (h *aftersaleServiceHandler) List(ctx context.Context, in *AftersaleRequest, out *AftersaleResponse) error {
	return h.AftersaleServiceHandler.List(ctx, in, out)
}
