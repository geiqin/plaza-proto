// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orderService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OrderService service

func NewOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderService service

type OrderService interface {
	//修改价格
	ModifyPrice(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error)
	//修改地址
	ModifyAddress(ctx context.Context, in *OrderAddress, opts ...client.CallOption) (*OrderResponse, error)
	//订单追加备注
	AppendRemark(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	//确认接受订单(接单/拒单操作)
	ConfirmAccept(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	//确认撤销订单
	ConfirmCancel(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error)
	//确认删除订单
	ConfirmDelete(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error)
	//确认已签收（客户操作）
	ConfirmSigned(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	//确认已结算操作
	//结算订单(无法通过正常流程完成订单,需要商家主动完成订单)
	//适用订单: 堂食餐后付款订单、货到付款订单、外卖餐到付款订单
	ConfirmSettled(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	//确认核销订单（如扫码核销）
	ConfirmVerified(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	//获取订单信息
	Get(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error)
	//显示订单信息(详细信息)
	Display(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error)
	//前端显示订单信息(详细信息)
	FrontDisplay(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error)
	//查询订单
	Search(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	//按条件获取订单列表
	List(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	//获取订单赠送\使用的优惠券列表
	GetCouponList(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error)
	//订单支付
	Pay(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderPayResponse, error)
	//订单相关统计
	Count(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderCountResponse, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) ModifyPrice(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ModifyPrice", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ModifyAddress(ctx context.Context, in *OrderAddress, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ModifyAddress", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) AppendRemark(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.AppendRemark", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ConfirmAccept(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ConfirmAccept", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ConfirmCancel(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ConfirmCancel", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ConfirmDelete(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ConfirmDelete", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ConfirmSigned(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ConfirmSigned", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ConfirmSettled(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ConfirmSettled", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ConfirmVerified(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ConfirmVerified", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Get(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.Get", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Display(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.Display", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) FrontDisplay(ctx context.Context, in *Order, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.FrontDisplay", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Search(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.Search", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) List(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.List", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetCouponList(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.GetCouponList", in)
	out := new(OrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Pay(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderPayResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.Pay", in)
	out := new(OrderPayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) Count(ctx context.Context, in *OrderRequest, opts ...client.CallOption) (*OrderCountResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.Count", in)
	out := new(OrderCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceHandler interface {
	//修改价格
	ModifyPrice(context.Context, *Order, *OrderResponse) error
	//修改地址
	ModifyAddress(context.Context, *OrderAddress, *OrderResponse) error
	//订单追加备注
	AppendRemark(context.Context, *OrderRequest, *OrderResponse) error
	//确认接受订单(接单/拒单操作)
	ConfirmAccept(context.Context, *OrderRequest, *OrderResponse) error
	//确认撤销订单
	ConfirmCancel(context.Context, *Order, *OrderResponse) error
	//确认删除订单
	ConfirmDelete(context.Context, *Order, *OrderResponse) error
	//确认已签收（客户操作）
	ConfirmSigned(context.Context, *OrderRequest, *OrderResponse) error
	//确认已结算操作
	//结算订单(无法通过正常流程完成订单,需要商家主动完成订单)
	//适用订单: 堂食餐后付款订单、货到付款订单、外卖餐到付款订单
	ConfirmSettled(context.Context, *OrderRequest, *OrderResponse) error
	//确认核销订单（如扫码核销）
	ConfirmVerified(context.Context, *OrderRequest, *OrderResponse) error
	//获取订单信息
	Get(context.Context, *Order, *OrderResponse) error
	//显示订单信息(详细信息)
	Display(context.Context, *Order, *OrderResponse) error
	//前端显示订单信息(详细信息)
	FrontDisplay(context.Context, *Order, *OrderResponse) error
	//查询订单
	Search(context.Context, *OrderRequest, *OrderResponse) error
	//按条件获取订单列表
	List(context.Context, *OrderRequest, *OrderResponse) error
	//获取订单赠送\使用的优惠券列表
	GetCouponList(context.Context, *OrderRequest, *OrderResponse) error
	//订单支付
	Pay(context.Context, *OrderRequest, *OrderPayResponse) error
	//订单相关统计
	Count(context.Context, *OrderRequest, *OrderCountResponse) error
}

func RegisterOrderServiceHandler(s server.Server, hdlr OrderServiceHandler, opts ...server.HandlerOption) error {
	type orderService interface {
		ModifyPrice(ctx context.Context, in *Order, out *OrderResponse) error
		ModifyAddress(ctx context.Context, in *OrderAddress, out *OrderResponse) error
		AppendRemark(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		ConfirmAccept(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		ConfirmCancel(ctx context.Context, in *Order, out *OrderResponse) error
		ConfirmDelete(ctx context.Context, in *Order, out *OrderResponse) error
		ConfirmSigned(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		ConfirmSettled(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		ConfirmVerified(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		Get(ctx context.Context, in *Order, out *OrderResponse) error
		Display(ctx context.Context, in *Order, out *OrderResponse) error
		FrontDisplay(ctx context.Context, in *Order, out *OrderResponse) error
		Search(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		List(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		GetCouponList(ctx context.Context, in *OrderRequest, out *OrderResponse) error
		Pay(ctx context.Context, in *OrderRequest, out *OrderPayResponse) error
		Count(ctx context.Context, in *OrderRequest, out *OrderCountResponse) error
	}
	type OrderService struct {
		orderService
	}
	h := &orderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderService{h}, opts...))
}

type orderServiceHandler struct {
	OrderServiceHandler
}

func (h *orderServiceHandler) ModifyPrice(ctx context.Context, in *Order, out *OrderResponse) error {
	return h.OrderServiceHandler.ModifyPrice(ctx, in, out)
}

func (h *orderServiceHandler) ModifyAddress(ctx context.Context, in *OrderAddress, out *OrderResponse) error {
	return h.OrderServiceHandler.ModifyAddress(ctx, in, out)
}

func (h *orderServiceHandler) AppendRemark(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.AppendRemark(ctx, in, out)
}

func (h *orderServiceHandler) ConfirmAccept(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.ConfirmAccept(ctx, in, out)
}

func (h *orderServiceHandler) ConfirmCancel(ctx context.Context, in *Order, out *OrderResponse) error {
	return h.OrderServiceHandler.ConfirmCancel(ctx, in, out)
}

func (h *orderServiceHandler) ConfirmDelete(ctx context.Context, in *Order, out *OrderResponse) error {
	return h.OrderServiceHandler.ConfirmDelete(ctx, in, out)
}

func (h *orderServiceHandler) ConfirmSigned(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.ConfirmSigned(ctx, in, out)
}

func (h *orderServiceHandler) ConfirmSettled(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.ConfirmSettled(ctx, in, out)
}

func (h *orderServiceHandler) ConfirmVerified(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.ConfirmVerified(ctx, in, out)
}

func (h *orderServiceHandler) Get(ctx context.Context, in *Order, out *OrderResponse) error {
	return h.OrderServiceHandler.Get(ctx, in, out)
}

func (h *orderServiceHandler) Display(ctx context.Context, in *Order, out *OrderResponse) error {
	return h.OrderServiceHandler.Display(ctx, in, out)
}

func (h *orderServiceHandler) FrontDisplay(ctx context.Context, in *Order, out *OrderResponse) error {
	return h.OrderServiceHandler.FrontDisplay(ctx, in, out)
}

func (h *orderServiceHandler) Search(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.Search(ctx, in, out)
}

func (h *orderServiceHandler) List(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.List(ctx, in, out)
}

func (h *orderServiceHandler) GetCouponList(ctx context.Context, in *OrderRequest, out *OrderResponse) error {
	return h.OrderServiceHandler.GetCouponList(ctx, in, out)
}

func (h *orderServiceHandler) Pay(ctx context.Context, in *OrderRequest, out *OrderPayResponse) error {
	return h.OrderServiceHandler.Pay(ctx, in, out)
}

func (h *orderServiceHandler) Count(ctx context.Context, in *OrderRequest, out *OrderCountResponse) error {
	return h.OrderServiceHandler.Count(ctx, in, out)
}
