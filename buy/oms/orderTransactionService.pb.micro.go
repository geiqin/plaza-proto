// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orderTransactionService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OrderTransactionService service

func NewOrderTransactionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderTransactionService service

type OrderTransactionService interface {
	//获取订单交易记录
	Get(ctx context.Context, in *OrderTransaction, opts ...client.CallOption) (*OrderTransactionResponse, error)
	//查询订单交易记录
	Search(ctx context.Context, in *OrderTransactionRequest, opts ...client.CallOption) (*OrderTransactionResponse, error)
}

type orderTransactionService struct {
	c    client.Client
	name string
}

func NewOrderTransactionService(name string, c client.Client) OrderTransactionService {
	return &orderTransactionService{
		c:    c,
		name: name,
	}
}

func (c *orderTransactionService) Get(ctx context.Context, in *OrderTransaction, opts ...client.CallOption) (*OrderTransactionResponse, error) {
	req := c.c.NewRequest(c.name, "OrderTransactionService.Get", in)
	out := new(OrderTransactionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderTransactionService) Search(ctx context.Context, in *OrderTransactionRequest, opts ...client.CallOption) (*OrderTransactionResponse, error) {
	req := c.c.NewRequest(c.name, "OrderTransactionService.Search", in)
	out := new(OrderTransactionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderTransactionService service

type OrderTransactionServiceHandler interface {
	//获取订单交易记录
	Get(context.Context, *OrderTransaction, *OrderTransactionResponse) error
	//查询订单交易记录
	Search(context.Context, *OrderTransactionRequest, *OrderTransactionResponse) error
}

func RegisterOrderTransactionServiceHandler(s server.Server, hdlr OrderTransactionServiceHandler, opts ...server.HandlerOption) error {
	type orderTransactionService interface {
		Get(ctx context.Context, in *OrderTransaction, out *OrderTransactionResponse) error
		Search(ctx context.Context, in *OrderTransactionRequest, out *OrderTransactionResponse) error
	}
	type OrderTransactionService struct {
		orderTransactionService
	}
	h := &orderTransactionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderTransactionService{h}, opts...))
}

type orderTransactionServiceHandler struct {
	OrderTransactionServiceHandler
}

func (h *orderTransactionServiceHandler) Get(ctx context.Context, in *OrderTransaction, out *OrderTransactionResponse) error {
	return h.OrderTransactionServiceHandler.Get(ctx, in, out)
}

func (h *orderTransactionServiceHandler) Search(ctx context.Context, in *OrderTransactionRequest, out *OrderTransactionResponse) error {
	return h.OrderTransactionServiceHandler.Search(ctx, in, out)
}
