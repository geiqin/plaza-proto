// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: activityService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ActivityService service

func NewActivityServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ActivityService service

type ActivityService interface {
	//创建促销活动
	Create(ctx context.Context, in *Activity, opts ...client.CallOption) (*ActivityResponse, error)
	// 编辑促销活动
	Update(ctx context.Context, in *Activity, opts ...client.CallOption) (*ActivityResponse, error)
	// 删除促销活动
	Delete(ctx context.Context, in *Activity, opts ...client.CallOption) (*ActivityResponse, error)
	//撤销活动
	Cancel(ctx context.Context, in *ActivityRequest, opts ...client.CallOption) (*ActivityResponse, error)
	// 获取活动详情
	Get(ctx context.Context, in *Activity, opts ...client.CallOption) (*ActivityResponse, error)
	//获取活动列表
	List(ctx context.Context, in *ActivityRequest, opts ...client.CallOption) (*ActivityResponse, error)
	//查询活动
	Search(ctx context.Context, in *ActivityRequest, opts ...client.CallOption) (*ActivityResponse, error)
}

type activityService struct {
	c    client.Client
	name string
}

func NewActivityService(name string, c client.Client) ActivityService {
	return &activityService{
		c:    c,
		name: name,
	}
}

func (c *activityService) Create(ctx context.Context, in *Activity, opts ...client.CallOption) (*ActivityResponse, error) {
	req := c.c.NewRequest(c.name, "ActivityService.Create", in)
	out := new(ActivityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) Update(ctx context.Context, in *Activity, opts ...client.CallOption) (*ActivityResponse, error) {
	req := c.c.NewRequest(c.name, "ActivityService.Update", in)
	out := new(ActivityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) Delete(ctx context.Context, in *Activity, opts ...client.CallOption) (*ActivityResponse, error) {
	req := c.c.NewRequest(c.name, "ActivityService.Delete", in)
	out := new(ActivityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) Cancel(ctx context.Context, in *ActivityRequest, opts ...client.CallOption) (*ActivityResponse, error) {
	req := c.c.NewRequest(c.name, "ActivityService.Cancel", in)
	out := new(ActivityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) Get(ctx context.Context, in *Activity, opts ...client.CallOption) (*ActivityResponse, error) {
	req := c.c.NewRequest(c.name, "ActivityService.Get", in)
	out := new(ActivityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) List(ctx context.Context, in *ActivityRequest, opts ...client.CallOption) (*ActivityResponse, error) {
	req := c.c.NewRequest(c.name, "ActivityService.List", in)
	out := new(ActivityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) Search(ctx context.Context, in *ActivityRequest, opts ...client.CallOption) (*ActivityResponse, error) {
	req := c.c.NewRequest(c.name, "ActivityService.Search", in)
	out := new(ActivityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ActivityService service

type ActivityServiceHandler interface {
	//创建促销活动
	Create(context.Context, *Activity, *ActivityResponse) error
	// 编辑促销活动
	Update(context.Context, *Activity, *ActivityResponse) error
	// 删除促销活动
	Delete(context.Context, *Activity, *ActivityResponse) error
	//撤销活动
	Cancel(context.Context, *ActivityRequest, *ActivityResponse) error
	// 获取活动详情
	Get(context.Context, *Activity, *ActivityResponse) error
	//获取活动列表
	List(context.Context, *ActivityRequest, *ActivityResponse) error
	//查询活动
	Search(context.Context, *ActivityRequest, *ActivityResponse) error
}

func RegisterActivityServiceHandler(s server.Server, hdlr ActivityServiceHandler, opts ...server.HandlerOption) error {
	type activityService interface {
		Create(ctx context.Context, in *Activity, out *ActivityResponse) error
		Update(ctx context.Context, in *Activity, out *ActivityResponse) error
		Delete(ctx context.Context, in *Activity, out *ActivityResponse) error
		Cancel(ctx context.Context, in *ActivityRequest, out *ActivityResponse) error
		Get(ctx context.Context, in *Activity, out *ActivityResponse) error
		List(ctx context.Context, in *ActivityRequest, out *ActivityResponse) error
		Search(ctx context.Context, in *ActivityRequest, out *ActivityResponse) error
	}
	type ActivityService struct {
		activityService
	}
	h := &activityServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ActivityService{h}, opts...))
}

type activityServiceHandler struct {
	ActivityServiceHandler
}

func (h *activityServiceHandler) Create(ctx context.Context, in *Activity, out *ActivityResponse) error {
	return h.ActivityServiceHandler.Create(ctx, in, out)
}

func (h *activityServiceHandler) Update(ctx context.Context, in *Activity, out *ActivityResponse) error {
	return h.ActivityServiceHandler.Update(ctx, in, out)
}

func (h *activityServiceHandler) Delete(ctx context.Context, in *Activity, out *ActivityResponse) error {
	return h.ActivityServiceHandler.Delete(ctx, in, out)
}

func (h *activityServiceHandler) Cancel(ctx context.Context, in *ActivityRequest, out *ActivityResponse) error {
	return h.ActivityServiceHandler.Cancel(ctx, in, out)
}

func (h *activityServiceHandler) Get(ctx context.Context, in *Activity, out *ActivityResponse) error {
	return h.ActivityServiceHandler.Get(ctx, in, out)
}

func (h *activityServiceHandler) List(ctx context.Context, in *ActivityRequest, out *ActivityResponse) error {
	return h.ActivityServiceHandler.List(ctx, in, out)
}

func (h *activityServiceHandler) Search(ctx context.Context, in *ActivityRequest, out *ActivityResponse) error {
	return h.ActivityServiceHandler.Search(ctx, in, out)
}
