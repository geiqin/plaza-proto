// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: promotionService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PromotionService service

func NewPromotionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PromotionService service

type PromotionService interface {
	//创建促销活动
	Create(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error)
	// 编辑促销活动
	Update(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error)
	//修改已报名数
	UpdateAssignCount(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error)
	//修改已使用数
	UpdateUsedCount(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error)
	// 删除促销活动
	Delete(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error)
	//启动活动
	Start(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error)
	//终止活动
	Stop(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error)
	// 获取活动详情
	Get(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error)
	//获取活动列表
	List(ctx context.Context, in *PromotionRequest, opts ...client.CallOption) (*PromotionResponse, error)
	//查询活动
	Search(ctx context.Context, in *PromotionRequest, opts ...client.CallOption) (*PromotionResponse, error)
}

type promotionService struct {
	c    client.Client
	name string
}

func NewPromotionService(name string, c client.Client) PromotionService {
	return &promotionService{
		c:    c,
		name: name,
	}
}

func (c *promotionService) Create(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error) {
	req := c.c.NewRequest(c.name, "PromotionService.Create", in)
	out := new(PromotionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionService) Update(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error) {
	req := c.c.NewRequest(c.name, "PromotionService.Update", in)
	out := new(PromotionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionService) UpdateAssignCount(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error) {
	req := c.c.NewRequest(c.name, "PromotionService.UpdateAssignCount", in)
	out := new(PromotionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionService) UpdateUsedCount(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error) {
	req := c.c.NewRequest(c.name, "PromotionService.UpdateUsedCount", in)
	out := new(PromotionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionService) Delete(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error) {
	req := c.c.NewRequest(c.name, "PromotionService.Delete", in)
	out := new(PromotionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionService) Start(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error) {
	req := c.c.NewRequest(c.name, "PromotionService.Start", in)
	out := new(PromotionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionService) Stop(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error) {
	req := c.c.NewRequest(c.name, "PromotionService.Stop", in)
	out := new(PromotionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionService) Get(ctx context.Context, in *Promotion, opts ...client.CallOption) (*PromotionResponse, error) {
	req := c.c.NewRequest(c.name, "PromotionService.Get", in)
	out := new(PromotionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionService) List(ctx context.Context, in *PromotionRequest, opts ...client.CallOption) (*PromotionResponse, error) {
	req := c.c.NewRequest(c.name, "PromotionService.List", in)
	out := new(PromotionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionService) Search(ctx context.Context, in *PromotionRequest, opts ...client.CallOption) (*PromotionResponse, error) {
	req := c.c.NewRequest(c.name, "PromotionService.Search", in)
	out := new(PromotionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PromotionService service

type PromotionServiceHandler interface {
	//创建促销活动
	Create(context.Context, *Promotion, *PromotionResponse) error
	// 编辑促销活动
	Update(context.Context, *Promotion, *PromotionResponse) error
	//修改已报名数
	UpdateAssignCount(context.Context, *Promotion, *PromotionResponse) error
	//修改已使用数
	UpdateUsedCount(context.Context, *Promotion, *PromotionResponse) error
	// 删除促销活动
	Delete(context.Context, *Promotion, *PromotionResponse) error
	//启动活动
	Start(context.Context, *Promotion, *PromotionResponse) error
	//终止活动
	Stop(context.Context, *Promotion, *PromotionResponse) error
	// 获取活动详情
	Get(context.Context, *Promotion, *PromotionResponse) error
	//获取活动列表
	List(context.Context, *PromotionRequest, *PromotionResponse) error
	//查询活动
	Search(context.Context, *PromotionRequest, *PromotionResponse) error
}

func RegisterPromotionServiceHandler(s server.Server, hdlr PromotionServiceHandler, opts ...server.HandlerOption) error {
	type promotionService interface {
		Create(ctx context.Context, in *Promotion, out *PromotionResponse) error
		Update(ctx context.Context, in *Promotion, out *PromotionResponse) error
		UpdateAssignCount(ctx context.Context, in *Promotion, out *PromotionResponse) error
		UpdateUsedCount(ctx context.Context, in *Promotion, out *PromotionResponse) error
		Delete(ctx context.Context, in *Promotion, out *PromotionResponse) error
		Start(ctx context.Context, in *Promotion, out *PromotionResponse) error
		Stop(ctx context.Context, in *Promotion, out *PromotionResponse) error
		Get(ctx context.Context, in *Promotion, out *PromotionResponse) error
		List(ctx context.Context, in *PromotionRequest, out *PromotionResponse) error
		Search(ctx context.Context, in *PromotionRequest, out *PromotionResponse) error
	}
	type PromotionService struct {
		promotionService
	}
	h := &promotionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PromotionService{h}, opts...))
}

type promotionServiceHandler struct {
	PromotionServiceHandler
}

func (h *promotionServiceHandler) Create(ctx context.Context, in *Promotion, out *PromotionResponse) error {
	return h.PromotionServiceHandler.Create(ctx, in, out)
}

func (h *promotionServiceHandler) Update(ctx context.Context, in *Promotion, out *PromotionResponse) error {
	return h.PromotionServiceHandler.Update(ctx, in, out)
}

func (h *promotionServiceHandler) UpdateAssignCount(ctx context.Context, in *Promotion, out *PromotionResponse) error {
	return h.PromotionServiceHandler.UpdateAssignCount(ctx, in, out)
}

func (h *promotionServiceHandler) UpdateUsedCount(ctx context.Context, in *Promotion, out *PromotionResponse) error {
	return h.PromotionServiceHandler.UpdateUsedCount(ctx, in, out)
}

func (h *promotionServiceHandler) Delete(ctx context.Context, in *Promotion, out *PromotionResponse) error {
	return h.PromotionServiceHandler.Delete(ctx, in, out)
}

func (h *promotionServiceHandler) Start(ctx context.Context, in *Promotion, out *PromotionResponse) error {
	return h.PromotionServiceHandler.Start(ctx, in, out)
}

func (h *promotionServiceHandler) Stop(ctx context.Context, in *Promotion, out *PromotionResponse) error {
	return h.PromotionServiceHandler.Stop(ctx, in, out)
}

func (h *promotionServiceHandler) Get(ctx context.Context, in *Promotion, out *PromotionResponse) error {
	return h.PromotionServiceHandler.Get(ctx, in, out)
}

func (h *promotionServiceHandler) List(ctx context.Context, in *PromotionRequest, out *PromotionResponse) error {
	return h.PromotionServiceHandler.List(ctx, in, out)
}

func (h *promotionServiceHandler) Search(ctx context.Context, in *PromotionRequest, out *PromotionResponse) error {
	return h.PromotionServiceHandler.Search(ctx, in, out)
}
