// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: spuInventoryService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SpuInventoryService service

func NewSpuInventoryServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SpuInventoryService service

type SpuInventoryService interface {
	// 库存冻结
	Frozen(ctx context.Context, in *SpuInventory, opts ...client.CallOption) (*SpuInventoryResponse, error)
	// 冻结取消
	Cancel(ctx context.Context, in *SpuInventory, opts ...client.CallOption) (*SpuInventoryResponse, error)
	// 库存扣除
	Deduct(ctx context.Context, in *SpuInventory, opts ...client.CallOption) (*SpuInventoryResponse, error)
	// 日志查询
	Logs(ctx context.Context, in *SpuInventoryRequest, opts ...client.CallOption) (*SpuInventoryResponse, error)
}

type spuInventoryService struct {
	c    client.Client
	name string
}

func NewSpuInventoryService(name string, c client.Client) SpuInventoryService {
	return &spuInventoryService{
		c:    c,
		name: name,
	}
}

func (c *spuInventoryService) Frozen(ctx context.Context, in *SpuInventory, opts ...client.CallOption) (*SpuInventoryResponse, error) {
	req := c.c.NewRequest(c.name, "SpuInventoryService.Frozen", in)
	out := new(SpuInventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spuInventoryService) Cancel(ctx context.Context, in *SpuInventory, opts ...client.CallOption) (*SpuInventoryResponse, error) {
	req := c.c.NewRequest(c.name, "SpuInventoryService.Cancel", in)
	out := new(SpuInventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spuInventoryService) Deduct(ctx context.Context, in *SpuInventory, opts ...client.CallOption) (*SpuInventoryResponse, error) {
	req := c.c.NewRequest(c.name, "SpuInventoryService.Deduct", in)
	out := new(SpuInventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spuInventoryService) Logs(ctx context.Context, in *SpuInventoryRequest, opts ...client.CallOption) (*SpuInventoryResponse, error) {
	req := c.c.NewRequest(c.name, "SpuInventoryService.Logs", in)
	out := new(SpuInventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SpuInventoryService service

type SpuInventoryServiceHandler interface {
	// 库存冻结
	Frozen(context.Context, *SpuInventory, *SpuInventoryResponse) error
	// 冻结取消
	Cancel(context.Context, *SpuInventory, *SpuInventoryResponse) error
	// 库存扣除
	Deduct(context.Context, *SpuInventory, *SpuInventoryResponse) error
	// 日志查询
	Logs(context.Context, *SpuInventoryRequest, *SpuInventoryResponse) error
}

func RegisterSpuInventoryServiceHandler(s server.Server, hdlr SpuInventoryServiceHandler, opts ...server.HandlerOption) error {
	type spuInventoryService interface {
		Frozen(ctx context.Context, in *SpuInventory, out *SpuInventoryResponse) error
		Cancel(ctx context.Context, in *SpuInventory, out *SpuInventoryResponse) error
		Deduct(ctx context.Context, in *SpuInventory, out *SpuInventoryResponse) error
		Logs(ctx context.Context, in *SpuInventoryRequest, out *SpuInventoryResponse) error
	}
	type SpuInventoryService struct {
		spuInventoryService
	}
	h := &spuInventoryServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SpuInventoryService{h}, opts...))
}

type spuInventoryServiceHandler struct {
	SpuInventoryServiceHandler
}

func (h *spuInventoryServiceHandler) Frozen(ctx context.Context, in *SpuInventory, out *SpuInventoryResponse) error {
	return h.SpuInventoryServiceHandler.Frozen(ctx, in, out)
}

func (h *spuInventoryServiceHandler) Cancel(ctx context.Context, in *SpuInventory, out *SpuInventoryResponse) error {
	return h.SpuInventoryServiceHandler.Cancel(ctx, in, out)
}

func (h *spuInventoryServiceHandler) Deduct(ctx context.Context, in *SpuInventory, out *SpuInventoryResponse) error {
	return h.SpuInventoryServiceHandler.Deduct(ctx, in, out)
}

func (h *spuInventoryServiceHandler) Logs(ctx context.Context, in *SpuInventoryRequest, out *SpuInventoryResponse) error {
	return h.SpuInventoryServiceHandler.Logs(ctx, in, out)
}
