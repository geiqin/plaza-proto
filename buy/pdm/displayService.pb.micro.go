// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: displayService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DisplayService service

func NewDisplayServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DisplayService service

type DisplayService interface {
	//商品搜索初始化
	Index(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplayIndexResponse, error)
	//商品搜索列表
	List(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplayListResponse, error)
	//商品详情页
	Detail(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplayDetailResponse, error)
	//分类导航页
	Category(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplayCategoryResponse, error)
	//规格详情数据(单规格和多规格)
	SpecDetail(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplaySpecDetailResponse, error)
	//规格类型数据
	SpecType(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplaySpecTypeResponse, error)
}

type displayService struct {
	c    client.Client
	name string
}

func NewDisplayService(name string, c client.Client) DisplayService {
	return &displayService{
		c:    c,
		name: name,
	}
}

func (c *displayService) Index(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplayIndexResponse, error) {
	req := c.c.NewRequest(c.name, "DisplayService.Index", in)
	out := new(DisplayIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) List(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplayListResponse, error) {
	req := c.c.NewRequest(c.name, "DisplayService.List", in)
	out := new(DisplayListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) Detail(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplayDetailResponse, error) {
	req := c.c.NewRequest(c.name, "DisplayService.Detail", in)
	out := new(DisplayDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) Category(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplayCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "DisplayService.Category", in)
	out := new(DisplayCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) SpecDetail(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplaySpecDetailResponse, error) {
	req := c.c.NewRequest(c.name, "DisplayService.SpecDetail", in)
	out := new(DisplaySpecDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *displayService) SpecType(ctx context.Context, in *DisplayRequest, opts ...client.CallOption) (*DisplaySpecTypeResponse, error) {
	req := c.c.NewRequest(c.name, "DisplayService.SpecType", in)
	out := new(DisplaySpecTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DisplayService service

type DisplayServiceHandler interface {
	//商品搜索初始化
	Index(context.Context, *DisplayRequest, *DisplayIndexResponse) error
	//商品搜索列表
	List(context.Context, *DisplayRequest, *DisplayListResponse) error
	//商品详情页
	Detail(context.Context, *DisplayRequest, *DisplayDetailResponse) error
	//分类导航页
	Category(context.Context, *DisplayRequest, *DisplayCategoryResponse) error
	//规格详情数据(单规格和多规格)
	SpecDetail(context.Context, *DisplayRequest, *DisplaySpecDetailResponse) error
	//规格类型数据
	SpecType(context.Context, *DisplayRequest, *DisplaySpecTypeResponse) error
}

func RegisterDisplayServiceHandler(s server.Server, hdlr DisplayServiceHandler, opts ...server.HandlerOption) error {
	type displayService interface {
		Index(ctx context.Context, in *DisplayRequest, out *DisplayIndexResponse) error
		List(ctx context.Context, in *DisplayRequest, out *DisplayListResponse) error
		Detail(ctx context.Context, in *DisplayRequest, out *DisplayDetailResponse) error
		Category(ctx context.Context, in *DisplayRequest, out *DisplayCategoryResponse) error
		SpecDetail(ctx context.Context, in *DisplayRequest, out *DisplaySpecDetailResponse) error
		SpecType(ctx context.Context, in *DisplayRequest, out *DisplaySpecTypeResponse) error
	}
	type DisplayService struct {
		displayService
	}
	h := &displayServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DisplayService{h}, opts...))
}

type displayServiceHandler struct {
	DisplayServiceHandler
}

func (h *displayServiceHandler) Index(ctx context.Context, in *DisplayRequest, out *DisplayIndexResponse) error {
	return h.DisplayServiceHandler.Index(ctx, in, out)
}

func (h *displayServiceHandler) List(ctx context.Context, in *DisplayRequest, out *DisplayListResponse) error {
	return h.DisplayServiceHandler.List(ctx, in, out)
}

func (h *displayServiceHandler) Detail(ctx context.Context, in *DisplayRequest, out *DisplayDetailResponse) error {
	return h.DisplayServiceHandler.Detail(ctx, in, out)
}

func (h *displayServiceHandler) Category(ctx context.Context, in *DisplayRequest, out *DisplayCategoryResponse) error {
	return h.DisplayServiceHandler.Category(ctx, in, out)
}

func (h *displayServiceHandler) SpecDetail(ctx context.Context, in *DisplayRequest, out *DisplaySpecDetailResponse) error {
	return h.DisplayServiceHandler.SpecDetail(ctx, in, out)
}

func (h *displayServiceHandler) SpecType(ctx context.Context, in *DisplayRequest, out *DisplaySpecTypeResponse) error {
	return h.DisplayServiceHandler.SpecType(ctx, in, out)
}
