// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: collectService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CollectService service

func NewCollectServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CollectService service

type CollectService interface {
	Create(ctx context.Context, in *Collect, opts ...client.CallOption) (*CollectResponse, error)
	Delete(ctx context.Context, in *Collect, opts ...client.CallOption) (*CollectResponse, error)
	Search(ctx context.Context, in *CollectRequest, opts ...client.CallOption) (*CollectResponse, error)
}

type collectService struct {
	c    client.Client
	name string
}

func NewCollectService(name string, c client.Client) CollectService {
	return &collectService{
		c:    c,
		name: name,
	}
}

func (c *collectService) Create(ctx context.Context, in *Collect, opts ...client.CallOption) (*CollectResponse, error) {
	req := c.c.NewRequest(c.name, "CollectService.Create", in)
	out := new(CollectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectService) Delete(ctx context.Context, in *Collect, opts ...client.CallOption) (*CollectResponse, error) {
	req := c.c.NewRequest(c.name, "CollectService.Delete", in)
	out := new(CollectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectService) Search(ctx context.Context, in *CollectRequest, opts ...client.CallOption) (*CollectResponse, error) {
	req := c.c.NewRequest(c.name, "CollectService.Search", in)
	out := new(CollectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CollectService service

type CollectServiceHandler interface {
	Create(context.Context, *Collect, *CollectResponse) error
	Delete(context.Context, *Collect, *CollectResponse) error
	Search(context.Context, *CollectRequest, *CollectResponse) error
}

func RegisterCollectServiceHandler(s server.Server, hdlr CollectServiceHandler, opts ...server.HandlerOption) error {
	type collectService interface {
		Create(ctx context.Context, in *Collect, out *CollectResponse) error
		Delete(ctx context.Context, in *Collect, out *CollectResponse) error
		Search(ctx context.Context, in *CollectRequest, out *CollectResponse) error
	}
	type CollectService struct {
		collectService
	}
	h := &collectServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CollectService{h}, opts...))
}

type collectServiceHandler struct {
	CollectServiceHandler
}

func (h *collectServiceHandler) Create(ctx context.Context, in *Collect, out *CollectResponse) error {
	return h.CollectServiceHandler.Create(ctx, in, out)
}

func (h *collectServiceHandler) Delete(ctx context.Context, in *Collect, out *CollectResponse) error {
	return h.CollectServiceHandler.Delete(ctx, in, out)
}

func (h *collectServiceHandler) Search(ctx context.Context, in *CollectRequest, out *CollectResponse) error {
	return h.CollectServiceHandler.Search(ctx, in, out)
}
