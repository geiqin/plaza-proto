// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: searchService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SearchService service

func NewSearchServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SearchService service

type SearchService interface {
	//商品搜索初始化
	Index(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchIndexResponse, error)
	//商品搜索列表
	List(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchListResponse, error)
	//商品详情页
	Detail(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchDetailResponse, error)
	//分类导航页
	Category(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchCategoryResponse, error)
	//规格详情数据
	SpecDetail(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchSpecDetailResponse, error)
	//规格类型数据
	SpecType(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchSpecTypeResponse, error)
}

type searchService struct {
	c    client.Client
	name string
}

func NewSearchService(name string, c client.Client) SearchService {
	return &searchService{
		c:    c,
		name: name,
	}
}

func (c *searchService) Index(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchIndexResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.Index", in)
	out := new(SearchIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) List(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchListResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.List", in)
	out := new(SearchListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) Detail(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchDetailResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.Detail", in)
	out := new(SearchDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) Category(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.Category", in)
	out := new(SearchCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) SpecDetail(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchSpecDetailResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.SpecDetail", in)
	out := new(SearchSpecDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchService) SpecType(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchSpecTypeResponse, error) {
	req := c.c.NewRequest(c.name, "SearchService.SpecType", in)
	out := new(SearchSpecTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchService service

type SearchServiceHandler interface {
	//商品搜索初始化
	Index(context.Context, *SearchRequest, *SearchIndexResponse) error
	//商品搜索列表
	List(context.Context, *SearchRequest, *SearchListResponse) error
	//商品详情页
	Detail(context.Context, *SearchRequest, *SearchDetailResponse) error
	//分类导航页
	Category(context.Context, *SearchRequest, *SearchCategoryResponse) error
	//规格详情数据
	SpecDetail(context.Context, *SearchRequest, *SearchSpecDetailResponse) error
	//规格类型数据
	SpecType(context.Context, *SearchRequest, *SearchSpecTypeResponse) error
}

func RegisterSearchServiceHandler(s server.Server, hdlr SearchServiceHandler, opts ...server.HandlerOption) error {
	type searchService interface {
		Index(ctx context.Context, in *SearchRequest, out *SearchIndexResponse) error
		List(ctx context.Context, in *SearchRequest, out *SearchListResponse) error
		Detail(ctx context.Context, in *SearchRequest, out *SearchDetailResponse) error
		Category(ctx context.Context, in *SearchRequest, out *SearchCategoryResponse) error
		SpecDetail(ctx context.Context, in *SearchRequest, out *SearchSpecDetailResponse) error
		SpecType(ctx context.Context, in *SearchRequest, out *SearchSpecTypeResponse) error
	}
	type SearchService struct {
		searchService
	}
	h := &searchServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SearchService{h}, opts...))
}

type searchServiceHandler struct {
	SearchServiceHandler
}

func (h *searchServiceHandler) Index(ctx context.Context, in *SearchRequest, out *SearchIndexResponse) error {
	return h.SearchServiceHandler.Index(ctx, in, out)
}

func (h *searchServiceHandler) List(ctx context.Context, in *SearchRequest, out *SearchListResponse) error {
	return h.SearchServiceHandler.List(ctx, in, out)
}

func (h *searchServiceHandler) Detail(ctx context.Context, in *SearchRequest, out *SearchDetailResponse) error {
	return h.SearchServiceHandler.Detail(ctx, in, out)
}

func (h *searchServiceHandler) Category(ctx context.Context, in *SearchRequest, out *SearchCategoryResponse) error {
	return h.SearchServiceHandler.Category(ctx, in, out)
}

func (h *searchServiceHandler) SpecDetail(ctx context.Context, in *SearchRequest, out *SearchSpecDetailResponse) error {
	return h.SearchServiceHandler.SpecDetail(ctx, in, out)
}

func (h *searchServiceHandler) SpecType(ctx context.Context, in *SearchRequest, out *SearchSpecTypeResponse) error {
	return h.SearchServiceHandler.SpecType(ctx, in, out)
}
