// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: innerGoodsService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for InnerGoodsService service

func NewInnerGoodsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for InnerGoodsService service

type InnerGoodsService interface {
	//获取商品（简单的）
	Get(ctx context.Context, in *InnerGoodsRequest, opts ...client.CallOption) (*InnerGoodsResponse, error)
	//商品详情（详细的）
	Detail(ctx context.Context, in *InnerGoodsRequest, opts ...client.CallOption) (*InnerGoodsResponse, error)
	//商品列表
	List(ctx context.Context, in *InnerGoodsRequest, opts ...client.CallOption) (*InnerGoodsResponse, error)
}

type innerGoodsService struct {
	c    client.Client
	name string
}

func NewInnerGoodsService(name string, c client.Client) InnerGoodsService {
	return &innerGoodsService{
		c:    c,
		name: name,
	}
}

func (c *innerGoodsService) Get(ctx context.Context, in *InnerGoodsRequest, opts ...client.CallOption) (*InnerGoodsResponse, error) {
	req := c.c.NewRequest(c.name, "InnerGoodsService.Get", in)
	out := new(InnerGoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *innerGoodsService) Detail(ctx context.Context, in *InnerGoodsRequest, opts ...client.CallOption) (*InnerGoodsResponse, error) {
	req := c.c.NewRequest(c.name, "InnerGoodsService.Detail", in)
	out := new(InnerGoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *innerGoodsService) List(ctx context.Context, in *InnerGoodsRequest, opts ...client.CallOption) (*InnerGoodsResponse, error) {
	req := c.c.NewRequest(c.name, "InnerGoodsService.List", in)
	out := new(InnerGoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InnerGoodsService service

type InnerGoodsServiceHandler interface {
	//获取商品（简单的）
	Get(context.Context, *InnerGoodsRequest, *InnerGoodsResponse) error
	//商品详情（详细的）
	Detail(context.Context, *InnerGoodsRequest, *InnerGoodsResponse) error
	//商品列表
	List(context.Context, *InnerGoodsRequest, *InnerGoodsResponse) error
}

func RegisterInnerGoodsServiceHandler(s server.Server, hdlr InnerGoodsServiceHandler, opts ...server.HandlerOption) error {
	type innerGoodsService interface {
		Get(ctx context.Context, in *InnerGoodsRequest, out *InnerGoodsResponse) error
		Detail(ctx context.Context, in *InnerGoodsRequest, out *InnerGoodsResponse) error
		List(ctx context.Context, in *InnerGoodsRequest, out *InnerGoodsResponse) error
	}
	type InnerGoodsService struct {
		innerGoodsService
	}
	h := &innerGoodsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&InnerGoodsService{h}, opts...))
}

type innerGoodsServiceHandler struct {
	InnerGoodsServiceHandler
}

func (h *innerGoodsServiceHandler) Get(ctx context.Context, in *InnerGoodsRequest, out *InnerGoodsResponse) error {
	return h.InnerGoodsServiceHandler.Get(ctx, in, out)
}

func (h *innerGoodsServiceHandler) Detail(ctx context.Context, in *InnerGoodsRequest, out *InnerGoodsResponse) error {
	return h.InnerGoodsServiceHandler.Detail(ctx, in, out)
}

func (h *innerGoodsServiceHandler) List(ctx context.Context, in *InnerGoodsRequest, out *InnerGoodsResponse) error {
	return h.InnerGoodsServiceHandler.List(ctx, in, out)
}
