// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: skuService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Sku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SpuId          int64            `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`
	SkuSn          string           `protobuf:"bytes,3,opt,name=sku_sn,json=skuSn,proto3" json:"sku_sn"`
	Title          string           `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	Type           string           `protobuf:"bytes,5,opt,name=type,proto3" json:"type"`
	UnitId         int32            `protobuf:"varint,6,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`
	ShopId         int64            `protobuf:"varint,7,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`
	ImageId        int64            `protobuf:"varint,8,opt,name=image_id,json=imageId,proto3" json:"image_id"`
	ImageUrl       string           `protobuf:"bytes,9,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	Price          float32          `protobuf:"fixed32,10,opt,name=price,proto3" json:"price"`
	MarketPrice    float32          `protobuf:"fixed32,11,opt,name=market_price,json=marketPrice,proto3" json:"market_price"`
	CostPrice      float32          `protobuf:"fixed32,12,opt,name=cost_price,json=costPrice,proto3" json:"cost_price"`
	PromotionPrice float32          `protobuf:"fixed32,13,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price"`
	Barcode        string           `protobuf:"bytes,14,opt,name=barcode,proto3" json:"barcode"`
	Weight         float32          `protobuf:"fixed32,15,opt,name=weight,proto3" json:"weight"`
	Volume         int32            `protobuf:"varint,16,opt,name=volume,proto3" json:"volume"`
	Stock          int32            `protobuf:"varint,17,opt,name=stock,proto3" json:"stock"`
	FrozenStock    int32            `protobuf:"varint,18,opt,name=frozen_stock,json=frozenStock,proto3" json:"frozen_stock"`
	OutSkuNo       string           `protobuf:"bytes,19,opt,name=out_sku_no,json=outSkuNo,proto3" json:"out_sku_no"`
	IsSpec         bool             `protobuf:"varint,20,opt,name=is_spec,json=isSpec,proto3" json:"is_spec"`
	IsVirtual      bool             `protobuf:"varint,21,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`
	IsPresale      bool             `protobuf:"varint,22,opt,name=is_presale,json=isPresale,proto3" json:"is_presale"`
	IsMemberRight  bool             `protobuf:"varint,23,opt,name=is_member_right,json=isMemberRight,proto3" json:"is_member_right"`
	IsMemberPrice  bool             `protobuf:"varint,24,opt,name=is_member_price,json=isMemberPrice,proto3" json:"is_member_price"`
	IsHideStock    bool             `protobuf:"varint,25,opt,name=is_hide_stock,json=isHideStock,proto3" json:"is_hide_stock"`
	IsListed       bool             `protobuf:"varint,26,opt,name=is_listed,json=isListed,proto3" json:"is_listed"`
	IsNew          bool             `protobuf:"varint,27,opt,name=is_new,json=isNew,proto3" json:"is_new"`
	IsHot          bool             `protobuf:"varint,28,opt,name=is_hot,json=isHot,proto3" json:"is_hot"`
	IsRecommend    bool             `protobuf:"varint,29,opt,name=is_recommend,json=isRecommend,proto3" json:"is_recommend"`
	IsSpecial      bool             `protobuf:"varint,30,opt,name=is_special,json=isSpecial,proto3" json:"is_special"`
	IsMaster       bool             `protobuf:"varint,31,opt,name=is_master,json=isMaster,proto3" json:"is_master"`
	Status         string           `protobuf:"bytes,32,opt,name=status,proto3" json:"status"`
	ListedAt       string           `protobuf:"bytes,33,opt,name=listed_at,json=listedAt,proto3" json:"listed_at"`
	CreatedAt      string           `protobuf:"bytes,34,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt      string           `protobuf:"bytes,35,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Indexes        []int32          `protobuf:"varint,36,rep,packed,name=indexes,proto3" json:"indexes"`
	OwnDesc        map[int32]string `protobuf:"bytes,37,rep,name=own_desc,json=ownDesc,proto3" json:"own_desc" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Unit           *Unit            `protobuf:"bytes,38,opt,name=unit,proto3" json:"unit"`
	Spu            *Spu             `protobuf:"bytes,39,opt,name=spu,proto3" json:"spu"`
	Vip            *SkuVip          `protobuf:"bytes,40,opt,name=vip,proto3" json:"vip"`
	Coupon         *SkuCoupon       `protobuf:"bytes,41,opt,name=coupon,proto3" json:"coupon"`
	Presale        *SkuPresale      `protobuf:"bytes,42,opt,name=presale,proto3" json:"presale"`
	Galleries      []*SpuGallery    `protobuf:"bytes,43,rep,name=galleries,proto3" json:"galleries"`
}

func (x *Sku) Reset() {
	*x = Sku{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skuService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sku) ProtoMessage() {}

func (x *Sku) ProtoReflect() protoreflect.Message {
	mi := &file_skuService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sku.ProtoReflect.Descriptor instead.
func (*Sku) Descriptor() ([]byte, []int) {
	return file_skuService_proto_rawDescGZIP(), []int{0}
}

func (x *Sku) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sku) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *Sku) GetSkuSn() string {
	if x != nil {
		return x.SkuSn
	}
	return ""
}

func (x *Sku) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Sku) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Sku) GetUnitId() int32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *Sku) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *Sku) GetImageId() int64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *Sku) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Sku) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Sku) GetMarketPrice() float32 {
	if x != nil {
		return x.MarketPrice
	}
	return 0
}

func (x *Sku) GetCostPrice() float32 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *Sku) GetPromotionPrice() float32 {
	if x != nil {
		return x.PromotionPrice
	}
	return 0
}

func (x *Sku) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *Sku) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Sku) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Sku) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *Sku) GetFrozenStock() int32 {
	if x != nil {
		return x.FrozenStock
	}
	return 0
}

func (x *Sku) GetOutSkuNo() string {
	if x != nil {
		return x.OutSkuNo
	}
	return ""
}

func (x *Sku) GetIsSpec() bool {
	if x != nil {
		return x.IsSpec
	}
	return false
}

func (x *Sku) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

func (x *Sku) GetIsPresale() bool {
	if x != nil {
		return x.IsPresale
	}
	return false
}

func (x *Sku) GetIsMemberRight() bool {
	if x != nil {
		return x.IsMemberRight
	}
	return false
}

func (x *Sku) GetIsMemberPrice() bool {
	if x != nil {
		return x.IsMemberPrice
	}
	return false
}

func (x *Sku) GetIsHideStock() bool {
	if x != nil {
		return x.IsHideStock
	}
	return false
}

func (x *Sku) GetIsListed() bool {
	if x != nil {
		return x.IsListed
	}
	return false
}

func (x *Sku) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *Sku) GetIsHot() bool {
	if x != nil {
		return x.IsHot
	}
	return false
}

func (x *Sku) GetIsRecommend() bool {
	if x != nil {
		return x.IsRecommend
	}
	return false
}

func (x *Sku) GetIsSpecial() bool {
	if x != nil {
		return x.IsSpecial
	}
	return false
}

func (x *Sku) GetIsMaster() bool {
	if x != nil {
		return x.IsMaster
	}
	return false
}

func (x *Sku) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Sku) GetListedAt() string {
	if x != nil {
		return x.ListedAt
	}
	return ""
}

func (x *Sku) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Sku) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Sku) GetIndexes() []int32 {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *Sku) GetOwnDesc() map[int32]string {
	if x != nil {
		return x.OwnDesc
	}
	return nil
}

func (x *Sku) GetUnit() *Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Sku) GetSpu() *Spu {
	if x != nil {
		return x.Spu
	}
	return nil
}

func (x *Sku) GetVip() *SkuVip {
	if x != nil {
		return x.Vip
	}
	return nil
}

func (x *Sku) GetCoupon() *SkuCoupon {
	if x != nil {
		return x.Coupon
	}
	return nil
}

func (x *Sku) GetPresale() *SkuPresale {
	if x != nil {
		return x.Presale
	}
	return nil
}

func (x *Sku) GetGalleries() []*SpuGallery {
	if x != nil {
		return x.Galleries
	}
	return nil
}

type Spu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Code         string        `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
	Title        string        `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	Type         string        `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	UnitId       int32         `protobuf:"varint,5,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`
	CategoryId   int32         `protobuf:"varint,6,opt,name=category_id,json=categoryId,proto3" json:"category_id"`
	CategoryIds  string        `protobuf:"bytes,7,opt,name=category_ids,json=categoryIds,proto3" json:"category_ids"`
	BrandId      int32         `protobuf:"varint,8,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`
	ShopId       int64         `protobuf:"varint,9,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`
	MaxBuy       int32         `protobuf:"varint,10,opt,name=max_buy,json=maxBuy,proto3" json:"max_buy"`
	MinBuy       int32         `protobuf:"varint,11,opt,name=min_buy,json=minBuy,proto3" json:"min_buy"`
	ProvinceId   int64         `protobuf:"varint,12,opt,name=province_id,json=provinceId,proto3" json:"province_id"`
	CityId       int64         `protobuf:"varint,13,opt,name=city_id,json=cityId,proto3" json:"city_id"`
	ThumbId      int64         `protobuf:"varint,14,opt,name=thumb_id,json=thumbId,proto3" json:"thumb_id"`
	ThumbUrl     string        `protobuf:"bytes,15,opt,name=thumb_url,json=thumbUrl,proto3" json:"thumb_url"`
	VideoId      int64         `protobuf:"varint,16,opt,name=video_id,json=videoId,proto3" json:"video_id"`
	VideoUrl     string        `protobuf:"bytes,17,opt,name=video_url,json=videoUrl,proto3" json:"video_url"`
	TemplateId   int32         `protobuf:"varint,18,opt,name=template_id,json=templateId,proto3" json:"template_id"`
	Keywords     string        `protobuf:"bytes,19,opt,name=keywords,proto3" json:"keywords"`
	OutSpuNo     string        `protobuf:"bytes,20,opt,name=out_spu_no,json=outSpuNo,proto3" json:"out_spu_no"`
	MinPrice     float32       `protobuf:"fixed32,21,opt,name=min_price,json=minPrice,proto3" json:"min_price"`
	MaxPrice     float32       `protobuf:"fixed32,22,opt,name=max_price,json=maxPrice,proto3" json:"max_price"`
	Stocks       int32         `protobuf:"varint,23,opt,name=stocks,proto3" json:"stocks"`
	Collects     int32         `protobuf:"varint,24,opt,name=collects,proto3" json:"collects"`
	Evaluates    int32         `protobuf:"varint,25,opt,name=evaluates,proto3" json:"evaluates"`
	Shares       int32         `protobuf:"varint,26,opt,name=shares,proto3" json:"shares"`
	Clicks       int32         `protobuf:"varint,27,opt,name=clicks,proto3" json:"clicks"`
	Sales        int32         `protobuf:"varint,28,opt,name=sales,proto3" json:"sales"`
	SaleInitial  int32         `protobuf:"varint,29,opt,name=sale_initial,json=saleInitial,proto3" json:"sale_initial"`
	SaleActual   int32         `protobuf:"varint,30,opt,name=sale_actual,json=saleActual,proto3" json:"sale_actual"`
	ChildNum     int32         `protobuf:"varint,31,opt,name=child_num,json=childNum,proto3" json:"child_num"`
	Sort         int32         `protobuf:"varint,32,opt,name=sort,proto3" json:"sort"`
	Memo         string        `protobuf:"bytes,33,opt,name=memo,proto3" json:"memo"`
	Status       string        `protobuf:"bytes,34,opt,name=status,proto3" json:"status"`
	CreatedAt    string        `protobuf:"bytes,35,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt    string        `protobuf:"bytes,36,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Desc         *SpuDesc      `protobuf:"bytes,37,opt,name=desc,proto3" json:"desc"`
	Brand        *Brand        `protobuf:"bytes,38,opt,name=brand,proto3" json:"brand"`
	PropertyDesc *Property     `protobuf:"bytes,39,opt,name=property_desc,json=propertyDesc,proto3" json:"property_desc"`
	SpecDesc     *Spec         `protobuf:"bytes,40,opt,name=spec_desc,json=specDesc,proto3" json:"spec_desc"`
	Terms        []*Term       `protobuf:"bytes,41,rep,name=terms,proto3" json:"terms"`
	Tags         []*Tag        `protobuf:"bytes,42,rep,name=tags,proto3" json:"tags"`
	Skus         []*Sku        `protobuf:"bytes,43,rep,name=skus,proto3" json:"skus"`
	Galleries    []*SpuGallery `protobuf:"bytes,44,rep,name=galleries,proto3" json:"galleries"`
}

func (x *Spu) Reset() {
	*x = Spu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skuService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spu) ProtoMessage() {}

func (x *Spu) ProtoReflect() protoreflect.Message {
	mi := &file_skuService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spu.ProtoReflect.Descriptor instead.
func (*Spu) Descriptor() ([]byte, []int) {
	return file_skuService_proto_rawDescGZIP(), []int{1}
}

func (x *Spu) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Spu) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Spu) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Spu) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Spu) GetUnitId() int32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *Spu) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Spu) GetCategoryIds() string {
	if x != nil {
		return x.CategoryIds
	}
	return ""
}

func (x *Spu) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *Spu) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *Spu) GetMaxBuy() int32 {
	if x != nil {
		return x.MaxBuy
	}
	return 0
}

func (x *Spu) GetMinBuy() int32 {
	if x != nil {
		return x.MinBuy
	}
	return 0
}

func (x *Spu) GetProvinceId() int64 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *Spu) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *Spu) GetThumbId() int64 {
	if x != nil {
		return x.ThumbId
	}
	return 0
}

func (x *Spu) GetThumbUrl() string {
	if x != nil {
		return x.ThumbUrl
	}
	return ""
}

func (x *Spu) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *Spu) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *Spu) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *Spu) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *Spu) GetOutSpuNo() string {
	if x != nil {
		return x.OutSpuNo
	}
	return ""
}

func (x *Spu) GetMinPrice() float32 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *Spu) GetMaxPrice() float32 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *Spu) GetStocks() int32 {
	if x != nil {
		return x.Stocks
	}
	return 0
}

func (x *Spu) GetCollects() int32 {
	if x != nil {
		return x.Collects
	}
	return 0
}

func (x *Spu) GetEvaluates() int32 {
	if x != nil {
		return x.Evaluates
	}
	return 0
}

func (x *Spu) GetShares() int32 {
	if x != nil {
		return x.Shares
	}
	return 0
}

func (x *Spu) GetClicks() int32 {
	if x != nil {
		return x.Clicks
	}
	return 0
}

func (x *Spu) GetSales() int32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *Spu) GetSaleInitial() int32 {
	if x != nil {
		return x.SaleInitial
	}
	return 0
}

func (x *Spu) GetSaleActual() int32 {
	if x != nil {
		return x.SaleActual
	}
	return 0
}

func (x *Spu) GetChildNum() int32 {
	if x != nil {
		return x.ChildNum
	}
	return 0
}

func (x *Spu) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Spu) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Spu) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Spu) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Spu) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Spu) GetDesc() *SpuDesc {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *Spu) GetBrand() *Brand {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Spu) GetPropertyDesc() *Property {
	if x != nil {
		return x.PropertyDesc
	}
	return nil
}

func (x *Spu) GetSpecDesc() *Spec {
	if x != nil {
		return x.SpecDesc
	}
	return nil
}

func (x *Spu) GetTerms() []*Term {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *Spu) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Spu) GetSkus() []*Sku {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *Spu) GetGalleries() []*SpuGallery {
	if x != nil {
		return x.Galleries
	}
	return nil
}

type SkuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged      int32   `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize   int32   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords   string  `protobuf:"bytes,3,opt,name=keywords,proto3" json:"keywords"`
	SkuId      int64   `protobuf:"varint,8,opt,name=sku_id,json=skuId,proto3" json:"sku_id"`
	SkuSn      string  `protobuf:"bytes,9,opt,name=sku_sn,json=skuSn,proto3" json:"sku_sn"`
	SpuId      int64   `protobuf:"varint,4,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`
	Code       string  `protobuf:"bytes,5,opt,name=code,proto3" json:"code"`
	Title      string  `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`
	Type       string  `protobuf:"bytes,7,opt,name=type,proto3" json:"type"`
	CategoryId int32   `protobuf:"varint,10,opt,name=category_id,json=categoryId,proto3" json:"category_id"`
	BrandId    int32   `protobuf:"varint,11,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`
	ShopId     int64   `protobuf:"varint,12,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`
	Status     string  `protobuf:"bytes,13,opt,name=status,proto3" json:"status"`
	StartDate  string  `protobuf:"bytes,14,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate    string  `protobuf:"bytes,15,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	SpuIds     []int64 `protobuf:"varint,16,rep,packed,name=spu_ids,json=spuIds,proto3" json:"spu_ids"`
	SkuIds     []int64 `protobuf:"varint,17,rep,packed,name=sku_ids,json=skuIds,proto3" json:"sku_ids"`
}

func (x *SkuRequest) Reset() {
	*x = SkuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skuService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuRequest) ProtoMessage() {}

func (x *SkuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_skuService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuRequest.ProtoReflect.Descriptor instead.
func (*SkuRequest) Descriptor() ([]byte, []int) {
	return file_skuService_proto_rawDescGZIP(), []int{2}
}

func (x *SkuRequest) GetPaged() int32 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *SkuRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SkuRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *SkuRequest) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *SkuRequest) GetSkuSn() string {
	if x != nil {
		return x.SkuSn
	}
	return ""
}

func (x *SkuRequest) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SkuRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SkuRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SkuRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SkuRequest) GetCategoryId() int32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SkuRequest) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *SkuRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *SkuRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SkuRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SkuRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SkuRequest) GetSpuIds() []int64 {
	if x != nil {
		return x.SpuIds
	}
	return nil
}

func (x *SkuRequest) GetSkuIds() []int64 {
	if x != nil {
		return x.SkuIds
	}
	return nil
}

type SkuData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spu   *Spu          `protobuf:"bytes,1,opt,name=spu,proto3" json:"spu"`
	Sku   *Sku          `protobuf:"bytes,2,opt,name=sku,proto3" json:"sku"`
	Pager *common.Pager `protobuf:"bytes,3,opt,name=pager,proto3" json:"pager"`
	Items []*Sku        `protobuf:"bytes,4,rep,name=items,proto3" json:"items"`
	Info  *common.Info  `protobuf:"bytes,5,opt,name=info,proto3" json:"info"`
}

func (x *SkuData) Reset() {
	*x = SkuData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skuService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuData) ProtoMessage() {}

func (x *SkuData) ProtoReflect() protoreflect.Message {
	mi := &file_skuService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuData.ProtoReflect.Descriptor instead.
func (*SkuData) Descriptor() ([]byte, []int) {
	return file_skuService_proto_rawDescGZIP(), []int{3}
}

func (x *SkuData) GetSpu() *Spu {
	if x != nil {
		return x.Spu
	}
	return nil
}

func (x *SkuData) GetSku() *Sku {
	if x != nil {
		return x.Sku
	}
	return nil
}

func (x *SkuData) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *SkuData) GetItems() []*Sku {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SkuData) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type SkuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *SkuData      `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Error *common.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
}

func (x *SkuResponse) Reset() {
	*x = SkuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skuService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuResponse) ProtoMessage() {}

func (x *SkuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_skuService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuResponse.ProtoReflect.Descriptor instead.
func (*SkuResponse) Descriptor() ([]byte, []int) {
	return file_skuService_proto_rawDescGZIP(), []int{4}
}

func (x *SkuResponse) GetData() *SkuData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SkuResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_skuService_proto protoreflect.FileDescriptor

var file_skuService_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x6b, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x73, 0x70, 0x75, 0x44, 0x65, 0x73, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x65, 0x72, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x61,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x73, 0x70, 0x75, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x6b, 0x75, 0x56,
	0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x73, 0x6b, 0x75, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x6b, 0x75, 0x50, 0x72, 0x65, 0x73,
	0x61, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe8, 0x0a, 0x0a, 0x03, 0x53, 0x6b, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x6b, 0x75, 0x53, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1c,
	0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x53, 0x6b, 0x75, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x61,
	0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x73,
	0x61, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x69,
	0x64, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x68, 0x6f, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48,
	0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x24, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x2e,
	0x4f, 0x77, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x03, 0x73, 0x70, 0x75,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x03, 0x73, 0x70, 0x75, 0x12, 0x22, 0x0a, 0x03, 0x76, 0x69,
	0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x56, 0x69, 0x70, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x2b,
	0x0a, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x50, 0x72, 0x65, 0x73, 0x61,
	0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x4f, 0x77, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x0a, 0x0a, 0x03,
	0x53, 0x70, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x42, 0x75, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x53, 0x70, 0x75, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24,
	0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x05, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x2a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18,
	0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x6b, 0x75, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x52, 0x09, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xb7,
	0x03, 0x0a, 0x0a, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b,
	0x75, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x73, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x53, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x73, 0x70, 0x75, 0x49, 0x64, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x07, 0x53, 0x6b, 0x75,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75,
	0x52, 0x03, 0x73, 0x70, 0x75, 0x12, 0x1f, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b,
	0x75, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x59, 0x0a, 0x0b, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xea, 0x02,
	0x0a, 0x0a, 0x53, 0x70, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b,
	0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x6b, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa9, 0x03, 0x0a, 0x0a, 0x53,
	0x6b, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x6b, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b,
	0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x6b, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b,
	0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x6b, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b,
	0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x1a,
	0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_skuService_proto_rawDescOnce sync.Once
	file_skuService_proto_rawDescData = file_skuService_proto_rawDesc
)

func file_skuService_proto_rawDescGZIP() []byte {
	file_skuService_proto_rawDescOnce.Do(func() {
		file_skuService_proto_rawDescData = protoimpl.X.CompressGZIP(file_skuService_proto_rawDescData)
	})
	return file_skuService_proto_rawDescData
}

var file_skuService_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_skuService_proto_goTypes = []interface{}{
	(*Sku)(nil),          // 0: services.Sku
	(*Spu)(nil),          // 1: services.Spu
	(*SkuRequest)(nil),   // 2: services.SkuRequest
	(*SkuData)(nil),      // 3: services.SkuData
	(*SkuResponse)(nil),  // 4: services.SkuResponse
	nil,                  // 5: services.Sku.OwnDescEntry
	(*Unit)(nil),         // 6: services.Unit
	(*SkuVip)(nil),       // 7: services.SkuVip
	(*SkuCoupon)(nil),    // 8: services.SkuCoupon
	(*SkuPresale)(nil),   // 9: services.SkuPresale
	(*SpuGallery)(nil),   // 10: services.SpuGallery
	(*SpuDesc)(nil),      // 11: services.SpuDesc
	(*Brand)(nil),        // 12: services.Brand
	(*Property)(nil),     // 13: services.Property
	(*Spec)(nil),         // 14: services.Spec
	(*Term)(nil),         // 15: services.Term
	(*Tag)(nil),          // 16: services.Tag
	(*common.Pager)(nil), // 17: common.Pager
	(*common.Info)(nil),  // 18: common.Info
	(*common.Error)(nil), // 19: common.Error
}
var file_skuService_proto_depIdxs = []int32{
	5,  // 0: services.Sku.own_desc:type_name -> services.Sku.OwnDescEntry
	6,  // 1: services.Sku.unit:type_name -> services.Unit
	1,  // 2: services.Sku.spu:type_name -> services.Spu
	7,  // 3: services.Sku.vip:type_name -> services.SkuVip
	8,  // 4: services.Sku.coupon:type_name -> services.SkuCoupon
	9,  // 5: services.Sku.presale:type_name -> services.SkuPresale
	10, // 6: services.Sku.galleries:type_name -> services.SpuGallery
	11, // 7: services.Spu.desc:type_name -> services.SpuDesc
	12, // 8: services.Spu.brand:type_name -> services.Brand
	13, // 9: services.Spu.property_desc:type_name -> services.Property
	14, // 10: services.Spu.spec_desc:type_name -> services.Spec
	15, // 11: services.Spu.terms:type_name -> services.Term
	16, // 12: services.Spu.tags:type_name -> services.Tag
	0,  // 13: services.Spu.skus:type_name -> services.Sku
	10, // 14: services.Spu.galleries:type_name -> services.SpuGallery
	1,  // 15: services.SkuData.spu:type_name -> services.Spu
	0,  // 16: services.SkuData.sku:type_name -> services.Sku
	17, // 17: services.SkuData.pager:type_name -> common.Pager
	0,  // 18: services.SkuData.items:type_name -> services.Sku
	18, // 19: services.SkuData.info:type_name -> common.Info
	3,  // 20: services.SkuResponse.data:type_name -> services.SkuData
	19, // 21: services.SkuResponse.error:type_name -> common.Error
	1,  // 22: services.SpuService.Create:input_type -> services.Spu
	1,  // 23: services.SpuService.Update:input_type -> services.Spu
	1,  // 24: services.SpuService.Delete:input_type -> services.Spu
	1,  // 25: services.SpuService.Get:input_type -> services.Spu
	2,  // 26: services.SpuService.Action:input_type -> services.SkuRequest
	2,  // 27: services.SpuService.Sale:input_type -> services.SkuRequest
	2,  // 28: services.SpuService.Sort:input_type -> services.SkuRequest
	0,  // 29: services.SkuService.Create:input_type -> services.Sku
	0,  // 30: services.SkuService.Update:input_type -> services.Sku
	0,  // 31: services.SkuService.Delete:input_type -> services.Sku
	0,  // 32: services.SkuService.Get:input_type -> services.Sku
	2,  // 33: services.SkuService.List:input_type -> services.SkuRequest
	2,  // 34: services.SkuService.Search:input_type -> services.SkuRequest
	2,  // 35: services.SkuService.GoodsSearch:input_type -> services.SkuRequest
	2,  // 36: services.SkuService.Display:input_type -> services.SkuRequest
	4,  // 37: services.SpuService.Create:output_type -> services.SkuResponse
	4,  // 38: services.SpuService.Update:output_type -> services.SkuResponse
	4,  // 39: services.SpuService.Delete:output_type -> services.SkuResponse
	4,  // 40: services.SpuService.Get:output_type -> services.SkuResponse
	4,  // 41: services.SpuService.Action:output_type -> services.SkuResponse
	4,  // 42: services.SpuService.Sale:output_type -> services.SkuResponse
	4,  // 43: services.SpuService.Sort:output_type -> services.SkuResponse
	4,  // 44: services.SkuService.Create:output_type -> services.SkuResponse
	4,  // 45: services.SkuService.Update:output_type -> services.SkuResponse
	4,  // 46: services.SkuService.Delete:output_type -> services.SkuResponse
	4,  // 47: services.SkuService.Get:output_type -> services.SkuResponse
	4,  // 48: services.SkuService.List:output_type -> services.SkuResponse
	4,  // 49: services.SkuService.Search:output_type -> services.SkuResponse
	4,  // 50: services.SkuService.GoodsSearch:output_type -> services.SkuResponse
	4,  // 51: services.SkuService.Display:output_type -> services.SkuResponse
	37, // [37:52] is the sub-list for method output_type
	22, // [22:37] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_skuService_proto_init() }
func file_skuService_proto_init() {
	if File_skuService_proto != nil {
		return
	}
	file_spuDescService_proto_init()
	file_brandService_proto_init()
	file_termService_proto_init()
	file_tagService_proto_init()
	file_spuGalleryService_proto_init()
	file_unitService_proto_init()
	file_skuVipService_proto_init()
	file_skuCouponService_proto_init()
	file_skuPresaleService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_skuService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sku); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skuService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skuService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skuService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skuService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_skuService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_skuService_proto_goTypes,
		DependencyIndexes: file_skuService_proto_depIdxs,
		MessageInfos:      file_skuService_proto_msgTypes,
	}.Build()
	File_skuService_proto = out.File
	file_skuService_proto_rawDesc = nil
	file_skuService_proto_goTypes = nil
	file_skuService_proto_depIdxs = nil
}
