// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: inventoryService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for InventoryService service

func NewInventoryServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for InventoryService service

type InventoryService interface {
	// 新增库存扣除
	DeductionAdd(ctx context.Context, in *InventoryDeductionRequest, opts ...client.CallOption) (*InventoryResponse, error)
	// 新增库存冻结
	FrozenAdd(ctx context.Context, in *InventoryFrozenRequest, opts ...client.CallOption) (*InventoryResponse, error)
	// 撤销库存冻结
	FrozenCancel(ctx context.Context, in *InventoryFrozenRequest, opts ...client.CallOption) (*InventoryResponse, error)
	// 库存冻结日志查询
	FrozenLogs(ctx context.Context, in *InventoryRequest, opts ...client.CallOption) (*InventoryResponse, error)
	// 库存扣减日志列表
	DeductionLogs(ctx context.Context, in *InventoryRequest, opts ...client.CallOption) (*InventoryResponse, error)
}

type inventoryService struct {
	c    client.Client
	name string
}

func NewInventoryService(name string, c client.Client) InventoryService {
	return &inventoryService{
		c:    c,
		name: name,
	}
}

func (c *inventoryService) DeductionAdd(ctx context.Context, in *InventoryDeductionRequest, opts ...client.CallOption) (*InventoryResponse, error) {
	req := c.c.NewRequest(c.name, "InventoryService.DeductionAdd", in)
	out := new(InventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) FrozenAdd(ctx context.Context, in *InventoryFrozenRequest, opts ...client.CallOption) (*InventoryResponse, error) {
	req := c.c.NewRequest(c.name, "InventoryService.FrozenAdd", in)
	out := new(InventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) FrozenCancel(ctx context.Context, in *InventoryFrozenRequest, opts ...client.CallOption) (*InventoryResponse, error) {
	req := c.c.NewRequest(c.name, "InventoryService.FrozenCancel", in)
	out := new(InventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) FrozenLogs(ctx context.Context, in *InventoryRequest, opts ...client.CallOption) (*InventoryResponse, error) {
	req := c.c.NewRequest(c.name, "InventoryService.FrozenLogs", in)
	out := new(InventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) DeductionLogs(ctx context.Context, in *InventoryRequest, opts ...client.CallOption) (*InventoryResponse, error) {
	req := c.c.NewRequest(c.name, "InventoryService.DeductionLogs", in)
	out := new(InventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InventoryService service

type InventoryServiceHandler interface {
	// 新增库存扣除
	DeductionAdd(context.Context, *InventoryDeductionRequest, *InventoryResponse) error
	// 新增库存冻结
	FrozenAdd(context.Context, *InventoryFrozenRequest, *InventoryResponse) error
	// 撤销库存冻结
	FrozenCancel(context.Context, *InventoryFrozenRequest, *InventoryResponse) error
	// 库存冻结日志查询
	FrozenLogs(context.Context, *InventoryRequest, *InventoryResponse) error
	// 库存扣减日志列表
	DeductionLogs(context.Context, *InventoryRequest, *InventoryResponse) error
}

func RegisterInventoryServiceHandler(s server.Server, hdlr InventoryServiceHandler, opts ...server.HandlerOption) error {
	type inventoryService interface {
		DeductionAdd(ctx context.Context, in *InventoryDeductionRequest, out *InventoryResponse) error
		FrozenAdd(ctx context.Context, in *InventoryFrozenRequest, out *InventoryResponse) error
		FrozenCancel(ctx context.Context, in *InventoryFrozenRequest, out *InventoryResponse) error
		FrozenLogs(ctx context.Context, in *InventoryRequest, out *InventoryResponse) error
		DeductionLogs(ctx context.Context, in *InventoryRequest, out *InventoryResponse) error
	}
	type InventoryService struct {
		inventoryService
	}
	h := &inventoryServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&InventoryService{h}, opts...))
}

type inventoryServiceHandler struct {
	InventoryServiceHandler
}

func (h *inventoryServiceHandler) DeductionAdd(ctx context.Context, in *InventoryDeductionRequest, out *InventoryResponse) error {
	return h.InventoryServiceHandler.DeductionAdd(ctx, in, out)
}

func (h *inventoryServiceHandler) FrozenAdd(ctx context.Context, in *InventoryFrozenRequest, out *InventoryResponse) error {
	return h.InventoryServiceHandler.FrozenAdd(ctx, in, out)
}

func (h *inventoryServiceHandler) FrozenCancel(ctx context.Context, in *InventoryFrozenRequest, out *InventoryResponse) error {
	return h.InventoryServiceHandler.FrozenCancel(ctx, in, out)
}

func (h *inventoryServiceHandler) FrozenLogs(ctx context.Context, in *InventoryRequest, out *InventoryResponse) error {
	return h.InventoryServiceHandler.FrozenLogs(ctx, in, out)
}

func (h *inventoryServiceHandler) DeductionLogs(ctx context.Context, in *InventoryRequest, out *InventoryResponse) error {
	return h.InventoryServiceHandler.DeductionLogs(ctx, in, out)
}
