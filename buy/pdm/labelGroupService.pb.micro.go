// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: labelGroupService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LabelGroupService service

func NewLabelGroupServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LabelGroupService service

type LabelGroupService interface {
	// 标签分组新增
	Create(ctx context.Context, in *LabelGroup, opts ...client.CallOption) (*LabelGroupResponse, error)
	// 标签分组修改
	Update(ctx context.Context, in *LabelGroup, opts ...client.CallOption) (*LabelGroupResponse, error)
	// 标签分组删除
	Delete(ctx context.Context, in *LabelGroup, opts ...client.CallOption) (*LabelGroupResponse, error)
	// 标签分组获取
	Get(ctx context.Context, in *LabelGroup, opts ...client.CallOption) (*LabelGroupResponse, error)
	// 标签分组查询
	Search(ctx context.Context, in *LabelGroupRequest, opts ...client.CallOption) (*LabelGroupResponse, error)
	// 标签分组列表
	List(ctx context.Context, in *LabelGroupRequest, opts ...client.CallOption) (*LabelGroupResponse, error)
}

type labelGroupService struct {
	c    client.Client
	name string
}

func NewLabelGroupService(name string, c client.Client) LabelGroupService {
	return &labelGroupService{
		c:    c,
		name: name,
	}
}

func (c *labelGroupService) Create(ctx context.Context, in *LabelGroup, opts ...client.CallOption) (*LabelGroupResponse, error) {
	req := c.c.NewRequest(c.name, "LabelGroupService.Create", in)
	out := new(LabelGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelGroupService) Update(ctx context.Context, in *LabelGroup, opts ...client.CallOption) (*LabelGroupResponse, error) {
	req := c.c.NewRequest(c.name, "LabelGroupService.Update", in)
	out := new(LabelGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelGroupService) Delete(ctx context.Context, in *LabelGroup, opts ...client.CallOption) (*LabelGroupResponse, error) {
	req := c.c.NewRequest(c.name, "LabelGroupService.Delete", in)
	out := new(LabelGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelGroupService) Get(ctx context.Context, in *LabelGroup, opts ...client.CallOption) (*LabelGroupResponse, error) {
	req := c.c.NewRequest(c.name, "LabelGroupService.Get", in)
	out := new(LabelGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelGroupService) Search(ctx context.Context, in *LabelGroupRequest, opts ...client.CallOption) (*LabelGroupResponse, error) {
	req := c.c.NewRequest(c.name, "LabelGroupService.Search", in)
	out := new(LabelGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelGroupService) List(ctx context.Context, in *LabelGroupRequest, opts ...client.CallOption) (*LabelGroupResponse, error) {
	req := c.c.NewRequest(c.name, "LabelGroupService.List", in)
	out := new(LabelGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LabelGroupService service

type LabelGroupServiceHandler interface {
	// 标签分组新增
	Create(context.Context, *LabelGroup, *LabelGroupResponse) error
	// 标签分组修改
	Update(context.Context, *LabelGroup, *LabelGroupResponse) error
	// 标签分组删除
	Delete(context.Context, *LabelGroup, *LabelGroupResponse) error
	// 标签分组获取
	Get(context.Context, *LabelGroup, *LabelGroupResponse) error
	// 标签分组查询
	Search(context.Context, *LabelGroupRequest, *LabelGroupResponse) error
	// 标签分组列表
	List(context.Context, *LabelGroupRequest, *LabelGroupResponse) error
}

func RegisterLabelGroupServiceHandler(s server.Server, hdlr LabelGroupServiceHandler, opts ...server.HandlerOption) error {
	type labelGroupService interface {
		Create(ctx context.Context, in *LabelGroup, out *LabelGroupResponse) error
		Update(ctx context.Context, in *LabelGroup, out *LabelGroupResponse) error
		Delete(ctx context.Context, in *LabelGroup, out *LabelGroupResponse) error
		Get(ctx context.Context, in *LabelGroup, out *LabelGroupResponse) error
		Search(ctx context.Context, in *LabelGroupRequest, out *LabelGroupResponse) error
		List(ctx context.Context, in *LabelGroupRequest, out *LabelGroupResponse) error
	}
	type LabelGroupService struct {
		labelGroupService
	}
	h := &labelGroupServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LabelGroupService{h}, opts...))
}

type labelGroupServiceHandler struct {
	LabelGroupServiceHandler
}

func (h *labelGroupServiceHandler) Create(ctx context.Context, in *LabelGroup, out *LabelGroupResponse) error {
	return h.LabelGroupServiceHandler.Create(ctx, in, out)
}

func (h *labelGroupServiceHandler) Update(ctx context.Context, in *LabelGroup, out *LabelGroupResponse) error {
	return h.LabelGroupServiceHandler.Update(ctx, in, out)
}

func (h *labelGroupServiceHandler) Delete(ctx context.Context, in *LabelGroup, out *LabelGroupResponse) error {
	return h.LabelGroupServiceHandler.Delete(ctx, in, out)
}

func (h *labelGroupServiceHandler) Get(ctx context.Context, in *LabelGroup, out *LabelGroupResponse) error {
	return h.LabelGroupServiceHandler.Get(ctx, in, out)
}

func (h *labelGroupServiceHandler) Search(ctx context.Context, in *LabelGroupRequest, out *LabelGroupResponse) error {
	return h.LabelGroupServiceHandler.Search(ctx, in, out)
}

func (h *labelGroupServiceHandler) List(ctx context.Context, in *LabelGroupRequest, out *LabelGroupResponse) error {
	return h.LabelGroupServiceHandler.List(ctx, in, out)
}
