// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: labelService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LabelService service

func NewLabelServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LabelService service

type LabelService interface {
	// 商品标签新增
	Create(ctx context.Context, in *Label, opts ...client.CallOption) (*LabelResponse, error)
	// 商品标签修改
	Update(ctx context.Context, in *Label, opts ...client.CallOption) (*LabelResponse, error)
	// 商品标签删除
	Delete(ctx context.Context, in *Label, opts ...client.CallOption) (*LabelResponse, error)
	// 商品标签获取
	Get(ctx context.Context, in *Label, opts ...client.CallOption) (*LabelResponse, error)
	// 商品标签查询
	Search(ctx context.Context, in *LabelRequest, opts ...client.CallOption) (*LabelResponse, error)
	// 商品标签列表
	List(ctx context.Context, in *LabelRequest, opts ...client.CallOption) (*LabelResponse, error)
}

type labelService struct {
	c    client.Client
	name string
}

func NewLabelService(name string, c client.Client) LabelService {
	return &labelService{
		c:    c,
		name: name,
	}
}

func (c *labelService) Create(ctx context.Context, in *Label, opts ...client.CallOption) (*LabelResponse, error) {
	req := c.c.NewRequest(c.name, "LabelService.Create", in)
	out := new(LabelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelService) Update(ctx context.Context, in *Label, opts ...client.CallOption) (*LabelResponse, error) {
	req := c.c.NewRequest(c.name, "LabelService.Update", in)
	out := new(LabelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelService) Delete(ctx context.Context, in *Label, opts ...client.CallOption) (*LabelResponse, error) {
	req := c.c.NewRequest(c.name, "LabelService.Delete", in)
	out := new(LabelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelService) Get(ctx context.Context, in *Label, opts ...client.CallOption) (*LabelResponse, error) {
	req := c.c.NewRequest(c.name, "LabelService.Get", in)
	out := new(LabelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelService) Search(ctx context.Context, in *LabelRequest, opts ...client.CallOption) (*LabelResponse, error) {
	req := c.c.NewRequest(c.name, "LabelService.Search", in)
	out := new(LabelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelService) List(ctx context.Context, in *LabelRequest, opts ...client.CallOption) (*LabelResponse, error) {
	req := c.c.NewRequest(c.name, "LabelService.List", in)
	out := new(LabelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LabelService service

type LabelServiceHandler interface {
	// 商品标签新增
	Create(context.Context, *Label, *LabelResponse) error
	// 商品标签修改
	Update(context.Context, *Label, *LabelResponse) error
	// 商品标签删除
	Delete(context.Context, *Label, *LabelResponse) error
	// 商品标签获取
	Get(context.Context, *Label, *LabelResponse) error
	// 商品标签查询
	Search(context.Context, *LabelRequest, *LabelResponse) error
	// 商品标签列表
	List(context.Context, *LabelRequest, *LabelResponse) error
}

func RegisterLabelServiceHandler(s server.Server, hdlr LabelServiceHandler, opts ...server.HandlerOption) error {
	type labelService interface {
		Create(ctx context.Context, in *Label, out *LabelResponse) error
		Update(ctx context.Context, in *Label, out *LabelResponse) error
		Delete(ctx context.Context, in *Label, out *LabelResponse) error
		Get(ctx context.Context, in *Label, out *LabelResponse) error
		Search(ctx context.Context, in *LabelRequest, out *LabelResponse) error
		List(ctx context.Context, in *LabelRequest, out *LabelResponse) error
	}
	type LabelService struct {
		labelService
	}
	h := &labelServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LabelService{h}, opts...))
}

type labelServiceHandler struct {
	LabelServiceHandler
}

func (h *labelServiceHandler) Create(ctx context.Context, in *Label, out *LabelResponse) error {
	return h.LabelServiceHandler.Create(ctx, in, out)
}

func (h *labelServiceHandler) Update(ctx context.Context, in *Label, out *LabelResponse) error {
	return h.LabelServiceHandler.Update(ctx, in, out)
}

func (h *labelServiceHandler) Delete(ctx context.Context, in *Label, out *LabelResponse) error {
	return h.LabelServiceHandler.Delete(ctx, in, out)
}

func (h *labelServiceHandler) Get(ctx context.Context, in *Label, out *LabelResponse) error {
	return h.LabelServiceHandler.Get(ctx, in, out)
}

func (h *labelServiceHandler) Search(ctx context.Context, in *LabelRequest, out *LabelResponse) error {
	return h.LabelServiceHandler.Search(ctx, in, out)
}

func (h *labelServiceHandler) List(ctx context.Context, in *LabelRequest, out *LabelResponse) error {
	return h.LabelServiceHandler.List(ctx, in, out)
}
