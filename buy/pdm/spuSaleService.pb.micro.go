// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: spuSaleService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SpuSaleService service

func NewSpuSaleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SpuSaleService service

type SpuSaleService interface {
	// 销量增加
	Add(ctx context.Context, in *SpuSale, opts ...client.CallOption) (*SpuSaleResponse, error)
	// 销量取消
	Cancel(ctx context.Context, in *SpuSale, opts ...client.CallOption) (*SpuSaleResponse, error)
	// 日志查询
	Logs(ctx context.Context, in *SpuSaleRequest, opts ...client.CallOption) (*SpuSaleResponse, error)
}

type spuSaleService struct {
	c    client.Client
	name string
}

func NewSpuSaleService(name string, c client.Client) SpuSaleService {
	return &spuSaleService{
		c:    c,
		name: name,
	}
}

func (c *spuSaleService) Add(ctx context.Context, in *SpuSale, opts ...client.CallOption) (*SpuSaleResponse, error) {
	req := c.c.NewRequest(c.name, "SpuSaleService.Add", in)
	out := new(SpuSaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spuSaleService) Cancel(ctx context.Context, in *SpuSale, opts ...client.CallOption) (*SpuSaleResponse, error) {
	req := c.c.NewRequest(c.name, "SpuSaleService.Cancel", in)
	out := new(SpuSaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spuSaleService) Logs(ctx context.Context, in *SpuSaleRequest, opts ...client.CallOption) (*SpuSaleResponse, error) {
	req := c.c.NewRequest(c.name, "SpuSaleService.Logs", in)
	out := new(SpuSaleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SpuSaleService service

type SpuSaleServiceHandler interface {
	// 销量增加
	Add(context.Context, *SpuSale, *SpuSaleResponse) error
	// 销量取消
	Cancel(context.Context, *SpuSale, *SpuSaleResponse) error
	// 日志查询
	Logs(context.Context, *SpuSaleRequest, *SpuSaleResponse) error
}

func RegisterSpuSaleServiceHandler(s server.Server, hdlr SpuSaleServiceHandler, opts ...server.HandlerOption) error {
	type spuSaleService interface {
		Add(ctx context.Context, in *SpuSale, out *SpuSaleResponse) error
		Cancel(ctx context.Context, in *SpuSale, out *SpuSaleResponse) error
		Logs(ctx context.Context, in *SpuSaleRequest, out *SpuSaleResponse) error
	}
	type SpuSaleService struct {
		spuSaleService
	}
	h := &spuSaleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SpuSaleService{h}, opts...))
}

type spuSaleServiceHandler struct {
	SpuSaleServiceHandler
}

func (h *spuSaleServiceHandler) Add(ctx context.Context, in *SpuSale, out *SpuSaleResponse) error {
	return h.SpuSaleServiceHandler.Add(ctx, in, out)
}

func (h *spuSaleServiceHandler) Cancel(ctx context.Context, in *SpuSale, out *SpuSaleResponse) error {
	return h.SpuSaleServiceHandler.Cancel(ctx, in, out)
}

func (h *spuSaleServiceHandler) Logs(ctx context.Context, in *SpuSaleRequest, out *SpuSaleResponse) error {
	return h.SpuSaleServiceHandler.Logs(ctx, in, out)
}
