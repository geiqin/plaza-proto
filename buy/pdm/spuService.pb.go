// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: spuService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 商品库
type Spu struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                           //ID
	Type              string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`                                                        //产品类型：physical实物产品,virtual虚拟产品,grouped分组产品，bundle捆绑产品
	ShopId            int64                  `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                     //分店ID
	CategoryId        int64                  `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                         //商品分类
	TaxonomyId        int64                  `protobuf:"varint,5,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                         //商品类目
	BrandId           int32                  `protobuf:"varint,6,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                  //品牌
	SpuName           string                 `protobuf:"bytes,7,opt,name=spu_name,json=spuName,proto3" json:"spu_name"`                                   //商品名称
	SpuCode           string                 `protobuf:"bytes,8,opt,name=spu_code,json=spuCode,proto3" json:"spu_code"`                                   //SPU编码
	SellMode          string                 `protobuf:"bytes,9,opt,name=sell_mode,json=sellMode,proto3" json:"sell_mode"`                                //销售模式
	ImageUrl          string                 `protobuf:"bytes,10,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                               //商品主图
	VideoUrl          string                 `protobuf:"bytes,11,opt,name=video_url,json=videoUrl,proto3" json:"video_url"`                               //主图视频
	ExplainVideoUrl   string                 `protobuf:"bytes,12,opt,name=explain_video_url,json=explainVideoUrl,proto3" json:"explain_video_url"`        //讲解视频
	IsVirtual         string                 `protobuf:"bytes,13,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`                            //虚拟商品
	VirtualType       string                 `protobuf:"bytes,14,opt,name=virtual_type,json=virtualType,proto3" json:"virtual_type"`                      //虚拟商品类型
	IsManySpec        string                 `protobuf:"bytes,15,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                       //多规格商品
	IsOpenWeigh       string                 `protobuf:"bytes,16,opt,name=is_open_weigh,json=isOpenWeigh,proto3" json:"is_open_weigh"`                    //开启称重
	IsMoreBarcode     string                 `protobuf:"bytes,17,opt,name=is_more_barcode,json=isMoreBarcode,proto3" json:"is_more_barcode"`              //一品多码
	UnitId            int32                  `protobuf:"varint,18,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`                                    //计量单位ID
	UnitName          string                 `protobuf:"bytes,19,opt,name=unit_name,json=unitName,proto3" json:"unit_name"`                               //计量单位名称
	UnitType          string                 `protobuf:"bytes,20,opt,name=unit_type,json=unitType,proto3" json:"unit_type"`                               //计量单位类型
	Inventory         int64                  `protobuf:"varint,21,opt,name=inventory,proto3" json:"inventory"`                                            //库存数量
	FrozenNum         int64                  `protobuf:"varint,22,opt,name=frozen_num,json=frozenNum,proto3" json:"frozen_num"`                           //冻结数量
	DeductionType     string                 `protobuf:"bytes,23,opt,name=deduction_type,json=deductionType,proto3" json:"deduction_type"`                //库存扣减类型
	IsShelve          string                 `protobuf:"bytes,24,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`                               //是否上架
	IsBuyRight        string                 `protobuf:"bytes,25,opt,name=is_buy_right,json=isBuyRight,proto3" json:"is_buy_right"`                       //是否开启购买权限
	IsVipPrice        string                 `protobuf:"bytes,26,opt,name=is_vip_price,json=isVipPrice,proto3" json:"is_vip_price"`                       //是否开启会员价
	VipProduct        string                 `protobuf:"bytes,27,opt,name=vip_product,json=vipProduct,proto3" json:"vip_product"`                         //是否会员专属商品
	IsOversea         string                 `protobuf:"bytes,28,opt,name=is_oversea,json=isOversea,proto3" json:"is_oversea"`                            //是否海淘商品
	MinOriginalPrice  int64                  `protobuf:"varint,29,opt,name=min_original_price,json=minOriginalPrice,proto3" json:"min_original_price"`    //最低原价
	MaxOriginalPrice  int64                  `protobuf:"varint,30,opt,name=max_original_price,json=maxOriginalPrice,proto3" json:"max_original_price"`    //最大原价
	MinPrice          int64                  `protobuf:"varint,31,opt,name=min_price,json=minPrice,proto3" json:"min_price"`                              //最低价格
	MaxPrice          int64                  `protobuf:"varint,32,opt,name=max_price,json=maxPrice,proto3" json:"max_price"`                              //最高价格
	MinQty            int64                  `protobuf:"varint,33,opt,name=min_qty,json=minQty,proto3" json:"min_qty"`                                    //起购数量
	IsLimit           string                 `protobuf:"bytes,34,opt,name=is_limit,json=isLimit,proto3" json:"is_limit"`                                  //是否开启限购
	LimitType         string                 `protobuf:"bytes,35,opt,name=limit_type,json=limitType,proto3" json:"limit_type"`                            //扣减库存类型
	LimitNum          int64                  `protobuf:"varint,36,opt,name=limit_num,json=limitNum,proto3" json:"limit_num"`                              //限购数量
	Comments          int64                  `protobuf:"varint,37,opt,name=comments,proto3" json:"comments"`                                              //评论数量
	Browses           int64                  `protobuf:"varint,38,opt,name=browses,proto3" json:"browses"`                                                //访问次数
	Sales             int64                  `protobuf:"varint,39,opt,name=sales,proto3" json:"sales"`                                                    //实际销量
	Fictions          int64                  `protobuf:"varint,40,opt,name=fictions,proto3" json:"fictions"`                                              //虚拟销量
	ButtonMode        string                 `protobuf:"bytes,41,opt,name=button_mode,json=buttonMode,proto3" json:"button_mode"`                         //立即购买按钮
	ButtonCustom      string                 `protobuf:"bytes,42,opt,name=button_custom,json=buttonCustom,proto3" json:"button_custom"`                   //按钮自定义名称
	Logistics         []string               `protobuf:"bytes,43,rep,name=logistics,proto3" json:"logistics"`                                             //物流方式
	FreightType       string                 `protobuf:"bytes,44,opt,name=freight_type,json=freightType,proto3" json:"freight_type"`                      //运费类型
	FreightPrice      int64                  `protobuf:"varint,45,opt,name=freight_price,json=freightPrice,proto3" json:"freight_price"`                  //固定运费
	FreightTemplateId int64                  `protobuf:"varint,46,opt,name=freight_template_id,json=freightTemplateId,proto3" json:"freight_template_id"` //运费模板ID
	DetailTemplateId  int64                  `protobuf:"varint,47,opt,name=detail_template_id,json=detailTemplateId,proto3" json:"detail_template_id"`    //详情模板
	Content           string                 `protobuf:"bytes,48,opt,name=content,proto3" json:"content"`                                                 //商品内容
	SellingDesc       string                 `protobuf:"bytes,49,opt,name=selling_desc,json=sellingDesc,proto3" json:"selling_desc"`                      //卖点描述
	ShareDesc         string                 `protobuf:"bytes,50,opt,name=share_desc,json=shareDesc,proto3" json:"share_desc"`                            //分享描述
	SeoTitle          string                 `protobuf:"bytes,51,opt,name=seo_title,json=seoTitle,proto3" json:"seo_title"`                               //SEO标题
	SeoKeywords       string                 `protobuf:"bytes,52,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords"`                      //SEO关键字
	SeoDesc           string                 `protobuf:"bytes,53,opt,name=seo_desc,json=seoDesc,proto3" json:"seo_desc"`                                  //SEO描述
	Sort              int32                  `protobuf:"varint,54,opt,name=sort,proto3" json:"sort"`                                                      //排序
	IsGift            string                 `protobuf:"bytes,55,opt,name=is_gift,json=isGift,proto3" json:"is_gift"`                                     //是否是礼品
	GiftPrice         int64                  `protobuf:"varint,56,opt,name=gift_price,json=giftPrice,proto3" json:"gift_price"`                           //礼品附加费
	VirtualObjId      int64                  `protobuf:"varint,57,opt,name=virtual_obj_id,json=virtualObjId,proto3" json:"virtual_obj_id"`                //虚拟对象ID
	OutSystemId       string                 `protobuf:"bytes,58,opt,name=out_system_id,json=outSystemId,proto3" json:"out_system_id"`                    //外部系统ID
	Status            string                 `protobuf:"bytes,59,opt,name=status,proto3" json:"status"`                                                   //商品状态
	UpdatedAt         int64                  `protobuf:"varint,60,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`                           //创建时间
	CreatedAt         int64                  `protobuf:"varint,61,opt,name=created_at,json=createdAt,proto3" json:"created_at"`                           //修改时间
	OtOriginalPrice   int64                  `protobuf:"varint,64,opt,name=ot_original_price,json=otOriginalPrice,proto3" json:"ot_original_price"`       //显示原价
	OtPrice           int64                  `protobuf:"varint,65,opt,name=ot_price,json=otPrice,proto3" json:"ot_price"`                                 //显示销售价格
	OtVipPrice        int64                  `protobuf:"varint,66,opt,name=ot_vip_price,json=otVipPrice,proto3" json:"ot_vip_price"`                      //显示VIP价格
	OtPromotionPrice  int64                  `protobuf:"varint,67,opt,name=ot_promotion_price,json=otPromotionPrice,proto3" json:"ot_promotion_price"`    //促销价（暂时保留）
	Brand             *Brand                 `protobuf:"bytes,68,opt,name=brand,proto3" json:"brand"`
	Category          *Category              `protobuf:"bytes,69,opt,name=category,proto3" json:"category"`
	Presale           *SpuPresale            `protobuf:"bytes,70,opt,name=presale,proto3" json:"presale"`
	Photos            []*SpuPhoto            `protobuf:"bytes,71,rep,name=photos,proto3" json:"photos"`
	Groups            []*Group               `protobuf:"bytes,72,rep,name=groups,proto3" json:"groups"`
	Skus              []*Sku                 `protobuf:"bytes,73,rep,name=skus,proto3" json:"skus"`
	Sku               *Sku                   `protobuf:"bytes,74,opt,name=sku,proto3" json:"sku"`
	Labels            []*Label               `protobuf:"bytes,75,rep,name=labels,proto3" json:"labels"`
	SpecTypes         []*SpuSpecType         `protobuf:"bytes,76,rep,name=spec_types,json=specTypes,proto3" json:"spec_types"`
	CommentsCount     int64                  `protobuf:"varint,77,opt,name=comments_count,json=commentsCount,proto3" json:"comments_count"`
	GoodsUrl          string                 `protobuf:"bytes,78,opt,name=goods_url,json=goodsUrl,proto3" json:"goods_url"`
	ContentWeb        string                 `protobuf:"bytes,79,opt,name=content_web,json=contentWeb,proto3" json:"content_web"` //web内容
	ContentApp        string                 `protobuf:"bytes,80,opt,name=content_app,json=contentApp,proto3" json:"content_app"` //app内容
	BrandName         string                 `protobuf:"bytes,81,opt,name=brand_name,json=brandName,proto3" json:"brand_name"`
	StatusName        string                 `protobuf:"bytes,82,opt,name=status_name,json=statusName,proto3" json:"status_name"`
	IsError           string                 `protobuf:"bytes,83,opt,name=is_error,json=isError,proto3" json:"is_error"`    //是否错误（0否，1是）
	ErrorMsg          string                 `protobuf:"bytes,84,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg"` //错误信息
	IsFavor           string                 `protobuf:"bytes,85,opt,name=is_favor,json=isFavor,proto3" json:"is_favor"`    //是否已收藏(0否，1是)
	Checked           bool                   `protobuf:"varint,86,opt,name=checked,proto3" json:"checked"`
	LabelIds          []int32                `protobuf:"varint,87,rep,packed,name=label_ids,json=labelIds,proto3" json:"label_ids"`
	GroupIds          []int64                `protobuf:"varint,88,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Spu) Reset() {
	*x = Spu{}
	mi := &file_spuService_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Spu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spu) ProtoMessage() {}

func (x *Spu) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spu.ProtoReflect.Descriptor instead.
func (*Spu) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{0}
}

func (x *Spu) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Spu) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Spu) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *Spu) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Spu) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *Spu) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *Spu) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *Spu) GetSpuCode() string {
	if x != nil {
		return x.SpuCode
	}
	return ""
}

func (x *Spu) GetSellMode() string {
	if x != nil {
		return x.SellMode
	}
	return ""
}

func (x *Spu) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Spu) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *Spu) GetExplainVideoUrl() string {
	if x != nil {
		return x.ExplainVideoUrl
	}
	return ""
}

func (x *Spu) GetIsVirtual() string {
	if x != nil {
		return x.IsVirtual
	}
	return ""
}

func (x *Spu) GetVirtualType() string {
	if x != nil {
		return x.VirtualType
	}
	return ""
}

func (x *Spu) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *Spu) GetIsOpenWeigh() string {
	if x != nil {
		return x.IsOpenWeigh
	}
	return ""
}

func (x *Spu) GetIsMoreBarcode() string {
	if x != nil {
		return x.IsMoreBarcode
	}
	return ""
}

func (x *Spu) GetUnitId() int32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *Spu) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *Spu) GetUnitType() string {
	if x != nil {
		return x.UnitType
	}
	return ""
}

func (x *Spu) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *Spu) GetFrozenNum() int64 {
	if x != nil {
		return x.FrozenNum
	}
	return 0
}

func (x *Spu) GetDeductionType() string {
	if x != nil {
		return x.DeductionType
	}
	return ""
}

func (x *Spu) GetIsShelve() string {
	if x != nil {
		return x.IsShelve
	}
	return ""
}

func (x *Spu) GetIsBuyRight() string {
	if x != nil {
		return x.IsBuyRight
	}
	return ""
}

func (x *Spu) GetIsVipPrice() string {
	if x != nil {
		return x.IsVipPrice
	}
	return ""
}

func (x *Spu) GetVipProduct() string {
	if x != nil {
		return x.VipProduct
	}
	return ""
}

func (x *Spu) GetIsOversea() string {
	if x != nil {
		return x.IsOversea
	}
	return ""
}

func (x *Spu) GetMinOriginalPrice() int64 {
	if x != nil {
		return x.MinOriginalPrice
	}
	return 0
}

func (x *Spu) GetMaxOriginalPrice() int64 {
	if x != nil {
		return x.MaxOriginalPrice
	}
	return 0
}

func (x *Spu) GetMinPrice() int64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *Spu) GetMaxPrice() int64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *Spu) GetMinQty() int64 {
	if x != nil {
		return x.MinQty
	}
	return 0
}

func (x *Spu) GetIsLimit() string {
	if x != nil {
		return x.IsLimit
	}
	return ""
}

func (x *Spu) GetLimitType() string {
	if x != nil {
		return x.LimitType
	}
	return ""
}

func (x *Spu) GetLimitNum() int64 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *Spu) GetComments() int64 {
	if x != nil {
		return x.Comments
	}
	return 0
}

func (x *Spu) GetBrowses() int64 {
	if x != nil {
		return x.Browses
	}
	return 0
}

func (x *Spu) GetSales() int64 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *Spu) GetFictions() int64 {
	if x != nil {
		return x.Fictions
	}
	return 0
}

func (x *Spu) GetButtonMode() string {
	if x != nil {
		return x.ButtonMode
	}
	return ""
}

func (x *Spu) GetButtonCustom() string {
	if x != nil {
		return x.ButtonCustom
	}
	return ""
}

func (x *Spu) GetLogistics() []string {
	if x != nil {
		return x.Logistics
	}
	return nil
}

func (x *Spu) GetFreightType() string {
	if x != nil {
		return x.FreightType
	}
	return ""
}

func (x *Spu) GetFreightPrice() int64 {
	if x != nil {
		return x.FreightPrice
	}
	return 0
}

func (x *Spu) GetFreightTemplateId() int64 {
	if x != nil {
		return x.FreightTemplateId
	}
	return 0
}

func (x *Spu) GetDetailTemplateId() int64 {
	if x != nil {
		return x.DetailTemplateId
	}
	return 0
}

func (x *Spu) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Spu) GetSellingDesc() string {
	if x != nil {
		return x.SellingDesc
	}
	return ""
}

func (x *Spu) GetShareDesc() string {
	if x != nil {
		return x.ShareDesc
	}
	return ""
}

func (x *Spu) GetSeoTitle() string {
	if x != nil {
		return x.SeoTitle
	}
	return ""
}

func (x *Spu) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *Spu) GetSeoDesc() string {
	if x != nil {
		return x.SeoDesc
	}
	return ""
}

func (x *Spu) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Spu) GetIsGift() string {
	if x != nil {
		return x.IsGift
	}
	return ""
}

func (x *Spu) GetGiftPrice() int64 {
	if x != nil {
		return x.GiftPrice
	}
	return 0
}

func (x *Spu) GetVirtualObjId() int64 {
	if x != nil {
		return x.VirtualObjId
	}
	return 0
}

func (x *Spu) GetOutSystemId() string {
	if x != nil {
		return x.OutSystemId
	}
	return ""
}

func (x *Spu) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Spu) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Spu) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Spu) GetOtOriginalPrice() int64 {
	if x != nil {
		return x.OtOriginalPrice
	}
	return 0
}

func (x *Spu) GetOtPrice() int64 {
	if x != nil {
		return x.OtPrice
	}
	return 0
}

func (x *Spu) GetOtVipPrice() int64 {
	if x != nil {
		return x.OtVipPrice
	}
	return 0
}

func (x *Spu) GetOtPromotionPrice() int64 {
	if x != nil {
		return x.OtPromotionPrice
	}
	return 0
}

func (x *Spu) GetBrand() *Brand {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Spu) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Spu) GetPresale() *SpuPresale {
	if x != nil {
		return x.Presale
	}
	return nil
}

func (x *Spu) GetPhotos() []*SpuPhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *Spu) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Spu) GetSkus() []*Sku {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *Spu) GetSku() *Sku {
	if x != nil {
		return x.Sku
	}
	return nil
}

func (x *Spu) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Spu) GetSpecTypes() []*SpuSpecType {
	if x != nil {
		return x.SpecTypes
	}
	return nil
}

func (x *Spu) GetCommentsCount() int64 {
	if x != nil {
		return x.CommentsCount
	}
	return 0
}

func (x *Spu) GetGoodsUrl() string {
	if x != nil {
		return x.GoodsUrl
	}
	return ""
}

func (x *Spu) GetContentWeb() string {
	if x != nil {
		return x.ContentWeb
	}
	return ""
}

func (x *Spu) GetContentApp() string {
	if x != nil {
		return x.ContentApp
	}
	return ""
}

func (x *Spu) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *Spu) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *Spu) GetIsError() string {
	if x != nil {
		return x.IsError
	}
	return ""
}

func (x *Spu) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *Spu) GetIsFavor() string {
	if x != nil {
		return x.IsFavor
	}
	return ""
}

func (x *Spu) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

func (x *Spu) GetLabelIds() []int32 {
	if x != nil {
		return x.LabelIds
	}
	return nil
}

func (x *Spu) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

// 商品库
type SpuEdit struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                           //ID
	Type              string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`                                                        //产品类型：physical实物产品,virtual虚拟产品,grouped分组产品，bundle捆绑产品
	ShopId            int64                  `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                     //分店ID
	CategoryId        int64                  `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                         //商品分类
	TaxonomyId        int64                  `protobuf:"varint,5,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                         //商品类目
	BrandId           int32                  `protobuf:"varint,6,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                  //品牌
	SpuName           string                 `protobuf:"bytes,7,opt,name=spu_name,json=spuName,proto3" json:"spu_name"`                                   //商品名称
	Content           string                 `protobuf:"bytes,8,opt,name=content,proto3" json:"content"`                                                  //商品内容
	SellingDesc       string                 `protobuf:"bytes,9,opt,name=selling_desc,json=sellingDesc,proto3" json:"selling_desc"`                       //卖点描述
	ShareDesc         string                 `protobuf:"bytes,10,opt,name=share_desc,json=shareDesc,proto3" json:"share_desc"`                            //分享描述
	ImageUrl          string                 `protobuf:"bytes,11,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                               //商品主图
	VideoUrl          string                 `protobuf:"bytes,12,opt,name=video_url,json=videoUrl,proto3" json:"video_url"`                               //主图视频
	ExplainVideoUrl   string                 `protobuf:"bytes,13,opt,name=explain_video_url,json=explainVideoUrl,proto3" json:"explain_video_url"`        //讲解视频
	IsVirtual         string                 `protobuf:"bytes,14,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`                            //虚拟商品
	VirtualType       string                 `protobuf:"bytes,15,opt,name=virtual_type,json=virtualType,proto3" json:"virtual_type"`                      //虚拟商品类型
	IsManySpec        string                 `protobuf:"bytes,16,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                       //多规格商品
	IsOpenWeigh       string                 `protobuf:"bytes,17,opt,name=is_open_weigh,json=isOpenWeigh,proto3" json:"is_open_weigh"`                    //开启称重
	SpuCode           string                 `protobuf:"bytes,18,opt,name=spu_code,json=spuCode,proto3" json:"spu_code"`                                  //SPU编码
	IsMoreBarcode     string                 `protobuf:"bytes,19,opt,name=is_more_barcode,json=isMoreBarcode,proto3" json:"is_more_barcode"`              //一品多码
	UnitId            int32                  `protobuf:"varint,20,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`                                    //计量单位ID
	UnitName          string                 `protobuf:"bytes,21,opt,name=unit_name,json=unitName,proto3" json:"unit_name"`                               //计量单位名称
	IsShelve          string                 `protobuf:"bytes,23,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`                               //是否上架
	SellMode          string                 `protobuf:"bytes,24,opt,name=sell_mode,json=sellMode,proto3" json:"sell_mode"`                               //销售模式
	DeductionType     string                 `protobuf:"bytes,25,opt,name=deduction_type,json=deductionType,proto3" json:"deduction_type"`                //扣减库存类型
	IsBuyRight        string                 `protobuf:"bytes,26,opt,name=is_buy_right,json=isBuyRight,proto3" json:"is_buy_right"`                       //购买权限
	IsVipPrice        string                 `protobuf:"bytes,27,opt,name=is_vip_price,json=isVipPrice,proto3" json:"is_vip_price"`                       //是否会员折扣价
	VipProduct        string                 `protobuf:"bytes,28,opt,name=vip_product,json=vipProduct,proto3" json:"vip_product"`                         //VIP专属产品
	MinQty            int64                  `protobuf:"varint,32,opt,name=min_qty,json=minQty,proto3" json:"min_qty"`                                    //起购数量
	IsLimit           string                 `protobuf:"bytes,33,opt,name=is_limit,json=isLimit,proto3" json:"is_limit"`                                  // 是否开启限购（0否, 1是）
	LimitType         string                 `protobuf:"bytes,34,opt,name=limit_type,json=limitType,proto3" json:"limit_type"`                            //限购类型: 1单次限购2永久限购
	LimitNum          int64                  `protobuf:"varint,35,opt,name=limit_num,json=limitNum,proto3" json:"limit_num"`                              //限购数量
	Fictions          int64                  `protobuf:"varint,37,opt,name=fictions,proto3" json:"fictions"`                                              //虚拟销量
	ButtonMode        string                 `protobuf:"bytes,38,opt,name=button_mode,json=buttonMode,proto3" json:"button_mode"`                         //立即购买按钮
	ButtonCustom      string                 `protobuf:"bytes,39,opt,name=button_custom,json=buttonCustom,proto3" json:"button_custom"`                   //按钮自定义名称
	Logistics         []string               `protobuf:"bytes,40,rep,name=logistics,proto3" json:"logistics"`                                             //支持物流类型
	FreightType       string                 `protobuf:"bytes,41,opt,name=freight_type,json=freightType,proto3" json:"freight_type"`                      //运费模式
	FreightPrice      int64                  `protobuf:"varint,42,opt,name=freight_price,json=freightPrice,proto3" json:"freight_price"`                  //统一运费
	FreightTemplateId int64                  `protobuf:"varint,43,opt,name=freight_template_id,json=freightTemplateId,proto3" json:"freight_template_id"` //运费模板
	DetailTemplateId  int64                  `protobuf:"varint,47,opt,name=detail_template_id,json=detailTemplateId,proto3" json:"detail_template_id"`    //详情模板
	SeoTitle          string                 `protobuf:"bytes,48,opt,name=seo_title,json=seoTitle,proto3" json:"seo_title"`                               //SEO标题
	SeoKeywords       string                 `protobuf:"bytes,49,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords"`                      //SEO关键字
	SeoDesc           string                 `protobuf:"bytes,50,opt,name=seo_desc,json=seoDesc,proto3" json:"seo_desc"`                                  //SEO描述
	Sort              int32                  `protobuf:"varint,51,opt,name=sort,proto3" json:"sort"`                                                      //排序
	IsGift            string                 `protobuf:"bytes,52,opt,name=is_gift,json=isGift,proto3" json:"is_gift"`                                     //是否礼品
	GiftPrice         int64                  `protobuf:"varint,53,opt,name=gift_price,json=giftPrice,proto3" json:"gift_price"`                           //礼品附件费
	Status            string                 `protobuf:"bytes,54,opt,name=status,proto3" json:"status"`                                                   //商品状态
	Presale           *SpuPresale            `protobuf:"bytes,66,opt,name=presale,proto3" json:"presale"`
	Photos            []*SpuPhoto            `protobuf:"bytes,67,rep,name=photos,proto3" json:"photos"`
	Skus              []*Sku                 `protobuf:"bytes,68,rep,name=skus,proto3" json:"skus"`
	Sku               *Sku                   `protobuf:"bytes,69,opt,name=sku,proto3" json:"sku"`
	SpecTypes         []*SpuSpecType         `protobuf:"bytes,70,rep,name=spec_types,json=specTypes,proto3" json:"spec_types"`
	LabelIds          []int32                `protobuf:"varint,71,rep,packed,name=label_ids,json=labelIds,proto3" json:"label_ids"`
	GroupIds          []int64                `protobuf:"varint,72,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SpuEdit) Reset() {
	*x = SpuEdit{}
	mi := &file_spuService_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpuEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuEdit) ProtoMessage() {}

func (x *SpuEdit) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuEdit.ProtoReflect.Descriptor instead.
func (*SpuEdit) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{1}
}

func (x *SpuEdit) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuEdit) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SpuEdit) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *SpuEdit) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SpuEdit) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *SpuEdit) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *SpuEdit) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *SpuEdit) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SpuEdit) GetSellingDesc() string {
	if x != nil {
		return x.SellingDesc
	}
	return ""
}

func (x *SpuEdit) GetShareDesc() string {
	if x != nil {
		return x.ShareDesc
	}
	return ""
}

func (x *SpuEdit) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *SpuEdit) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *SpuEdit) GetExplainVideoUrl() string {
	if x != nil {
		return x.ExplainVideoUrl
	}
	return ""
}

func (x *SpuEdit) GetIsVirtual() string {
	if x != nil {
		return x.IsVirtual
	}
	return ""
}

func (x *SpuEdit) GetVirtualType() string {
	if x != nil {
		return x.VirtualType
	}
	return ""
}

func (x *SpuEdit) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *SpuEdit) GetIsOpenWeigh() string {
	if x != nil {
		return x.IsOpenWeigh
	}
	return ""
}

func (x *SpuEdit) GetSpuCode() string {
	if x != nil {
		return x.SpuCode
	}
	return ""
}

func (x *SpuEdit) GetIsMoreBarcode() string {
	if x != nil {
		return x.IsMoreBarcode
	}
	return ""
}

func (x *SpuEdit) GetUnitId() int32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *SpuEdit) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *SpuEdit) GetIsShelve() string {
	if x != nil {
		return x.IsShelve
	}
	return ""
}

func (x *SpuEdit) GetSellMode() string {
	if x != nil {
		return x.SellMode
	}
	return ""
}

func (x *SpuEdit) GetDeductionType() string {
	if x != nil {
		return x.DeductionType
	}
	return ""
}

func (x *SpuEdit) GetIsBuyRight() string {
	if x != nil {
		return x.IsBuyRight
	}
	return ""
}

func (x *SpuEdit) GetIsVipPrice() string {
	if x != nil {
		return x.IsVipPrice
	}
	return ""
}

func (x *SpuEdit) GetVipProduct() string {
	if x != nil {
		return x.VipProduct
	}
	return ""
}

func (x *SpuEdit) GetMinQty() int64 {
	if x != nil {
		return x.MinQty
	}
	return 0
}

func (x *SpuEdit) GetIsLimit() string {
	if x != nil {
		return x.IsLimit
	}
	return ""
}

func (x *SpuEdit) GetLimitType() string {
	if x != nil {
		return x.LimitType
	}
	return ""
}

func (x *SpuEdit) GetLimitNum() int64 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *SpuEdit) GetFictions() int64 {
	if x != nil {
		return x.Fictions
	}
	return 0
}

func (x *SpuEdit) GetButtonMode() string {
	if x != nil {
		return x.ButtonMode
	}
	return ""
}

func (x *SpuEdit) GetButtonCustom() string {
	if x != nil {
		return x.ButtonCustom
	}
	return ""
}

func (x *SpuEdit) GetLogistics() []string {
	if x != nil {
		return x.Logistics
	}
	return nil
}

func (x *SpuEdit) GetFreightType() string {
	if x != nil {
		return x.FreightType
	}
	return ""
}

func (x *SpuEdit) GetFreightPrice() int64 {
	if x != nil {
		return x.FreightPrice
	}
	return 0
}

func (x *SpuEdit) GetFreightTemplateId() int64 {
	if x != nil {
		return x.FreightTemplateId
	}
	return 0
}

func (x *SpuEdit) GetDetailTemplateId() int64 {
	if x != nil {
		return x.DetailTemplateId
	}
	return 0
}

func (x *SpuEdit) GetSeoTitle() string {
	if x != nil {
		return x.SeoTitle
	}
	return ""
}

func (x *SpuEdit) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *SpuEdit) GetSeoDesc() string {
	if x != nil {
		return x.SeoDesc
	}
	return ""
}

func (x *SpuEdit) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SpuEdit) GetIsGift() string {
	if x != nil {
		return x.IsGift
	}
	return ""
}

func (x *SpuEdit) GetGiftPrice() int64 {
	if x != nil {
		return x.GiftPrice
	}
	return 0
}

func (x *SpuEdit) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SpuEdit) GetPresale() *SpuPresale {
	if x != nil {
		return x.Presale
	}
	return nil
}

func (x *SpuEdit) GetPhotos() []*SpuPhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *SpuEdit) GetSkus() []*Sku {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *SpuEdit) GetSku() *Sku {
	if x != nil {
		return x.Sku
	}
	return nil
}

func (x *SpuEdit) GetSpecTypes() []*SpuSpecType {
	if x != nil {
		return x.SpecTypes
	}
	return nil
}

func (x *SpuEdit) GetLabelIds() []int32 {
	if x != nil {
		return x.LabelIds
	}
	return nil
}

func (x *SpuEdit) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

// 商品Sku
type Sku struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                          //ID
	SpuId            int64                  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                                       //商品ID
	Unique           string                 `protobuf:"bytes,3,opt,name=unique,proto3" json:"unique"`                                                   //唯一标识
	Coding           string                 `protobuf:"bytes,4,opt,name=coding,proto3" json:"coding"`                                                   //编号
	Barcode          string                 `protobuf:"bytes,5,opt,name=barcode,proto3" json:"barcode"`                                                 //条码
	MoreBarcodes     []string               `protobuf:"bytes,6,rep,name=more_barcodes,json=moreBarcodes,proto3" json:"more_barcodes"`                   //更多条码
	OriginalPrice    int64                  `protobuf:"varint,7,opt,name=original_price,json=originalPrice,proto3" json:"original_price"`               //划线价
	CostPrice        int64                  `protobuf:"varint,8,opt,name=cost_price,json=costPrice,proto3" json:"cost_price"`                           //成本价
	Price            int64                  `protobuf:"varint,9,opt,name=price,proto3" json:"price"`                                                    //销售价
	Inventory        int64                  `protobuf:"varint,10,opt,name=inventory,proto3" json:"inventory"`                                           //库存
	FrozenNum        int64                  `protobuf:"varint,11,opt,name=frozen_num,json=frozenNum,proto3" json:"frozen_num"`                          //冻结数量
	Weight           int64                  `protobuf:"varint,12,opt,name=weight,proto3" json:"weight"`                                                 //重量
	Volume           int64                  `protobuf:"varint,13,opt,name=volume,proto3" json:"volume"`                                                 //体积
	Spec             []*SkuSpecInfo         `protobuf:"bytes,14,rep,name=spec,proto3" json:"spec"`                                                      //规格信息
	SpecDesc         string                 `protobuf:"bytes,15,opt,name=spec_desc,json=specDesc,proto3" json:"spec_desc"`                              //规格描述
	VirtualObjSpecId int64                  `protobuf:"varint,16,opt,name=virtual_obj_spec_id,json=virtualObjSpecId,proto3" json:"virtual_obj_spec_id"` //虚拟对象规格ID
	OutSystemChildId string                 `protobuf:"bytes,17,opt,name=out_system_child_id,json=outSystemChildId,proto3" json:"out_system_child_id"`  //外部系统子ID
	CreatedAt        int64                  `protobuf:"varint,18,opt,name=created_at,json=createdAt,proto3" json:"created_at"`                          //创建时间
	UpdatedAt        int64                  `protobuf:"varint,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`                          //修改时间
	Spu              *Spu                   `protobuf:"bytes,20,opt,name=spu,proto3" json:"spu"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Sku) Reset() {
	*x = Sku{}
	mi := &file_spuService_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sku) ProtoMessage() {}

func (x *Sku) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sku.ProtoReflect.Descriptor instead.
func (*Sku) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{2}
}

func (x *Sku) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sku) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *Sku) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *Sku) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *Sku) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *Sku) GetMoreBarcodes() []string {
	if x != nil {
		return x.MoreBarcodes
	}
	return nil
}

func (x *Sku) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *Sku) GetCostPrice() int64 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *Sku) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Sku) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *Sku) GetFrozenNum() int64 {
	if x != nil {
		return x.FrozenNum
	}
	return 0
}

func (x *Sku) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Sku) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Sku) GetSpec() []*SkuSpecInfo {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Sku) GetSpecDesc() string {
	if x != nil {
		return x.SpecDesc
	}
	return ""
}

func (x *Sku) GetVirtualObjSpecId() int64 {
	if x != nil {
		return x.VirtualObjSpecId
	}
	return 0
}

func (x *Sku) GetOutSystemChildId() string {
	if x != nil {
		return x.OutSystemChildId
	}
	return ""
}

func (x *Sku) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Sku) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Sku) GetSpu() *Spu {
	if x != nil {
		return x.Spu
	}
	return nil
}

type SpuPhoto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SpuId         int64                  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`
	ImageId       int64                  `protobuf:"varint,3,opt,name=image_id,json=imageId,proto3" json:"image_id"`
	ImageUrl      string                 `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	Sort          int32                  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort"`
	CreatedAt     int64                  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt     int64                  `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpuPhoto) Reset() {
	*x = SpuPhoto{}
	mi := &file_spuService_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpuPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuPhoto) ProtoMessage() {}

func (x *SpuPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuPhoto.ProtoReflect.Descriptor instead.
func (*SpuPhoto) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{3}
}

func (x *SpuPhoto) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuPhoto) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SpuPhoto) GetImageId() int64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *SpuPhoto) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *SpuPhoto) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SpuPhoto) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SpuPhoto) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 商品Sku请求参数
type SkuRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Top       int32                  `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64                  `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string                 `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sorts     []string               `protobuf:"bytes,5,rep,name=sorts,proto3" json:"sorts"`
	DateRange []string               `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int64                `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int64                  `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	Command   string                 `protobuf:"bytes,9,opt,name=command,proto3" json:"command"`
	// 以下为自定义参数
	SpuId            int64    `protobuf:"varint,11,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                                      //商品ID
	Coding           string   `protobuf:"bytes,12,opt,name=coding,proto3" json:"coding"`                                                  //编号
	Barcode          string   `protobuf:"bytes,13,opt,name=barcode,proto3" json:"barcode"`                                                //条码
	Unique           string   `protobuf:"bytes,14,opt,name=unique,proto3" json:"unique"`                                                  //唯一标识
	VirtualObjSpecId int64    `protobuf:"varint,15,opt,name=virtual_obj_spec_id,json=virtualObjSpecId,proto3" json:"virtual_obj_spec_id"` //虚拟对象规格ID
	SpuIds           []int64  `protobuf:"varint,16,rep,packed,name=spu_ids,json=spuIds,proto3" json:"spu_ids"`
	SkuIds           []int64  `protobuf:"varint,17,rep,packed,name=sku_ids,json=skuIds,proto3" json:"sku_ids"`
	UniqueList       []string `protobuf:"bytes,18,rep,name=unique_list,json=uniqueList,proto3" json:"unique_list"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SkuRequest) Reset() {
	*x = SkuRequest{}
	mi := &file_spuService_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuRequest) ProtoMessage() {}

func (x *SkuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuRequest.ProtoReflect.Descriptor instead.
func (*SkuRequest) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{4}
}

func (x *SkuRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *SkuRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *SkuRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SkuRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *SkuRequest) GetSorts() []string {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *SkuRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *SkuRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SkuRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SkuRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *SkuRequest) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SkuRequest) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *SkuRequest) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *SkuRequest) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *SkuRequest) GetVirtualObjSpecId() int64 {
	if x != nil {
		return x.VirtualObjSpecId
	}
	return 0
}

func (x *SkuRequest) GetSpuIds() []int64 {
	if x != nil {
		return x.SpuIds
	}
	return nil
}

func (x *SkuRequest) GetSkuIds() []int64 {
	if x != nil {
		return x.SkuIds
	}
	return nil
}

func (x *SkuRequest) GetUniqueList() []string {
	if x != nil {
		return x.UniqueList
	}
	return nil
}

// 商品库请求参数
type SpuRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Top       int32                  `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64                  `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string                 `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sorts     []string               `protobuf:"bytes,5,rep,name=sorts,proto3" json:"sorts"`
	DateRange []string               `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int64                `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int64                  `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	Command   string                 `protobuf:"bytes,9,opt,name=command,proto3" json:"command"`
	// 以下为自定义参数
	Type              string `protobuf:"bytes,11,opt,name=type,proto3" json:"type"`                                                       //商品类型
	ShopId            int64  `protobuf:"varint,12,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                    //分店ID
	CategoryId        int64  `protobuf:"varint,13,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                        //商品分类
	TaxonomyId        int64  `protobuf:"varint,14,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                        //商品类目
	BrandId           int32  `protobuf:"varint,15,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                 //品牌
	SpuName           string `protobuf:"bytes,16,opt,name=spu_name,json=spuName,proto3" json:"spu_name"`                                  //商品名称
	IsVirtual         string `protobuf:"bytes,17,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`                            //虚拟商品
	IsManySpec        string `protobuf:"bytes,18,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                       //多规格商品
	IsOpenWeigh       string `protobuf:"bytes,19,opt,name=is_open_weigh,json=isOpenWeigh,proto3" json:"is_open_weigh"`                    //开启称重
	SpuCode           string `protobuf:"bytes,20,opt,name=spu_code,json=spuCode,proto3" json:"spu_code"`                                  //SPU编码
	IsMultiBarcode    string `protobuf:"bytes,21,opt,name=is_multi_barcode,json=isMultiBarcode,proto3" json:"is_multi_barcode"`           //一品多码
	UnitId            int32  `protobuf:"varint,22,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`                                    //计量单位ID
	UnitType          string `protobuf:"bytes,23,opt,name=unit_type,json=unitType,proto3" json:"unit_type"`                               //计量单位类型
	Inventory         int64  `protobuf:"varint,24,opt,name=inventory,proto3" json:"inventory"`                                            //库存
	IsShelve          string `protobuf:"bytes,25,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`                               //是否上架
	SellMode          string `protobuf:"bytes,26,opt,name=sell_mode,json=sellMode,proto3" json:"sell_mode"`                               //销售模式
	DeductionType     string `protobuf:"bytes,27,opt,name=deduction_type,json=deductionType,proto3" json:"deduction_type"`                //库存扣减类型
	IsBuyRight        string `protobuf:"bytes,28,opt,name=is_buy_right,json=isBuyRight,proto3" json:"is_buy_right"`                       //购买权限
	IsVipPrice        string `protobuf:"bytes,29,opt,name=is_vip_price,json=isVipPrice,proto3" json:"is_vip_price"`                       //是否会员折扣价
	FreightType       string `protobuf:"bytes,30,opt,name=freight_type,json=freightType,proto3" json:"freight_type"`                      //运费模式
	FreightTemplateId int64  `protobuf:"varint,31,opt,name=freight_template_id,json=freightTemplateId,proto3" json:"freight_template_id"` //运费模板
	PrimaryLabel      string `protobuf:"bytes,32,opt,name=primary_label,json=primaryLabel,proto3" json:"primary_label"`                   //关键标签
	DetailTemplateId  int64  `protobuf:"varint,33,opt,name=detail_template_id,json=detailTemplateId,proto3" json:"detail_template_id"`    //详情模板
	Status            string `protobuf:"bytes,34,opt,name=status,proto3" json:"status"`                                                   //商品状态
	VirtualObjId      int64  `protobuf:"varint,35,opt,name=virtual_obj_id,json=virtualObjId,proto3" json:"virtual_obj_id"`                //虚拟对象ID
	VirtualObjSpecId  int64  `protobuf:"varint,36,opt,name=virtual_obj_spec_id,json=virtualObjSpecId,proto3" json:"virtual_obj_spec_id"`  //虚拟对象规格ID
	OutSystemId       string `protobuf:"bytes,37,opt,name=out_system_id,json=outSystemId,proto3" json:"out_system_id"`                    //外部系统ID
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SpuRequest) Reset() {
	*x = SpuRequest{}
	mi := &file_spuService_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuRequest) ProtoMessage() {}

func (x *SpuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuRequest.ProtoReflect.Descriptor instead.
func (*SpuRequest) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{5}
}

func (x *SpuRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *SpuRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *SpuRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SpuRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *SpuRequest) GetSorts() []string {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *SpuRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *SpuRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SpuRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *SpuRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SpuRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *SpuRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SpuRequest) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *SpuRequest) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *SpuRequest) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *SpuRequest) GetIsVirtual() string {
	if x != nil {
		return x.IsVirtual
	}
	return ""
}

func (x *SpuRequest) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *SpuRequest) GetIsOpenWeigh() string {
	if x != nil {
		return x.IsOpenWeigh
	}
	return ""
}

func (x *SpuRequest) GetSpuCode() string {
	if x != nil {
		return x.SpuCode
	}
	return ""
}

func (x *SpuRequest) GetIsMultiBarcode() string {
	if x != nil {
		return x.IsMultiBarcode
	}
	return ""
}

func (x *SpuRequest) GetUnitId() int32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *SpuRequest) GetUnitType() string {
	if x != nil {
		return x.UnitType
	}
	return ""
}

func (x *SpuRequest) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *SpuRequest) GetIsShelve() string {
	if x != nil {
		return x.IsShelve
	}
	return ""
}

func (x *SpuRequest) GetSellMode() string {
	if x != nil {
		return x.SellMode
	}
	return ""
}

func (x *SpuRequest) GetDeductionType() string {
	if x != nil {
		return x.DeductionType
	}
	return ""
}

func (x *SpuRequest) GetIsBuyRight() string {
	if x != nil {
		return x.IsBuyRight
	}
	return ""
}

func (x *SpuRequest) GetIsVipPrice() string {
	if x != nil {
		return x.IsVipPrice
	}
	return ""
}

func (x *SpuRequest) GetFreightType() string {
	if x != nil {
		return x.FreightType
	}
	return ""
}

func (x *SpuRequest) GetFreightTemplateId() int64 {
	if x != nil {
		return x.FreightTemplateId
	}
	return 0
}

func (x *SpuRequest) GetPrimaryLabel() string {
	if x != nil {
		return x.PrimaryLabel
	}
	return ""
}

func (x *SpuRequest) GetDetailTemplateId() int64 {
	if x != nil {
		return x.DetailTemplateId
	}
	return 0
}

func (x *SpuRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SpuRequest) GetVirtualObjId() int64 {
	if x != nil {
		return x.VirtualObjId
	}
	return 0
}

func (x *SpuRequest) GetVirtualObjSpecId() int64 {
	if x != nil {
		return x.VirtualObjSpecId
	}
	return 0
}

func (x *SpuRequest) GetOutSystemId() string {
	if x != nil {
		return x.OutSystemId
	}
	return ""
}

// 商品库响应数据
type SpuResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           string                 `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg"`
	Pager         *common.Pager          `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Entity        *Spu                   `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity"`
	Items         []*Spu                 `protobuf:"bytes,4,rep,name=items,proto3" json:"items"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpuResponse) Reset() {
	*x = SpuResponse{}
	mi := &file_spuService_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuResponse) ProtoMessage() {}

func (x *SpuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuResponse.ProtoReflect.Descriptor instead.
func (*SpuResponse) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{6}
}

func (x *SpuResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SpuResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *SpuResponse) GetEntity() *Spu {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SpuResponse) GetItems() []*Spu {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_spuService_proto protoreflect.FileDescriptor

const file_spuService_proto_rawDesc = "" +
	"\n" +
	"\x10spuService.proto\x12\bservices\x1a\x11common/base.proto\x1a\x15baseInfoService.proto\x1a\x12brandService.proto\x1a\x15categoryService.proto\x1a\x12groupService.proto\x1a\x12labelService.proto\x1a\x17spuPresaleService.proto\"\xfe\x15\n" +
	"\x03Spu\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x17\n" +
	"\ashop_id\x18\x03 \x01(\x03R\x06shopId\x12\x1f\n" +
	"\vcategory_id\x18\x04 \x01(\x03R\n" +
	"categoryId\x12\x1f\n" +
	"\vtaxonomy_id\x18\x05 \x01(\x03R\n" +
	"taxonomyId\x12\x19\n" +
	"\bbrand_id\x18\x06 \x01(\x05R\abrandId\x12\x19\n" +
	"\bspu_name\x18\a \x01(\tR\aspuName\x12\x19\n" +
	"\bspu_code\x18\b \x01(\tR\aspuCode\x12\x1b\n" +
	"\tsell_mode\x18\t \x01(\tR\bsellMode\x12\x1b\n" +
	"\timage_url\x18\n" +
	" \x01(\tR\bimageUrl\x12\x1b\n" +
	"\tvideo_url\x18\v \x01(\tR\bvideoUrl\x12*\n" +
	"\x11explain_video_url\x18\f \x01(\tR\x0fexplainVideoUrl\x12\x1d\n" +
	"\n" +
	"is_virtual\x18\r \x01(\tR\tisVirtual\x12!\n" +
	"\fvirtual_type\x18\x0e \x01(\tR\vvirtualType\x12 \n" +
	"\fis_many_spec\x18\x0f \x01(\tR\n" +
	"isManySpec\x12\"\n" +
	"\ris_open_weigh\x18\x10 \x01(\tR\visOpenWeigh\x12&\n" +
	"\x0fis_more_barcode\x18\x11 \x01(\tR\risMoreBarcode\x12\x17\n" +
	"\aunit_id\x18\x12 \x01(\x05R\x06unitId\x12\x1b\n" +
	"\tunit_name\x18\x13 \x01(\tR\bunitName\x12\x1b\n" +
	"\tunit_type\x18\x14 \x01(\tR\bunitType\x12\x1c\n" +
	"\tinventory\x18\x15 \x01(\x03R\tinventory\x12\x1d\n" +
	"\n" +
	"frozen_num\x18\x16 \x01(\x03R\tfrozenNum\x12%\n" +
	"\x0ededuction_type\x18\x17 \x01(\tR\rdeductionType\x12\x1b\n" +
	"\tis_shelve\x18\x18 \x01(\tR\bisShelve\x12 \n" +
	"\fis_buy_right\x18\x19 \x01(\tR\n" +
	"isBuyRight\x12 \n" +
	"\fis_vip_price\x18\x1a \x01(\tR\n" +
	"isVipPrice\x12\x1f\n" +
	"\vvip_product\x18\x1b \x01(\tR\n" +
	"vipProduct\x12\x1d\n" +
	"\n" +
	"is_oversea\x18\x1c \x01(\tR\tisOversea\x12,\n" +
	"\x12min_original_price\x18\x1d \x01(\x03R\x10minOriginalPrice\x12,\n" +
	"\x12max_original_price\x18\x1e \x01(\x03R\x10maxOriginalPrice\x12\x1b\n" +
	"\tmin_price\x18\x1f \x01(\x03R\bminPrice\x12\x1b\n" +
	"\tmax_price\x18  \x01(\x03R\bmaxPrice\x12\x17\n" +
	"\amin_qty\x18! \x01(\x03R\x06minQty\x12\x19\n" +
	"\bis_limit\x18\" \x01(\tR\aisLimit\x12\x1d\n" +
	"\n" +
	"limit_type\x18# \x01(\tR\tlimitType\x12\x1b\n" +
	"\tlimit_num\x18$ \x01(\x03R\blimitNum\x12\x1a\n" +
	"\bcomments\x18% \x01(\x03R\bcomments\x12\x18\n" +
	"\abrowses\x18& \x01(\x03R\abrowses\x12\x14\n" +
	"\x05sales\x18' \x01(\x03R\x05sales\x12\x1a\n" +
	"\bfictions\x18( \x01(\x03R\bfictions\x12\x1f\n" +
	"\vbutton_mode\x18) \x01(\tR\n" +
	"buttonMode\x12#\n" +
	"\rbutton_custom\x18* \x01(\tR\fbuttonCustom\x12\x1c\n" +
	"\tlogistics\x18+ \x03(\tR\tlogistics\x12!\n" +
	"\ffreight_type\x18, \x01(\tR\vfreightType\x12#\n" +
	"\rfreight_price\x18- \x01(\x03R\ffreightPrice\x12.\n" +
	"\x13freight_template_id\x18. \x01(\x03R\x11freightTemplateId\x12,\n" +
	"\x12detail_template_id\x18/ \x01(\x03R\x10detailTemplateId\x12\x18\n" +
	"\acontent\x180 \x01(\tR\acontent\x12!\n" +
	"\fselling_desc\x181 \x01(\tR\vsellingDesc\x12\x1d\n" +
	"\n" +
	"share_desc\x182 \x01(\tR\tshareDesc\x12\x1b\n" +
	"\tseo_title\x183 \x01(\tR\bseoTitle\x12!\n" +
	"\fseo_keywords\x184 \x01(\tR\vseoKeywords\x12\x19\n" +
	"\bseo_desc\x185 \x01(\tR\aseoDesc\x12\x12\n" +
	"\x04sort\x186 \x01(\x05R\x04sort\x12\x17\n" +
	"\ais_gift\x187 \x01(\tR\x06isGift\x12\x1d\n" +
	"\n" +
	"gift_price\x188 \x01(\x03R\tgiftPrice\x12$\n" +
	"\x0evirtual_obj_id\x189 \x01(\x03R\fvirtualObjId\x12\"\n" +
	"\rout_system_id\x18: \x01(\tR\voutSystemId\x12\x16\n" +
	"\x06status\x18; \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"updated_at\x18< \x01(\x03R\tupdatedAt\x12\x1d\n" +
	"\n" +
	"created_at\x18= \x01(\x03R\tcreatedAt\x12*\n" +
	"\x11ot_original_price\x18@ \x01(\x03R\x0fotOriginalPrice\x12\x19\n" +
	"\bot_price\x18A \x01(\x03R\aotPrice\x12 \n" +
	"\fot_vip_price\x18B \x01(\x03R\n" +
	"otVipPrice\x12,\n" +
	"\x12ot_promotion_price\x18C \x01(\x03R\x10otPromotionPrice\x12%\n" +
	"\x05brand\x18D \x01(\v2\x0f.services.BrandR\x05brand\x12.\n" +
	"\bcategory\x18E \x01(\v2\x12.services.CategoryR\bcategory\x12.\n" +
	"\apresale\x18F \x01(\v2\x14.services.SpuPresaleR\apresale\x12*\n" +
	"\x06photos\x18G \x03(\v2\x12.services.SpuPhotoR\x06photos\x12'\n" +
	"\x06groups\x18H \x03(\v2\x0f.services.GroupR\x06groups\x12!\n" +
	"\x04skus\x18I \x03(\v2\r.services.SkuR\x04skus\x12\x1f\n" +
	"\x03sku\x18J \x01(\v2\r.services.SkuR\x03sku\x12'\n" +
	"\x06labels\x18K \x03(\v2\x0f.services.LabelR\x06labels\x124\n" +
	"\n" +
	"spec_types\x18L \x03(\v2\x15.services.SpuSpecTypeR\tspecTypes\x12%\n" +
	"\x0ecomments_count\x18M \x01(\x03R\rcommentsCount\x12\x1b\n" +
	"\tgoods_url\x18N \x01(\tR\bgoodsUrl\x12\x1f\n" +
	"\vcontent_web\x18O \x01(\tR\n" +
	"contentWeb\x12\x1f\n" +
	"\vcontent_app\x18P \x01(\tR\n" +
	"contentApp\x12\x1d\n" +
	"\n" +
	"brand_name\x18Q \x01(\tR\tbrandName\x12\x1f\n" +
	"\vstatus_name\x18R \x01(\tR\n" +
	"statusName\x12\x19\n" +
	"\bis_error\x18S \x01(\tR\aisError\x12\x1b\n" +
	"\terror_msg\x18T \x01(\tR\berrorMsg\x12\x19\n" +
	"\bis_favor\x18U \x01(\tR\aisFavor\x12\x18\n" +
	"\achecked\x18V \x01(\bR\achecked\x12\x1b\n" +
	"\tlabel_ids\x18W \x03(\x05R\blabelIds\x12\x1b\n" +
	"\tgroup_ids\x18X \x03(\x03R\bgroupIds\"\xac\r\n" +
	"\aSpuEdit\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x17\n" +
	"\ashop_id\x18\x03 \x01(\x03R\x06shopId\x12\x1f\n" +
	"\vcategory_id\x18\x04 \x01(\x03R\n" +
	"categoryId\x12\x1f\n" +
	"\vtaxonomy_id\x18\x05 \x01(\x03R\n" +
	"taxonomyId\x12\x19\n" +
	"\bbrand_id\x18\x06 \x01(\x05R\abrandId\x12\x19\n" +
	"\bspu_name\x18\a \x01(\tR\aspuName\x12\x18\n" +
	"\acontent\x18\b \x01(\tR\acontent\x12!\n" +
	"\fselling_desc\x18\t \x01(\tR\vsellingDesc\x12\x1d\n" +
	"\n" +
	"share_desc\x18\n" +
	" \x01(\tR\tshareDesc\x12\x1b\n" +
	"\timage_url\x18\v \x01(\tR\bimageUrl\x12\x1b\n" +
	"\tvideo_url\x18\f \x01(\tR\bvideoUrl\x12*\n" +
	"\x11explain_video_url\x18\r \x01(\tR\x0fexplainVideoUrl\x12\x1d\n" +
	"\n" +
	"is_virtual\x18\x0e \x01(\tR\tisVirtual\x12!\n" +
	"\fvirtual_type\x18\x0f \x01(\tR\vvirtualType\x12 \n" +
	"\fis_many_spec\x18\x10 \x01(\tR\n" +
	"isManySpec\x12\"\n" +
	"\ris_open_weigh\x18\x11 \x01(\tR\visOpenWeigh\x12\x19\n" +
	"\bspu_code\x18\x12 \x01(\tR\aspuCode\x12&\n" +
	"\x0fis_more_barcode\x18\x13 \x01(\tR\risMoreBarcode\x12\x17\n" +
	"\aunit_id\x18\x14 \x01(\x05R\x06unitId\x12\x1b\n" +
	"\tunit_name\x18\x15 \x01(\tR\bunitName\x12\x1b\n" +
	"\tis_shelve\x18\x17 \x01(\tR\bisShelve\x12\x1b\n" +
	"\tsell_mode\x18\x18 \x01(\tR\bsellMode\x12%\n" +
	"\x0ededuction_type\x18\x19 \x01(\tR\rdeductionType\x12 \n" +
	"\fis_buy_right\x18\x1a \x01(\tR\n" +
	"isBuyRight\x12 \n" +
	"\fis_vip_price\x18\x1b \x01(\tR\n" +
	"isVipPrice\x12\x1f\n" +
	"\vvip_product\x18\x1c \x01(\tR\n" +
	"vipProduct\x12\x17\n" +
	"\amin_qty\x18  \x01(\x03R\x06minQty\x12\x19\n" +
	"\bis_limit\x18! \x01(\tR\aisLimit\x12\x1d\n" +
	"\n" +
	"limit_type\x18\" \x01(\tR\tlimitType\x12\x1b\n" +
	"\tlimit_num\x18# \x01(\x03R\blimitNum\x12\x1a\n" +
	"\bfictions\x18% \x01(\x03R\bfictions\x12\x1f\n" +
	"\vbutton_mode\x18& \x01(\tR\n" +
	"buttonMode\x12#\n" +
	"\rbutton_custom\x18' \x01(\tR\fbuttonCustom\x12\x1c\n" +
	"\tlogistics\x18( \x03(\tR\tlogistics\x12!\n" +
	"\ffreight_type\x18) \x01(\tR\vfreightType\x12#\n" +
	"\rfreight_price\x18* \x01(\x03R\ffreightPrice\x12.\n" +
	"\x13freight_template_id\x18+ \x01(\x03R\x11freightTemplateId\x12,\n" +
	"\x12detail_template_id\x18/ \x01(\x03R\x10detailTemplateId\x12\x1b\n" +
	"\tseo_title\x180 \x01(\tR\bseoTitle\x12!\n" +
	"\fseo_keywords\x181 \x01(\tR\vseoKeywords\x12\x19\n" +
	"\bseo_desc\x182 \x01(\tR\aseoDesc\x12\x12\n" +
	"\x04sort\x183 \x01(\x05R\x04sort\x12\x17\n" +
	"\ais_gift\x184 \x01(\tR\x06isGift\x12\x1d\n" +
	"\n" +
	"gift_price\x185 \x01(\x03R\tgiftPrice\x12\x16\n" +
	"\x06status\x186 \x01(\tR\x06status\x12.\n" +
	"\apresale\x18B \x01(\v2\x14.services.SpuPresaleR\apresale\x12*\n" +
	"\x06photos\x18C \x03(\v2\x12.services.SpuPhotoR\x06photos\x12!\n" +
	"\x04skus\x18D \x03(\v2\r.services.SkuR\x04skus\x12\x1f\n" +
	"\x03sku\x18E \x01(\v2\r.services.SkuR\x03sku\x124\n" +
	"\n" +
	"spec_types\x18F \x03(\v2\x15.services.SpuSpecTypeR\tspecTypes\x12\x1b\n" +
	"\tlabel_ids\x18G \x03(\x05R\blabelIds\x12\x1b\n" +
	"\tgroup_ids\x18H \x03(\x03R\bgroupIds\"\xe9\x04\n" +
	"\x03Sku\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x15\n" +
	"\x06spu_id\x18\x02 \x01(\x03R\x05spuId\x12\x16\n" +
	"\x06unique\x18\x03 \x01(\tR\x06unique\x12\x16\n" +
	"\x06coding\x18\x04 \x01(\tR\x06coding\x12\x18\n" +
	"\abarcode\x18\x05 \x01(\tR\abarcode\x12#\n" +
	"\rmore_barcodes\x18\x06 \x03(\tR\fmoreBarcodes\x12%\n" +
	"\x0eoriginal_price\x18\a \x01(\x03R\roriginalPrice\x12\x1d\n" +
	"\n" +
	"cost_price\x18\b \x01(\x03R\tcostPrice\x12\x14\n" +
	"\x05price\x18\t \x01(\x03R\x05price\x12\x1c\n" +
	"\tinventory\x18\n" +
	" \x01(\x03R\tinventory\x12\x1d\n" +
	"\n" +
	"frozen_num\x18\v \x01(\x03R\tfrozenNum\x12\x16\n" +
	"\x06weight\x18\f \x01(\x03R\x06weight\x12\x16\n" +
	"\x06volume\x18\r \x01(\x03R\x06volume\x12)\n" +
	"\x04spec\x18\x0e \x03(\v2\x15.services.SkuSpecInfoR\x04spec\x12\x1b\n" +
	"\tspec_desc\x18\x0f \x01(\tR\bspecDesc\x12-\n" +
	"\x13virtual_obj_spec_id\x18\x10 \x01(\x03R\x10virtualObjSpecId\x12-\n" +
	"\x13out_system_child_id\x18\x11 \x01(\tR\x10outSystemChildId\x12\x1d\n" +
	"\n" +
	"created_at\x18\x12 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x13 \x01(\x03R\tupdatedAt\x12\x1f\n" +
	"\x03spu\x18\x14 \x01(\v2\r.services.SpuR\x03spu\"\xbb\x01\n" +
	"\bSpuPhoto\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x15\n" +
	"\x06spu_id\x18\x02 \x01(\x03R\x05spuId\x12\x19\n" +
	"\bimage_id\x18\x03 \x01(\x03R\aimageId\x12\x1b\n" +
	"\timage_url\x18\x04 \x01(\tR\bimageUrl\x12\x12\n" +
	"\x04sort\x18\a \x01(\x05R\x04sort\x12\x1d\n" +
	"\n" +
	"created_at\x18\b \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\t \x01(\x03R\tupdatedAt\"\xc1\x03\n" +
	"\n" +
	"SkuRequest\x12\x10\n" +
	"\x03top\x18\x01 \x01(\x05R\x03top\x12\x14\n" +
	"\x05paged\x18\x02 \x01(\x03R\x05paged\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x03R\bpageSize\x12\x1a\n" +
	"\bkeywords\x18\x04 \x01(\tR\bkeywords\x12\x14\n" +
	"\x05sorts\x18\x05 \x03(\tR\x05sorts\x12\x1d\n" +
	"\n" +
	"date_range\x18\x06 \x03(\tR\tdateRange\x12\x10\n" +
	"\x03ids\x18\a \x03(\x03R\x03ids\x12\x0e\n" +
	"\x02id\x18\b \x01(\x03R\x02id\x12\x18\n" +
	"\acommand\x18\t \x01(\tR\acommand\x12\x15\n" +
	"\x06spu_id\x18\v \x01(\x03R\x05spuId\x12\x16\n" +
	"\x06coding\x18\f \x01(\tR\x06coding\x12\x18\n" +
	"\abarcode\x18\r \x01(\tR\abarcode\x12\x16\n" +
	"\x06unique\x18\x0e \x01(\tR\x06unique\x12-\n" +
	"\x13virtual_obj_spec_id\x18\x0f \x01(\x03R\x10virtualObjSpecId\x12\x17\n" +
	"\aspu_ids\x18\x10 \x03(\x03R\x06spuIds\x12\x17\n" +
	"\asku_ids\x18\x11 \x03(\x03R\x06skuIds\x12\x1f\n" +
	"\vunique_list\x18\x12 \x03(\tR\n" +
	"uniqueList\"\xdd\b\n" +
	"\n" +
	"SpuRequest\x12\x10\n" +
	"\x03top\x18\x01 \x01(\x05R\x03top\x12\x14\n" +
	"\x05paged\x18\x02 \x01(\x03R\x05paged\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x03R\bpageSize\x12\x1a\n" +
	"\bkeywords\x18\x04 \x01(\tR\bkeywords\x12\x14\n" +
	"\x05sorts\x18\x05 \x03(\tR\x05sorts\x12\x1d\n" +
	"\n" +
	"date_range\x18\x06 \x03(\tR\tdateRange\x12\x10\n" +
	"\x03ids\x18\a \x03(\x03R\x03ids\x12\x0e\n" +
	"\x02id\x18\b \x01(\x03R\x02id\x12\x18\n" +
	"\acommand\x18\t \x01(\tR\acommand\x12\x12\n" +
	"\x04type\x18\v \x01(\tR\x04type\x12\x17\n" +
	"\ashop_id\x18\f \x01(\x03R\x06shopId\x12\x1f\n" +
	"\vcategory_id\x18\r \x01(\x03R\n" +
	"categoryId\x12\x1f\n" +
	"\vtaxonomy_id\x18\x0e \x01(\x03R\n" +
	"taxonomyId\x12\x19\n" +
	"\bbrand_id\x18\x0f \x01(\x05R\abrandId\x12\x19\n" +
	"\bspu_name\x18\x10 \x01(\tR\aspuName\x12\x1d\n" +
	"\n" +
	"is_virtual\x18\x11 \x01(\tR\tisVirtual\x12 \n" +
	"\fis_many_spec\x18\x12 \x01(\tR\n" +
	"isManySpec\x12\"\n" +
	"\ris_open_weigh\x18\x13 \x01(\tR\visOpenWeigh\x12\x19\n" +
	"\bspu_code\x18\x14 \x01(\tR\aspuCode\x12(\n" +
	"\x10is_multi_barcode\x18\x15 \x01(\tR\x0eisMultiBarcode\x12\x17\n" +
	"\aunit_id\x18\x16 \x01(\x05R\x06unitId\x12\x1b\n" +
	"\tunit_type\x18\x17 \x01(\tR\bunitType\x12\x1c\n" +
	"\tinventory\x18\x18 \x01(\x03R\tinventory\x12\x1b\n" +
	"\tis_shelve\x18\x19 \x01(\tR\bisShelve\x12\x1b\n" +
	"\tsell_mode\x18\x1a \x01(\tR\bsellMode\x12%\n" +
	"\x0ededuction_type\x18\x1b \x01(\tR\rdeductionType\x12 \n" +
	"\fis_buy_right\x18\x1c \x01(\tR\n" +
	"isBuyRight\x12 \n" +
	"\fis_vip_price\x18\x1d \x01(\tR\n" +
	"isVipPrice\x12!\n" +
	"\ffreight_type\x18\x1e \x01(\tR\vfreightType\x12.\n" +
	"\x13freight_template_id\x18\x1f \x01(\x03R\x11freightTemplateId\x12#\n" +
	"\rprimary_label\x18  \x01(\tR\fprimaryLabel\x12,\n" +
	"\x12detail_template_id\x18! \x01(\x03R\x10detailTemplateId\x12\x16\n" +
	"\x06status\x18\" \x01(\tR\x06status\x12$\n" +
	"\x0evirtual_obj_id\x18# \x01(\x03R\fvirtualObjId\x12-\n" +
	"\x13virtual_obj_spec_id\x18$ \x01(\x03R\x10virtualObjSpecId\x12\"\n" +
	"\rout_system_id\x18% \x01(\tR\voutSystemId\"\x90\x01\n" +
	"\vSpuResponse\x12\x10\n" +
	"\x03msg\x18\x01 \x01(\tR\x03msg\x12#\n" +
	"\x05pager\x18\x02 \x01(\v2\r.common.PagerR\x05pager\x12%\n" +
	"\x06entity\x18\x03 \x01(\v2\r.services.SpuR\x06entity\x12#\n" +
	"\x05items\x18\x04 \x03(\v2\r.services.SpuR\x05items2\xb7\x03\n" +
	"\n" +
	"SpuService\x124\n" +
	"\x06Create\x12\x11.services.SpuEdit\x1a\x15.services.SpuResponse\"\x00\x124\n" +
	"\x06Update\x12\x11.services.SpuEdit\x1a\x15.services.SpuResponse\"\x00\x120\n" +
	"\x06Delete\x12\r.services.Spu\x1a\x15.services.SpuResponse\"\x00\x12-\n" +
	"\x03Get\x12\r.services.Spu\x1a\x15.services.SpuResponse\"\x00\x120\n" +
	"\x06Detail\x12\r.services.Spu\x1a\x15.services.SpuResponse\"\x00\x127\n" +
	"\x06Search\x12\x14.services.SpuRequest\x1a\x15.services.SpuResponse\"\x00\x125\n" +
	"\x04List\x12\x14.services.SpuRequest\x1a\x15.services.SpuResponse\"\x00\x12:\n" +
	"\tBatchExec\x12\x14.services.SpuRequest\x1a\x15.services.SpuResponse\"\x00B\rZ\v/.;servicesb\x06proto3"

var (
	file_spuService_proto_rawDescOnce sync.Once
	file_spuService_proto_rawDescData []byte
)

func file_spuService_proto_rawDescGZIP() []byte {
	file_spuService_proto_rawDescOnce.Do(func() {
		file_spuService_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spuService_proto_rawDesc), len(file_spuService_proto_rawDesc)))
	})
	return file_spuService_proto_rawDescData
}

var file_spuService_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_spuService_proto_goTypes = []any{
	(*Spu)(nil),          // 0: services.Spu
	(*SpuEdit)(nil),      // 1: services.SpuEdit
	(*Sku)(nil),          // 2: services.Sku
	(*SpuPhoto)(nil),     // 3: services.SpuPhoto
	(*SkuRequest)(nil),   // 4: services.SkuRequest
	(*SpuRequest)(nil),   // 5: services.SpuRequest
	(*SpuResponse)(nil),  // 6: services.SpuResponse
	(*Brand)(nil),        // 7: services.Brand
	(*Category)(nil),     // 8: services.Category
	(*SpuPresale)(nil),   // 9: services.SpuPresale
	(*Group)(nil),        // 10: services.Group
	(*Label)(nil),        // 11: services.Label
	(*SpuSpecType)(nil),  // 12: services.SpuSpecType
	(*SkuSpecInfo)(nil),  // 13: services.SkuSpecInfo
	(*common.Pager)(nil), // 14: common.Pager
}
var file_spuService_proto_depIdxs = []int32{
	7,  // 0: services.Spu.brand:type_name -> services.Brand
	8,  // 1: services.Spu.category:type_name -> services.Category
	9,  // 2: services.Spu.presale:type_name -> services.SpuPresale
	3,  // 3: services.Spu.photos:type_name -> services.SpuPhoto
	10, // 4: services.Spu.groups:type_name -> services.Group
	2,  // 5: services.Spu.skus:type_name -> services.Sku
	2,  // 6: services.Spu.sku:type_name -> services.Sku
	11, // 7: services.Spu.labels:type_name -> services.Label
	12, // 8: services.Spu.spec_types:type_name -> services.SpuSpecType
	9,  // 9: services.SpuEdit.presale:type_name -> services.SpuPresale
	3,  // 10: services.SpuEdit.photos:type_name -> services.SpuPhoto
	2,  // 11: services.SpuEdit.skus:type_name -> services.Sku
	2,  // 12: services.SpuEdit.sku:type_name -> services.Sku
	12, // 13: services.SpuEdit.spec_types:type_name -> services.SpuSpecType
	13, // 14: services.Sku.spec:type_name -> services.SkuSpecInfo
	0,  // 15: services.Sku.spu:type_name -> services.Spu
	14, // 16: services.SpuResponse.pager:type_name -> common.Pager
	0,  // 17: services.SpuResponse.entity:type_name -> services.Spu
	0,  // 18: services.SpuResponse.items:type_name -> services.Spu
	1,  // 19: services.SpuService.Create:input_type -> services.SpuEdit
	1,  // 20: services.SpuService.Update:input_type -> services.SpuEdit
	0,  // 21: services.SpuService.Delete:input_type -> services.Spu
	0,  // 22: services.SpuService.Get:input_type -> services.Spu
	0,  // 23: services.SpuService.Detail:input_type -> services.Spu
	5,  // 24: services.SpuService.Search:input_type -> services.SpuRequest
	5,  // 25: services.SpuService.List:input_type -> services.SpuRequest
	5,  // 26: services.SpuService.BatchExec:input_type -> services.SpuRequest
	6,  // 27: services.SpuService.Create:output_type -> services.SpuResponse
	6,  // 28: services.SpuService.Update:output_type -> services.SpuResponse
	6,  // 29: services.SpuService.Delete:output_type -> services.SpuResponse
	6,  // 30: services.SpuService.Get:output_type -> services.SpuResponse
	6,  // 31: services.SpuService.Detail:output_type -> services.SpuResponse
	6,  // 32: services.SpuService.Search:output_type -> services.SpuResponse
	6,  // 33: services.SpuService.List:output_type -> services.SpuResponse
	6,  // 34: services.SpuService.BatchExec:output_type -> services.SpuResponse
	27, // [27:35] is the sub-list for method output_type
	19, // [19:27] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_spuService_proto_init() }
func file_spuService_proto_init() {
	if File_spuService_proto != nil {
		return
	}
	file_baseInfoService_proto_init()
	file_brandService_proto_init()
	file_categoryService_proto_init()
	file_groupService_proto_init()
	file_labelService_proto_init()
	file_spuPresaleService_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spuService_proto_rawDesc), len(file_spuService_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spuService_proto_goTypes,
		DependencyIndexes: file_spuService_proto_depIdxs,
		MessageInfos:      file_spuService_proto_msgTypes,
	}.Build()
	File_spuService_proto = out.File
	file_spuService_proto_goTypes = nil
	file_spuService_proto_depIdxs = nil
}
