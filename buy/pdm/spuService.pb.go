// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: spuService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Spu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                                   //ID
	TaxonomyId           int64               `protobuf:"varint,2,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                                 //标准类目ID
	CategoryId           int64               `protobuf:"varint,3,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                                 //商品分类ID
	BrandId              int32               `protobuf:"varint,4,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                          //品牌ID
	ShopId               int64               `protobuf:"varint,5,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                             //分店ID
	Title                string              `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`                                                              //商品标题
	TitleColor           string              `protobuf:"bytes,7,opt,name=title_color,json=titleColor,proto3" json:"title_color"`                                  //标题颜色
	SimpleDesc           string              `protobuf:"bytes,8,opt,name=simple_desc,json=simpleDesc,proto3" json:"simple_desc"`                                  //简述
	Type                 string              `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`                                                                //商品类型：product商品,material原料,assets资产
	SiteType             string              `protobuf:"bytes,10,opt,name=site_type,json=siteType,proto3" json:"site_type"`                                       //商品类型
	Unit                 string              `protobuf:"bytes,11,opt,name=unit,proto3" json:"unit"`                                                               //计量单位
	PlaceOriginId        int64               `protobuf:"varint,12,opt,name=place_origin_id,json=placeOriginId,proto3" json:"place_origin_id"`                     //产地ID（地区省id）
	Inventory            int32               `protobuf:"varint,13,opt,name=inventory,proto3" json:"inventory"`                                                    //库存（所有规格库存总和）
	ImageId              int64               `protobuf:"varint,14,opt,name=image_id,json=imageId,proto3" json:"image_id"`                                         //商品主图ID
	ImageUrl             string              `protobuf:"bytes,15,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                                       //商品主图url
	VideoId              int64               `protobuf:"varint,16,opt,name=video_id,json=videoId,proto3" json:"video_id"`                                         //短视频ID
	VideoUrl             string              `protobuf:"bytes,17,opt,name=video_url,json=videoUrl,proto3" json:"video_url"`                                       //短视频url
	Content              string              `protobuf:"bytes,18,opt,name=content,proto3" json:"content"`                                                         //商品内容
	TemplateId           int32               `protobuf:"varint,19,opt,name=template_id,json=templateId,proto3" json:"template_id"`                                //商品详情模板信息
	IsManySpec           string              `protobuf:"bytes,20,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                               //是否多规格商品,否则为单品
	IsDeductionInventory string              `protobuf:"bytes,21,opt,name=is_deduction_inventory,json=isDeductionInventory,proto3" json:"is_deduction_inventory"` //是否扣减库存（0否, 1是）
	IsListed             string              `protobuf:"bytes,22,opt,name=is_listed,json=isListed,proto3" json:"is_listed"`                                       //是否上架（下架后用户不可见, 0否, 1是）
	IsMemberRight        string              `protobuf:"bytes,23,opt,name=is_member_right,json=isMemberRight,proto3" json:"is_member_right"`                      //是否设置商品购买权限（0否, 1是）
	IsMemberPrice        string              `protobuf:"bytes,24,opt,name=is_member_price,json=isMemberPrice,proto3" json:"is_member_price"`                      //是否参与会员折扣价（0否, 1是）
	MinOriginalPrice     int64               `protobuf:"varint,25,opt,name=min_original_price,json=minOriginalPrice,proto3" json:"min_original_price"`            //最低原价
	MaxOriginalPrice     int64               `protobuf:"varint,26,opt,name=max_original_price,json=maxOriginalPrice,proto3" json:"max_original_price"`            //最大原价
	MinPrice             int64               `protobuf:"varint,27,opt,name=min_price,json=minPrice,proto3" json:"min_price"`                                      //最低价格
	MaxPrice             int64               `protobuf:"varint,28,opt,name=max_price,json=maxPrice,proto3" json:"max_price"`                                      //最高价格
	ShowOriginalPrice    string              `protobuf:"bytes,29,opt,name=show_original_price,json=showOriginalPrice,proto3" json:"show_original_price"`          //显示原价（单值:10, 区间:10.00-20.00）一般用于展示使用
	ShowPrice            string              `protobuf:"bytes,30,opt,name=show_price,json=showPrice,proto3" json:"show_price"`                                    //显示销售价格（单值:10, 区间:10.00-20.00）一般用于展示使用
	BuyMinNumber         int32               `protobuf:"varint,31,opt,name=buy_min_number,json=buyMinNumber,proto3" json:"buy_min_number"`                        //最低起购数量（默认1）
	BuyMaxNumber         int32               `protobuf:"varint,32,opt,name=buy_max_number,json=buyMaxNumber,proto3" json:"buy_max_number"`                        //最大购买数量（最大数值 100000000, 小于等于0或空则不限）
	GiveIntegral         int32               `protobuf:"varint,33,opt,name=give_integral,json=giveIntegral,proto3" json:"give_integral"`                          //购买赠送积分比例
	PhotoCount           int32               `protobuf:"varint,34,opt,name=photo_count,json=photoCount,proto3" json:"photo_count"`                                //相册图片数量
	SaleCount            int32               `protobuf:"varint,35,opt,name=sale_count,json=saleCount,proto3" json:"sale_count"`                                   //销量
	AccessCount          int32               `protobuf:"varint,36,opt,name=access_count,json=accessCount,proto3" json:"access_count"`                             //访问次数
	FableSaleCount       int32               `protobuf:"varint,37,opt,name=fable_sale_count,json=fableSaleCount,proto3" json:"fable_sale_count"`                  //虚构销量（前端展示销量时会加上虚假销量）
	ButtonMode           string              `protobuf:"bytes,38,opt,name=button_mode,json=buttonMode,proto3" json:"button_mode"`                                 //立即购买按钮：1默认名称，2自定义名称
	ButtonCustom         string              `protobuf:"bytes,39,opt,name=button_custom,json=buttonCustom,proto3" json:"button_custom"`                           //按钮自定义名称,英文最多15个字符
	FreightType          string              `protobuf:"bytes,40,opt,name=freight_type,json=freightType,proto3" json:"freight_type"`                              //运费模式：1统一邮费，2运费模板
	FreightUniformFee    int64               `protobuf:"varint,41,opt,name=freight_uniform_fee,json=freightUniformFee,proto3" json:"freight_uniform_fee"`         //统一运费
	FreightExpressId     int64               `protobuf:"varint,42,opt,name=freight_express_id,json=freightExpressId,proto3" json:"freight_express_id"`            //运费模板ID
	IsVirtual            string              `protobuf:"bytes,43,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`                                    //是否虚拟商品（0否, 1是）
	VirtualType          string              `protobuf:"bytes,44,opt,name=virtual_type,json=virtualType,proto3" json:"virtual_type"`                              //虚拟类型
	SpecBase             string              `protobuf:"bytes,45,opt,name=spec_base,json=specBase,proto3" json:"spec_base"`                                       //规格基础数据
	SeoTitle             string              `protobuf:"bytes,46,opt,name=seo_title,json=seoTitle,proto3" json:"seo_title"`                                       //SEO标题
	SeoKeywords          string              `protobuf:"bytes,47,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords"`                              //SEO关键字
	Status               string              `protobuf:"bytes,48,opt,name=status,proto3" json:"status"`
	CreatedAt            string              `protobuf:"bytes,49,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string              `protobuf:"bytes,50,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Brand                *Brand              `protobuf:"bytes,51,opt,name=brand,proto3" json:"brand"`
	Category             *Category           `protobuf:"bytes,52,opt,name=category,proto3" json:"category"`
	Presale              *SpuPresale         `protobuf:"bytes,53,opt,name=presale,proto3" json:"presale"`
	Virtual              *SpuVirtual         `protobuf:"bytes,54,opt,name=virtual,proto3" json:"virtual"`
	Photos               []*SpuPhoto         `protobuf:"bytes,55,rep,name=photos,proto3" json:"photos"`
	Terms                []*Term             `protobuf:"bytes,56,rep,name=terms,proto3" json:"terms"`
	Tags                 []*Tag              `protobuf:"bytes,57,rep,name=tags,proto3" json:"tags"`
	Skus                 []*Sku              `protobuf:"bytes,58,rep,name=skus,proto3" json:"skus"`
	SpecTypeData         []*SpecTypeProperty `protobuf:"bytes,59,rep,name=spec_type_data,json=specTypeData,proto3" json:"spec_type_data"` //规格类型数据
}

func (x *Spu) Reset() {
	*x = Spu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spu) ProtoMessage() {}

func (x *Spu) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spu.ProtoReflect.Descriptor instead.
func (*Spu) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{0}
}

func (x *Spu) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Spu) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *Spu) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Spu) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *Spu) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *Spu) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Spu) GetTitleColor() string {
	if x != nil {
		return x.TitleColor
	}
	return ""
}

func (x *Spu) GetSimpleDesc() string {
	if x != nil {
		return x.SimpleDesc
	}
	return ""
}

func (x *Spu) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Spu) GetSiteType() string {
	if x != nil {
		return x.SiteType
	}
	return ""
}

func (x *Spu) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Spu) GetPlaceOriginId() int64 {
	if x != nil {
		return x.PlaceOriginId
	}
	return 0
}

func (x *Spu) GetInventory() int32 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *Spu) GetImageId() int64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *Spu) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Spu) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *Spu) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *Spu) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Spu) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *Spu) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *Spu) GetIsDeductionInventory() string {
	if x != nil {
		return x.IsDeductionInventory
	}
	return ""
}

func (x *Spu) GetIsListed() string {
	if x != nil {
		return x.IsListed
	}
	return ""
}

func (x *Spu) GetIsMemberRight() string {
	if x != nil {
		return x.IsMemberRight
	}
	return ""
}

func (x *Spu) GetIsMemberPrice() string {
	if x != nil {
		return x.IsMemberPrice
	}
	return ""
}

func (x *Spu) GetMinOriginalPrice() int64 {
	if x != nil {
		return x.MinOriginalPrice
	}
	return 0
}

func (x *Spu) GetMaxOriginalPrice() int64 {
	if x != nil {
		return x.MaxOriginalPrice
	}
	return 0
}

func (x *Spu) GetMinPrice() int64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *Spu) GetMaxPrice() int64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *Spu) GetShowOriginalPrice() string {
	if x != nil {
		return x.ShowOriginalPrice
	}
	return ""
}

func (x *Spu) GetShowPrice() string {
	if x != nil {
		return x.ShowPrice
	}
	return ""
}

func (x *Spu) GetBuyMinNumber() int32 {
	if x != nil {
		return x.BuyMinNumber
	}
	return 0
}

func (x *Spu) GetBuyMaxNumber() int32 {
	if x != nil {
		return x.BuyMaxNumber
	}
	return 0
}

func (x *Spu) GetGiveIntegral() int32 {
	if x != nil {
		return x.GiveIntegral
	}
	return 0
}

func (x *Spu) GetPhotoCount() int32 {
	if x != nil {
		return x.PhotoCount
	}
	return 0
}

func (x *Spu) GetSaleCount() int32 {
	if x != nil {
		return x.SaleCount
	}
	return 0
}

func (x *Spu) GetAccessCount() int32 {
	if x != nil {
		return x.AccessCount
	}
	return 0
}

func (x *Spu) GetFableSaleCount() int32 {
	if x != nil {
		return x.FableSaleCount
	}
	return 0
}

func (x *Spu) GetButtonMode() string {
	if x != nil {
		return x.ButtonMode
	}
	return ""
}

func (x *Spu) GetButtonCustom() string {
	if x != nil {
		return x.ButtonCustom
	}
	return ""
}

func (x *Spu) GetFreightType() string {
	if x != nil {
		return x.FreightType
	}
	return ""
}

func (x *Spu) GetFreightUniformFee() int64 {
	if x != nil {
		return x.FreightUniformFee
	}
	return 0
}

func (x *Spu) GetFreightExpressId() int64 {
	if x != nil {
		return x.FreightExpressId
	}
	return 0
}

func (x *Spu) GetIsVirtual() string {
	if x != nil {
		return x.IsVirtual
	}
	return ""
}

func (x *Spu) GetVirtualType() string {
	if x != nil {
		return x.VirtualType
	}
	return ""
}

func (x *Spu) GetSpecBase() string {
	if x != nil {
		return x.SpecBase
	}
	return ""
}

func (x *Spu) GetSeoTitle() string {
	if x != nil {
		return x.SeoTitle
	}
	return ""
}

func (x *Spu) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *Spu) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Spu) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Spu) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Spu) GetBrand() *Brand {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Spu) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Spu) GetPresale() *SpuPresale {
	if x != nil {
		return x.Presale
	}
	return nil
}

func (x *Spu) GetVirtual() *SpuVirtual {
	if x != nil {
		return x.Virtual
	}
	return nil
}

func (x *Spu) GetPhotos() []*SpuPhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *Spu) GetTerms() []*Term {
	if x != nil {
		return x.Terms
	}
	return nil
}

func (x *Spu) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Spu) GetSkus() []*Sku {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *Spu) GetSpecTypeData() []*SpecTypeProperty {
	if x != nil {
		return x.SpecTypeData
	}
	return nil
}

type Sku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                            //ID
	SpuId             int64                    `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                         //SpuID
	OriginalPrice     int64                    `protobuf:"varint,3,opt,name=original_price,json=originalPrice,proto3" json:"original_price"` //划线价
	CostPrice         int64                    `protobuf:"varint,4,opt,name=cost_price,json=costPrice,proto3" json:"cost_price"`             //成本价
	Price             int64                    `protobuf:"varint,5,opt,name=price,proto3" json:"price"`                                      //销售价
	Inventory         int32                    `protobuf:"varint,6,opt,name=inventory,proto3" json:"inventory"`                              //库存
	Md5Key            string                   `protobuf:"bytes,7,opt,name=md5_key,json=md5Key,proto3" json:"md5_key"`                       //唯一标识
	Coding            string                   `protobuf:"bytes,8,opt,name=coding,proto3" json:"coding"`                                     //编号
	Barcode           string                   `protobuf:"bytes,9,opt,name=barcode,proto3" json:"barcode"`                                   //条码
	Weight            int64                    `protobuf:"varint,10,opt,name=weight,proto3" json:"weight"`                                   //重量：克
	Volume            int64                    `protobuf:"varint,11,opt,name=volume,proto3" json:"volume"`                                   //体积
	SpecIndexes       string                   `protobuf:"bytes,12,opt,name=spec_indexes,json=specIndexes,proto3" json:"spec_indexes"`       //规格索引
	CreatedAt         string                   `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt         string                   `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Spu               *Spu                     `protobuf:"bytes,15,opt,name=spu,proto3" json:"spu"`
	SpecificationData []*SpecificationProperty `protobuf:"bytes,16,rep,name=specification_data,json=specificationData,proto3" json:"specification_data"` //规格信息列表
}

func (x *Sku) Reset() {
	*x = Sku{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sku) ProtoMessage() {}

func (x *Sku) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sku.ProtoReflect.Descriptor instead.
func (*Sku) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{1}
}

func (x *Sku) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sku) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *Sku) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *Sku) GetCostPrice() int64 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *Sku) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Sku) GetInventory() int32 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *Sku) GetMd5Key() string {
	if x != nil {
		return x.Md5Key
	}
	return ""
}

func (x *Sku) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *Sku) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *Sku) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Sku) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Sku) GetSpecIndexes() string {
	if x != nil {
		return x.SpecIndexes
	}
	return ""
}

func (x *Sku) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Sku) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Sku) GetSpu() *Spu {
	if x != nil {
		return x.Spu
	}
	return nil
}

func (x *Sku) GetSpecificationData() []*SpecificationProperty {
	if x != nil {
		return x.SpecificationData
	}
	return nil
}

//虚拟商品数据
type SpuVirtual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SpuId int64  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`
	Data  string `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data"`
}

func (x *SpuVirtual) Reset() {
	*x = SpuVirtual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuVirtual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuVirtual) ProtoMessage() {}

func (x *SpuVirtual) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuVirtual.ProtoReflect.Descriptor instead.
func (*SpuVirtual) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{2}
}

func (x *SpuVirtual) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuVirtual) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SpuVirtual) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

//表单商品
type FormSpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                                   //ID
	TaxonomyId           int64               `protobuf:"varint,2,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                                 //标准类目ID
	CategoryId           int64               `protobuf:"varint,3,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                                 //商品分类ID
	BrandId              int32               `protobuf:"varint,4,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                          //品牌ID
	SiteType             string              `protobuf:"bytes,5,opt,name=site_type,json=siteType,proto3" json:"site_type"`                                        //商品类型
	Title                string              `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`                                                              //商品标题
	TitleColor           string              `protobuf:"bytes,7,opt,name=title_color,json=titleColor,proto3" json:"title_color"`                                  //标题颜色
	SimpleDesc           string              `protobuf:"bytes,8,opt,name=simple_desc,json=simpleDesc,proto3" json:"simple_desc"`                                  //简述
	Type                 string              `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`                                                                //商品类型：product商品,material原料,assets资产
	Subtype              string              `protobuf:"bytes,10,opt,name=subtype,proto3" json:"subtype"`                                                         //商品子类型：course,column, recharge, room, vip,food
	Unit                 string              `protobuf:"bytes,11,opt,name=unit,proto3" json:"unit"`                                                               //计量单位
	PlaceOriginId        int64               `protobuf:"varint,12,opt,name=place_origin_id,json=placeOriginId,proto3" json:"place_origin_id"`                     //产地ID（地区省id）
	ImageId              int64               `protobuf:"varint,14,opt,name=image_id,json=imageId,proto3" json:"image_id"`                                         //商品主图ID
	ImageUrl             string              `protobuf:"bytes,15,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                                       //商品主图url
	VideoId              int64               `protobuf:"varint,16,opt,name=video_id,json=videoId,proto3" json:"video_id"`                                         //短视频ID
	VideoUrl             string              `protobuf:"bytes,17,opt,name=video_url,json=videoUrl,proto3" json:"video_url"`                                       //短视频url
	Content              string              `protobuf:"bytes,18,opt,name=content,proto3" json:"content"`                                                         //商品内容
	TemplateId           int32               `protobuf:"varint,19,opt,name=template_id,json=templateId,proto3" json:"template_id"`                                //商品详情模板信息
	IsManySpec           string              `protobuf:"bytes,20,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                               //是否多规格商品,否则为单品
	IsDeductionInventory string              `protobuf:"bytes,21,opt,name=is_deduction_inventory,json=isDeductionInventory,proto3" json:"is_deduction_inventory"` //是否扣减库存（0否, 1是）
	IsListed             string              `protobuf:"bytes,22,opt,name=is_listed,json=isListed,proto3" json:"is_listed"`                                       //是否上架（下架后用户不可见, 0否, 1是）
	IsMemberRight        string              `protobuf:"bytes,23,opt,name=is_member_right,json=isMemberRight,proto3" json:"is_member_right"`                      //是否设置商品购买权限（0否, 1是）
	IsMemberPrice        string              `protobuf:"bytes,24,opt,name=is_member_price,json=isMemberPrice,proto3" json:"is_member_price"`                      //是否参与会员折扣价（0否, 1是）
	BuyMinNumber         int32               `protobuf:"varint,31,opt,name=buy_min_number,json=buyMinNumber,proto3" json:"buy_min_number"`                        //最低起购数量（默认1）
	BuyMaxNumber         int32               `protobuf:"varint,32,opt,name=buy_max_number,json=buyMaxNumber,proto3" json:"buy_max_number"`                        //最大购买数量（最大数值 100000000, 小于等于0或空则不限）
	GiveIntegral         int32               `protobuf:"varint,33,opt,name=give_integral,json=giveIntegral,proto3" json:"give_integral"`                          //购买赠送积分比例
	FableSaleCount       int32               `protobuf:"varint,37,opt,name=fable_sale_count,json=fableSaleCount,proto3" json:"fable_sale_count"`                  //虚构销量（前端展示销量时会加上虚假销量）
	ButtonMode           string              `protobuf:"bytes,38,opt,name=button_mode,json=buttonMode,proto3" json:"button_mode"`                                 //立即购买按钮：1默认名称，2自定义名称
	ButtonCustom         string              `protobuf:"bytes,39,opt,name=button_custom,json=buttonCustom,proto3" json:"button_custom"`                           //按钮自定义名称,英文最多15个字符
	FreightType          string              `protobuf:"bytes,40,opt,name=freight_type,json=freightType,proto3" json:"freight_type"`                              //运费模式：1统一邮费，2运费模板
	FreightUniformFee    int64               `protobuf:"varint,41,opt,name=freight_uniform_fee,json=freightUniformFee,proto3" json:"freight_uniform_fee"`         //统一运费
	FreightExpressId     int64               `protobuf:"varint,42,opt,name=freight_express_id,json=freightExpressId,proto3" json:"freight_express_id"`            //运费模板ID
	SeoTitle             string              `protobuf:"bytes,44,opt,name=seo_title,json=seoTitle,proto3" json:"seo_title"`                                       //SEO标题
	SeoKeywords          string              `protobuf:"bytes,45,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords"`                              //SEO关键字
	Presale              *SpuPresale         `protobuf:"bytes,52,opt,name=presale,proto3" json:"presale"`
	Photos               []*SpuPhoto         `protobuf:"bytes,53,rep,name=photos,proto3" json:"photos"`
	TermIds              []int64             `protobuf:"varint,54,rep,packed,name=term_ids,json=termIds,proto3" json:"term_ids"`
	TagIds               []int64             `protobuf:"varint,55,rep,packed,name=tag_ids,json=tagIds,proto3" json:"tag_ids"`
	PhotoImageIds        []int64             `protobuf:"varint,58,rep,packed,name=photo_image_ids,json=photoImageIds,proto3" json:"photo_image_ids"`
	Sku                  *FormSku            `protobuf:"bytes,56,opt,name=sku,proto3" json:"sku"`
	Skus                 []*FormSku          `protobuf:"bytes,57,rep,name=skus,proto3" json:"skus"`
	SpecTypes            []*SpecTypeProperty `protobuf:"bytes,59,rep,name=spec_types,json=specTypes,proto3" json:"spec_types"` //规格类型数据
	Terms                []*Term             `protobuf:"bytes,60,rep,name=terms,proto3" json:"terms"`
}

func (x *FormSpu) Reset() {
	*x = FormSpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormSpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormSpu) ProtoMessage() {}

func (x *FormSpu) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormSpu.ProtoReflect.Descriptor instead.
func (*FormSpu) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{3}
}

func (x *FormSpu) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FormSpu) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *FormSpu) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *FormSpu) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *FormSpu) GetSiteType() string {
	if x != nil {
		return x.SiteType
	}
	return ""
}

func (x *FormSpu) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FormSpu) GetTitleColor() string {
	if x != nil {
		return x.TitleColor
	}
	return ""
}

func (x *FormSpu) GetSimpleDesc() string {
	if x != nil {
		return x.SimpleDesc
	}
	return ""
}

func (x *FormSpu) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FormSpu) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *FormSpu) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *FormSpu) GetPlaceOriginId() int64 {
	if x != nil {
		return x.PlaceOriginId
	}
	return 0
}

func (x *FormSpu) GetImageId() int64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *FormSpu) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *FormSpu) GetVideoId() int64 {
	if x != nil {
		return x.VideoId
	}
	return 0
}

func (x *FormSpu) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *FormSpu) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FormSpu) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *FormSpu) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *FormSpu) GetIsDeductionInventory() string {
	if x != nil {
		return x.IsDeductionInventory
	}
	return ""
}

func (x *FormSpu) GetIsListed() string {
	if x != nil {
		return x.IsListed
	}
	return ""
}

func (x *FormSpu) GetIsMemberRight() string {
	if x != nil {
		return x.IsMemberRight
	}
	return ""
}

func (x *FormSpu) GetIsMemberPrice() string {
	if x != nil {
		return x.IsMemberPrice
	}
	return ""
}

func (x *FormSpu) GetBuyMinNumber() int32 {
	if x != nil {
		return x.BuyMinNumber
	}
	return 0
}

func (x *FormSpu) GetBuyMaxNumber() int32 {
	if x != nil {
		return x.BuyMaxNumber
	}
	return 0
}

func (x *FormSpu) GetGiveIntegral() int32 {
	if x != nil {
		return x.GiveIntegral
	}
	return 0
}

func (x *FormSpu) GetFableSaleCount() int32 {
	if x != nil {
		return x.FableSaleCount
	}
	return 0
}

func (x *FormSpu) GetButtonMode() string {
	if x != nil {
		return x.ButtonMode
	}
	return ""
}

func (x *FormSpu) GetButtonCustom() string {
	if x != nil {
		return x.ButtonCustom
	}
	return ""
}

func (x *FormSpu) GetFreightType() string {
	if x != nil {
		return x.FreightType
	}
	return ""
}

func (x *FormSpu) GetFreightUniformFee() int64 {
	if x != nil {
		return x.FreightUniformFee
	}
	return 0
}

func (x *FormSpu) GetFreightExpressId() int64 {
	if x != nil {
		return x.FreightExpressId
	}
	return 0
}

func (x *FormSpu) GetSeoTitle() string {
	if x != nil {
		return x.SeoTitle
	}
	return ""
}

func (x *FormSpu) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *FormSpu) GetPresale() *SpuPresale {
	if x != nil {
		return x.Presale
	}
	return nil
}

func (x *FormSpu) GetPhotos() []*SpuPhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *FormSpu) GetTermIds() []int64 {
	if x != nil {
		return x.TermIds
	}
	return nil
}

func (x *FormSpu) GetTagIds() []int64 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *FormSpu) GetPhotoImageIds() []int64 {
	if x != nil {
		return x.PhotoImageIds
	}
	return nil
}

func (x *FormSpu) GetSku() *FormSku {
	if x != nil {
		return x.Sku
	}
	return nil
}

func (x *FormSpu) GetSkus() []*FormSku {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *FormSpu) GetSpecTypes() []*SpecTypeProperty {
	if x != nil {
		return x.SpecTypes
	}
	return nil
}

func (x *FormSpu) GetTerms() []*Term {
	if x != nil {
		return x.Terms
	}
	return nil
}

type FormSku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                        //ID
	SpuId             int64                    `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                                     //SpuID
	OriginalPrice     int64                    `protobuf:"varint,3,opt,name=original_price,json=originalPrice,proto3" json:"original_price"`             //划线价
	CostPrice         int64                    `protobuf:"varint,4,opt,name=cost_price,json=costPrice,proto3" json:"cost_price"`                         //成本价
	Price             int64                    `protobuf:"varint,5,opt,name=price,proto3" json:"price"`                                                  //销售价
	Inventory         int32                    `protobuf:"varint,6,opt,name=inventory,proto3" json:"inventory"`                                          //库存
	Md5Key            string                   `protobuf:"bytes,7,opt,name=md5_key,json=md5Key,proto3" json:"md5_key"`                                   //唯一标识
	Coding            string                   `protobuf:"bytes,8,opt,name=coding,proto3" json:"coding"`                                                 //编号
	Barcode           string                   `protobuf:"bytes,9,opt,name=barcode,proto3" json:"barcode"`                                               //条码
	Weight            int64                    `protobuf:"varint,10,opt,name=weight,proto3" json:"weight"`                                               //重量：克
	Volume            int64                    `protobuf:"varint,11,opt,name=volume,proto3" json:"volume"`                                               //体积
	Specification     string                   `protobuf:"bytes,12,opt,name=specification,proto3" json:"specification"`                                  //规格信息
	SpecIndexes       string                   `protobuf:"bytes,13,opt,name=spec_indexes,json=specIndexes,proto3" json:"spec_indexes"`                   //规格索引
	SpecificationData []*SpecificationProperty `protobuf:"bytes,14,rep,name=specification_data,json=specificationData,proto3" json:"specification_data"` //规格信息列表
}

func (x *FormSku) Reset() {
	*x = FormSku{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormSku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormSku) ProtoMessage() {}

func (x *FormSku) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormSku.ProtoReflect.Descriptor instead.
func (*FormSku) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{4}
}

func (x *FormSku) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FormSku) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *FormSku) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *FormSku) GetCostPrice() int64 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *FormSku) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *FormSku) GetInventory() int32 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *FormSku) GetMd5Key() string {
	if x != nil {
		return x.Md5Key
	}
	return ""
}

func (x *FormSku) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *FormSku) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *FormSku) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *FormSku) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *FormSku) GetSpecification() string {
	if x != nil {
		return x.Specification
	}
	return ""
}

func (x *FormSku) GetSpecIndexes() string {
	if x != nil {
		return x.SpecIndexes
	}
	return ""
}

func (x *FormSku) GetSpecificationData() []*SpecificationProperty {
	if x != nil {
		return x.SpecificationData
	}
	return nil
}

type SpecTypeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecId   int64                    `protobuf:"varint,1,opt,name=spec_id,json=specId,proto3" json:"spec_id"`
	SpecName string                   `protobuf:"bytes,2,opt,name=spec_name,json=specName,proto3" json:"spec_name"`
	Values   []*SpecTypePropertyValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values"`
}

func (x *SpecTypeProperty) Reset() {
	*x = SpecTypeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecTypeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecTypeProperty) ProtoMessage() {}

func (x *SpecTypeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecTypeProperty.ProtoReflect.Descriptor instead.
func (*SpecTypeProperty) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{5}
}

func (x *SpecTypeProperty) GetSpecId() int64 {
	if x != nil {
		return x.SpecId
	}
	return 0
}

func (x *SpecTypeProperty) GetSpecName() string {
	if x != nil {
		return x.SpecName
	}
	return ""
}

func (x *SpecTypeProperty) GetValues() []*SpecTypePropertyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type SpecificationProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecId    int32  `protobuf:"varint,1,opt,name=spec_id,json=specId,proto3" json:"spec_id"`
	SpecName  string `protobuf:"bytes,2,opt,name=spec_name,json=specName,proto3" json:"spec_name"`
	SpecValue string `protobuf:"bytes,3,opt,name=spec_value,json=specValue,proto3" json:"spec_value"`
	ImageUrl  string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
}

func (x *SpecificationProperty) Reset() {
	*x = SpecificationProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificationProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificationProperty) ProtoMessage() {}

func (x *SpecificationProperty) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificationProperty.ProtoReflect.Descriptor instead.
func (*SpecificationProperty) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{6}
}

func (x *SpecificationProperty) GetSpecId() int32 {
	if x != nil {
		return x.SpecId
	}
	return 0
}

func (x *SpecificationProperty) GetSpecName() string {
	if x != nil {
		return x.SpecName
	}
	return ""
}

func (x *SpecificationProperty) GetSpecValue() string {
	if x != nil {
		return x.SpecValue
	}
	return ""
}

func (x *SpecificationProperty) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type SpuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged      int32   `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize   int32   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords   string  `protobuf:"bytes,3,opt,name=keywords,proto3" json:"keywords"`
	SkuId      int64   `protobuf:"varint,4,opt,name=sku_id,json=skuId,proto3" json:"sku_id"`
	IsListed   string  `protobuf:"bytes,5,opt,name=is_listed,json=isListed,proto3" json:"is_listed"`
	SpuId      int64   `protobuf:"varint,6,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`
	Code       string  `protobuf:"bytes,7,opt,name=code,proto3" json:"code"`
	Title      string  `protobuf:"bytes,8,opt,name=title,proto3" json:"title"`
	Type       string  `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`
	TaxonomyId int64   `protobuf:"varint,10,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`
	CategoryId int64   `protobuf:"varint,11,opt,name=category_id,json=categoryId,proto3" json:"category_id"`
	TermId     int32   `protobuf:"varint,12,opt,name=term_id,json=termId,proto3" json:"term_id"`
	TermName   string  `protobuf:"bytes,13,opt,name=term_name,json=termName,proto3" json:"term_name"`
	BrandId    int32   `protobuf:"varint,14,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`
	ShopId     int64   `protobuf:"varint,15,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`
	Status     string  `protobuf:"bytes,16,opt,name=status,proto3" json:"status"`
	StartDate  string  `protobuf:"bytes,17,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate    string  `protobuf:"bytes,18,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	ParamId    int32   `protobuf:"varint,19,opt,name=param_id,json=paramId,proto3" json:"param_id"`
	ParamValue string  `protobuf:"bytes,20,opt,name=param_value,json=paramValue,proto3" json:"param_value"`
	TagId      int32   `protobuf:"varint,21,opt,name=tag_id,json=tagId,proto3" json:"tag_id"`
	TagName    string  `protobuf:"bytes,22,opt,name=tag_name,json=tagName,proto3" json:"tag_name"`
	SiteType   string  `protobuf:"bytes,23,opt,name=site_type,json=siteType,proto3" json:"site_type"`
	Sort       int32   `protobuf:"varint,24,opt,name=sort,proto3" json:"sort"`
	SpuIds     []int64 `protobuf:"varint,25,rep,packed,name=spu_ids,json=spuIds,proto3" json:"spu_ids"`
	SkuIds     []int64 `protobuf:"varint,26,rep,packed,name=sku_ids,json=skuIds,proto3" json:"sku_ids"`
	BrandIds   []int64 `protobuf:"varint,27,rep,packed,name=brand_ids,json=brandIds,proto3" json:"brand_ids"`
	TagIds     []int64 `protobuf:"varint,28,rep,packed,name=tag_ids,json=tagIds,proto3" json:"tag_ids"`
	TermIds    []int64 `protobuf:"varint,29,rep,packed,name=term_ids,json=termIds,proto3" json:"term_ids"`
}

func (x *SpuRequest) Reset() {
	*x = SpuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuRequest) ProtoMessage() {}

func (x *SpuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuRequest.ProtoReflect.Descriptor instead.
func (*SpuRequest) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{7}
}

func (x *SpuRequest) GetPaged() int32 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *SpuRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SpuRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *SpuRequest) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *SpuRequest) GetIsListed() string {
	if x != nil {
		return x.IsListed
	}
	return ""
}

func (x *SpuRequest) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SpuRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SpuRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SpuRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SpuRequest) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *SpuRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SpuRequest) GetTermId() int32 {
	if x != nil {
		return x.TermId
	}
	return 0
}

func (x *SpuRequest) GetTermName() string {
	if x != nil {
		return x.TermName
	}
	return ""
}

func (x *SpuRequest) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *SpuRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *SpuRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SpuRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SpuRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SpuRequest) GetParamId() int32 {
	if x != nil {
		return x.ParamId
	}
	return 0
}

func (x *SpuRequest) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *SpuRequest) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *SpuRequest) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *SpuRequest) GetSiteType() string {
	if x != nil {
		return x.SiteType
	}
	return ""
}

func (x *SpuRequest) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SpuRequest) GetSpuIds() []int64 {
	if x != nil {
		return x.SpuIds
	}
	return nil
}

func (x *SpuRequest) GetSkuIds() []int64 {
	if x != nil {
		return x.SkuIds
	}
	return nil
}

func (x *SpuRequest) GetBrandIds() []int64 {
	if x != nil {
		return x.BrandIds
	}
	return nil
}

func (x *SpuRequest) GetTagIds() []int64 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *SpuRequest) GetTermIds() []int64 {
	if x != nil {
		return x.TermIds
	}
	return nil
}

type SpuDetailData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goods *Spu          `protobuf:"bytes,1,opt,name=goods,proto3" json:"goods"`
	Pager *common.Pager `protobuf:"bytes,3,opt,name=pager,proto3" json:"pager"`
	Items []*Spu        `protobuf:"bytes,4,rep,name=items,proto3" json:"items"`
	Info  *common.Info  `protobuf:"bytes,5,opt,name=info,proto3" json:"info"`
}

func (x *SpuDetailData) Reset() {
	*x = SpuDetailData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuDetailData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuDetailData) ProtoMessage() {}

func (x *SpuDetailData) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuDetailData.ProtoReflect.Descriptor instead.
func (*SpuDetailData) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{8}
}

func (x *SpuDetailData) GetGoods() *Spu {
	if x != nil {
		return x.Goods
	}
	return nil
}

func (x *SpuDetailData) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *SpuDetailData) GetItems() []*Spu {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SpuDetailData) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type SpuData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Spu          `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,3,opt,name=pager,proto3" json:"pager"`
	Items  []*Spu        `protobuf:"bytes,4,rep,name=items,proto3" json:"items"`
	Info   *common.Info  `protobuf:"bytes,5,opt,name=info,proto3" json:"info"`
}

func (x *SpuData) Reset() {
	*x = SpuData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuData) ProtoMessage() {}

func (x *SpuData) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuData.ProtoReflect.Descriptor instead.
func (*SpuData) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{9}
}

func (x *SpuData) GetEntity() *Spu {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SpuData) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *SpuData) GetItems() []*Spu {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SpuData) GetInfo() *common.Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type SpuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *SpuData      `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Error *common.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
}

func (x *SpuResponse) Reset() {
	*x = SpuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuResponse) ProtoMessage() {}

func (x *SpuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuResponse.ProtoReflect.Descriptor instead.
func (*SpuResponse) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{10}
}

func (x *SpuResponse) GetData() *SpuData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SpuResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SpecTypePropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	ImageId  int64  `protobuf:"varint,2,opt,name=image_id,json=imageId,proto3" json:"image_id"`
	ImageUrl string `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
}

func (x *SpecTypePropertyValue) Reset() {
	*x = SpecTypePropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecTypePropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecTypePropertyValue) ProtoMessage() {}

func (x *SpecTypePropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecTypePropertyValue.ProtoReflect.Descriptor instead.
func (*SpecTypePropertyValue) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SpecTypePropertyValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpecTypePropertyValue) GetImageId() int64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *SpecTypePropertyValue) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

var File_spuService_proto protoreflect.FileDescriptor

var file_spuService_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x70, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x65, 0x72, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74,
	0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x73, 0x70, 0x75, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x70, 0x75, 0x50, 0x72, 0x65, 0x73, 0x61,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8e, 0x10, 0x0a, 0x03, 0x53, 0x70, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61,
	0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x34, 0x0a,
	0x16, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69,
	0x73, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x69,
	0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62,
	0x75, 0x79, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x62,
	0x75, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x61, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x72, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6f,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6f, 0x5f, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x6f, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x25, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c,
	0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x07, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73,
	0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x75, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x38, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x73,
	0x6b, 0x75, 0x73, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x12, 0x40,
	0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xf3, 0x03, 0x0a, 0x03, 0x53, 0x6b, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64, 0x35,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35, 0x4b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70,
	0x75, 0x52, 0x03, 0x73, 0x70, 0x75, 0x12, 0x4e, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x0a, 0x53, 0x70, 0x75, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xcc, 0x0b, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x70, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x62, 0x75, 0x79, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x66, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66,
	0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6f,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6f, 0x5f, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x6f, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x65,
	0x73, 0x61, 0x6c, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65,
	0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x37, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x3a, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0d, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x23, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x6b,
	0x75, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x39,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x53, 0x6b, 0x75, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x3b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x09, 0x73,
	0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x22, 0xbe,
	0x03, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x6b, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x64, 0x35, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64,
	0x35, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x11, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xd7, 0x01, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x84, 0x06, 0x0a, 0x0a, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x75,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x73, 0x70, 0x75, 0x49,
	0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x73, 0x22, 0xa0, 0x01, 0x0a,
	0x0d, 0x53, 0x70, 0x75, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x05, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x05, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x9c, 0x01, 0x0a, 0x07, 0x53, 0x70, 0x75, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72,
	0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x59,
	0x0a, 0x0b, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x8e, 0x04, 0x0a, 0x0a, 0x53, 0x70,
	0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x53, 0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e,
	0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_spuService_proto_rawDescOnce sync.Once
	file_spuService_proto_rawDescData = file_spuService_proto_rawDesc
)

func file_spuService_proto_rawDescGZIP() []byte {
	file_spuService_proto_rawDescOnce.Do(func() {
		file_spuService_proto_rawDescData = protoimpl.X.CompressGZIP(file_spuService_proto_rawDescData)
	})
	return file_spuService_proto_rawDescData
}

var file_spuService_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_spuService_proto_goTypes = []interface{}{
	(*Spu)(nil),                   // 0: services.Spu
	(*Sku)(nil),                   // 1: services.Sku
	(*SpuVirtual)(nil),            // 2: services.SpuVirtual
	(*FormSpu)(nil),               // 3: services.FormSpu
	(*FormSku)(nil),               // 4: services.FormSku
	(*SpecTypeProperty)(nil),      // 5: services.SpecTypeProperty
	(*SpecificationProperty)(nil), // 6: services.SpecificationProperty
	(*SpuRequest)(nil),            // 7: services.SpuRequest
	(*SpuDetailData)(nil),         // 8: services.SpuDetailData
	(*SpuData)(nil),               // 9: services.SpuData
	(*SpuResponse)(nil),           // 10: services.SpuResponse
	(*SpecTypePropertyValue)(nil), // 11: services.SpecTypeProperty.value
	(*Brand)(nil),                 // 12: services.Brand
	(*Category)(nil),              // 13: services.Category
	(*SpuPresale)(nil),            // 14: services.SpuPresale
	(*SpuPhoto)(nil),              // 15: services.SpuPhoto
	(*Term)(nil),                  // 16: services.Term
	(*Tag)(nil),                   // 17: services.Tag
	(*common.Pager)(nil),          // 18: common.Pager
	(*common.Info)(nil),           // 19: common.Info
	(*common.Error)(nil),          // 20: common.Error
}
var file_spuService_proto_depIdxs = []int32{
	12, // 0: services.Spu.brand:type_name -> services.Brand
	13, // 1: services.Spu.category:type_name -> services.Category
	14, // 2: services.Spu.presale:type_name -> services.SpuPresale
	2,  // 3: services.Spu.virtual:type_name -> services.SpuVirtual
	15, // 4: services.Spu.photos:type_name -> services.SpuPhoto
	16, // 5: services.Spu.terms:type_name -> services.Term
	17, // 6: services.Spu.tags:type_name -> services.Tag
	1,  // 7: services.Spu.skus:type_name -> services.Sku
	5,  // 8: services.Spu.spec_type_data:type_name -> services.SpecTypeProperty
	0,  // 9: services.Sku.spu:type_name -> services.Spu
	6,  // 10: services.Sku.specification_data:type_name -> services.SpecificationProperty
	14, // 11: services.FormSpu.presale:type_name -> services.SpuPresale
	15, // 12: services.FormSpu.photos:type_name -> services.SpuPhoto
	4,  // 13: services.FormSpu.sku:type_name -> services.FormSku
	4,  // 14: services.FormSpu.skus:type_name -> services.FormSku
	5,  // 15: services.FormSpu.spec_types:type_name -> services.SpecTypeProperty
	16, // 16: services.FormSpu.terms:type_name -> services.Term
	6,  // 17: services.FormSku.specification_data:type_name -> services.SpecificationProperty
	11, // 18: services.SpecTypeProperty.values:type_name -> services.SpecTypeProperty.value
	0,  // 19: services.SpuDetailData.goods:type_name -> services.Spu
	18, // 20: services.SpuDetailData.pager:type_name -> common.Pager
	0,  // 21: services.SpuDetailData.items:type_name -> services.Spu
	19, // 22: services.SpuDetailData.info:type_name -> common.Info
	0,  // 23: services.SpuData.entity:type_name -> services.Spu
	18, // 24: services.SpuData.pager:type_name -> common.Pager
	0,  // 25: services.SpuData.items:type_name -> services.Spu
	19, // 26: services.SpuData.info:type_name -> common.Info
	9,  // 27: services.SpuResponse.data:type_name -> services.SpuData
	20, // 28: services.SpuResponse.error:type_name -> common.Error
	3,  // 29: services.SpuService.Create:input_type -> services.FormSpu
	3,  // 30: services.SpuService.Update:input_type -> services.FormSpu
	0,  // 31: services.SpuService.Delete:input_type -> services.Spu
	0,  // 32: services.SpuService.Get:input_type -> services.Spu
	0,  // 33: services.SpuService.GetBase:input_type -> services.Spu
	0,  // 34: services.SpuService.Detail:input_type -> services.Spu
	7,  // 35: services.SpuService.SetSale:input_type -> services.SpuRequest
	7,  // 36: services.SpuService.SetSort:input_type -> services.SpuRequest
	7,  // 37: services.SpuService.List:input_type -> services.SpuRequest
	7,  // 38: services.SpuService.Search:input_type -> services.SpuRequest
	10, // 39: services.SpuService.Create:output_type -> services.SpuResponse
	10, // 40: services.SpuService.Update:output_type -> services.SpuResponse
	10, // 41: services.SpuService.Delete:output_type -> services.SpuResponse
	10, // 42: services.SpuService.Get:output_type -> services.SpuResponse
	10, // 43: services.SpuService.GetBase:output_type -> services.SpuResponse
	10, // 44: services.SpuService.Detail:output_type -> services.SpuResponse
	10, // 45: services.SpuService.SetSale:output_type -> services.SpuResponse
	10, // 46: services.SpuService.SetSort:output_type -> services.SpuResponse
	10, // 47: services.SpuService.List:output_type -> services.SpuResponse
	10, // 48: services.SpuService.Search:output_type -> services.SpuResponse
	39, // [39:49] is the sub-list for method output_type
	29, // [29:39] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_spuService_proto_init() }
func file_spuService_proto_init() {
	if File_spuService_proto != nil {
		return
	}
	file_brandService_proto_init()
	file_categoryService_proto_init()
	file_termService_proto_init()
	file_tagService_proto_init()
	file_spuPhotoService_proto_init()
	file_spuPresaleService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spuService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sku); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuVirtual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormSpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormSku); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecTypeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificationProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuDetailData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecTypePropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spuService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spuService_proto_goTypes,
		DependencyIndexes: file_spuService_proto_depIdxs,
		MessageInfos:      file_spuService_proto_msgTypes,
	}.Build()
	File_spuService_proto = out.File
	file_spuService_proto_rawDesc = nil
	file_spuService_proto_goTypes = nil
	file_spuService_proto_depIdxs = nil
}
