// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: spuService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 商品库
type Spu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                                      //ID
	Type                       string         `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`                                                                   //商品类型
	ShopId                     int64          `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                                //分店ID
	CategoryId                 int64          `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                                    //商品分类
	TaxonomyId                 int64          `protobuf:"varint,5,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                                    //商品类目
	BrandId                    int32          `protobuf:"varint,6,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                             //品牌
	Name                       string         `protobuf:"bytes,7,opt,name=name,proto3" json:"name"`                                                                   //商品名称
	Code                       string         `protobuf:"bytes,8,opt,name=code,proto3" json:"code"`                                                                   //SPU编码
	SellMode                   string         `protobuf:"bytes,9,opt,name=sell_mode,json=sellMode,proto3" json:"sell_mode"`                                           //销售模式
	ImageUrl                   string         `protobuf:"bytes,10,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                                          //商品主图
	VideoUrl                   string         `protobuf:"bytes,11,opt,name=video_url,json=videoUrl,proto3" json:"video_url"`                                          //主图视频
	ExplainVideoUrl            string         `protobuf:"bytes,12,opt,name=explain_video_url,json=explainVideoUrl,proto3" json:"explain_video_url"`                   //讲解视频
	IsVirtual                  string         `protobuf:"bytes,13,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`                                       //虚拟商品
	IsManySpec                 string         `protobuf:"bytes,14,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                                  //多规格商品
	IsOpenWeigh                string         `protobuf:"bytes,15,opt,name=is_open_weigh,json=isOpenWeigh,proto3" json:"is_open_weigh"`                               //开启称重
	IsMoreBarcode              string         `protobuf:"bytes,16,opt,name=is_more_barcode,json=isMoreBarcode,proto3" json:"is_more_barcode"`                         //一品多码
	UnitId                     int32          `protobuf:"varint,17,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`                                               //计量单位ID
	UnitName                   string         `protobuf:"bytes,18,opt,name=unit_name,json=unitName,proto3" json:"unit_name"`                                          //计量单位名称
	UnitType                   string         `protobuf:"bytes,19,opt,name=unit_type,json=unitType,proto3" json:"unit_type"`                                          //计量单位类型
	Inventory                  int64          `protobuf:"varint,20,opt,name=inventory,proto3" json:"inventory"`                                                       //库存
	InventoryDeductType        string         `protobuf:"bytes,21,opt,name=inventory_deduct_type,json=inventoryDeductType,proto3" json:"inventory_deduct_type"`       //库存扣减类型
	IsShelve                   string         `protobuf:"bytes,22,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`                                          //是否上架
	IsMemberRight              string         `protobuf:"bytes,23,opt,name=is_member_right,json=isMemberRight,proto3" json:"is_member_right"`                         //购买权限
	IsMemberPrice              string         `protobuf:"bytes,24,opt,name=is_member_price,json=isMemberPrice,proto3" json:"is_member_price"`                         //是否会员折扣价
	MinOriginalPrice           int64          `protobuf:"varint,25,opt,name=min_original_price,json=minOriginalPrice,proto3" json:"min_original_price"`               //最低原价
	MaxOriginalPrice           int64          `protobuf:"varint,26,opt,name=max_original_price,json=maxOriginalPrice,proto3" json:"max_original_price"`               //最大原价
	MinPrice                   int64          `protobuf:"varint,27,opt,name=min_price,json=minPrice,proto3" json:"min_price"`                                         //最低价格
	MaxPrice                   int64          `protobuf:"varint,28,opt,name=max_price,json=maxPrice,proto3" json:"max_price"`                                         //最高价格
	BuyMinNumber               int64          `protobuf:"varint,29,opt,name=buy_min_number,json=buyMinNumber,proto3" json:"buy_min_number"`                           //最低起购数量
	BuyMaxNumber               int64          `protobuf:"varint,30,opt,name=buy_max_number,json=buyMaxNumber,proto3" json:"buy_max_number"`                           //最大购买数量
	PhotoCount                 int64          `protobuf:"varint,31,opt,name=photo_count,json=photoCount,proto3" json:"photo_count"`                                   //图片数量
	AccessCount                int64          `protobuf:"varint,32,opt,name=access_count,json=accessCount,proto3" json:"access_count"`                                //访问次数
	SaleCount                  int64          `protobuf:"varint,33,opt,name=sale_count,json=saleCount,proto3" json:"sale_count"`                                      //实际销量
	InitialSales               int64          `protobuf:"varint,34,opt,name=initial_sales,json=initialSales,proto3" json:"initial_sales"`                             //初始销量
	ButtonMode                 string         `protobuf:"bytes,35,opt,name=button_mode,json=buttonMode,proto3" json:"button_mode"`                                    //立即购买按钮
	ButtonCustom               string         `protobuf:"bytes,36,opt,name=button_custom,json=buttonCustom,proto3" json:"button_custom"`                              //按钮自定义名称
	LogisticsTypes             []string       `protobuf:"bytes,37,rep,name=logistics_types,json=logisticsTypes,proto3" json:"logistics_types"`                        //支持物流类型
	ExpressFeeType             string         `protobuf:"bytes,38,opt,name=express_fee_type,json=expressFeeType,proto3" json:"express_fee_type"`                      //快递运费类型
	ExpressUniformFee          int64          `protobuf:"varint,39,opt,name=express_uniform_fee,json=expressUniformFee,proto3" json:"express_uniform_fee"`            //快递统一运费
	ExpressFeeTemplateId       int64          `protobuf:"varint,40,opt,name=express_fee_template_id,json=expressFeeTemplateId,proto3" json:"express_fee_template_id"` //快递运费模板
	ClientTypes                []string       `protobuf:"bytes,41,rep,name=client_types,json=clientTypes,proto3" json:"client_types"`                                 //的客户终端
	DetailTemplateId           int64          `protobuf:"varint,42,opt,name=detail_template_id,json=detailTemplateId,proto3" json:"detail_template_id"`               //详情模板
	Content                    string         `protobuf:"bytes,43,opt,name=content,proto3" json:"content"`                                                            //商品内容
	SellingDesc                string         `protobuf:"bytes,44,opt,name=selling_desc,json=sellingDesc,proto3" json:"selling_desc"`                                 //卖点描述
	ShareDesc                  string         `protobuf:"bytes,45,opt,name=share_desc,json=shareDesc,proto3" json:"share_desc"`                                       //分享描述
	SeoTitle                   string         `protobuf:"bytes,46,opt,name=seo_title,json=seoTitle,proto3" json:"seo_title"`                                          //SEO标题
	SeoKeywords                string         `protobuf:"bytes,47,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords"`                                 //SEO关键字
	SeoDesc                    string         `protobuf:"bytes,48,opt,name=seo_desc,json=seoDesc,proto3" json:"seo_desc"`                                             //SEO描述
	Sort                       int32          `protobuf:"varint,49,opt,name=sort,proto3" json:"sort"`                                                                 //排序
	ExtraMainId                string         `protobuf:"bytes,50,opt,name=extra_main_id,json=extraMainId,proto3" json:"extra_main_id"`                               //扩展业务主要ID
	OutSystemId                string         `protobuf:"bytes,51,opt,name=out_system_id,json=outSystemId,proto3" json:"out_system_id"`                               //外部系统ID
	Status                     string         `protobuf:"bytes,52,opt,name=status,proto3" json:"status"`                                                              //商品状态
	CreatedAt                  string         `protobuf:"bytes,53,opt,name=created_at,json=createdAt,proto3" json:"created_at"`                                       //创建时间
	UpdatedAt                  string         `protobuf:"bytes,54,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`                                       //修改时间
	DeletedAt                  string         `protobuf:"bytes,55,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`                                       //删除时间
	ShowOriginalPrice          string         `protobuf:"bytes,60,opt,name=show_original_price,json=showOriginalPrice,proto3" json:"show_original_price"`             //显示原价（单值:10, 区间:10.00-20.00）一般用于展示使用
	ShowPrice                  string         `protobuf:"bytes,61,opt,name=show_price,json=showPrice,proto3" json:"show_price"`                                       //显示销售价格（单值:10, 区间:10.00-20.00）一般用于展示使用
	ShowFieldOriginalPriceText string         `protobuf:"bytes,62,opt,name=show_field_original_price_text,json=showFieldOriginalPriceText,proto3" json:"show_field_original_price_text"`
	ShowFieldPriceText         string         `protobuf:"bytes,63,opt,name=show_field_price_text,json=showFieldPriceText,proto3" json:"show_field_price_text"`
	Brand                      *Brand         `protobuf:"bytes,64,opt,name=brand,proto3" json:"brand"`
	Category                   *Category      `protobuf:"bytes,65,opt,name=category,proto3" json:"category"`
	Presale                    *SpuPresale    `protobuf:"bytes,66,opt,name=presale,proto3" json:"presale"`
	Photos                     []*SpuPhoto    `protobuf:"bytes,67,rep,name=photos,proto3" json:"photos"`
	Groups                     []*Group       `protobuf:"bytes,68,rep,name=groups,proto3" json:"groups"`
	Skus                       []*Sku         `protobuf:"bytes,69,rep,name=skus,proto3" json:"skus"`
	Sku                        *Sku           `protobuf:"bytes,70,opt,name=sku,proto3" json:"sku"`
	Labels                     []*Label       `protobuf:"bytes,71,rep,name=labels,proto3" json:"labels"`
	SpecTypes                  []*SpuSpecType `protobuf:"bytes,72,rep,name=spec_types,json=specTypes,proto3" json:"spec_types"`
	CommentsCount              int64          `protobuf:"varint,76,opt,name=comments_count,json=commentsCount,proto3" json:"comments_count"`
	GoodsUrl                   string         `protobuf:"bytes,77,opt,name=goods_url,json=goodsUrl,proto3" json:"goods_url"`
	ContentWeb                 string         `protobuf:"bytes,78,opt,name=content_web,json=contentWeb,proto3" json:"content_web"` //web内容
	ContentApp                 string         `protobuf:"bytes,79,opt,name=content_app,json=contentApp,proto3" json:"content_app"` //app内容
	BrandName                  string         `protobuf:"bytes,80,opt,name=brand_name,json=brandName,proto3" json:"brand_name"`
	StatusName                 string         `protobuf:"bytes,81,opt,name=status_name,json=statusName,proto3" json:"status_name"`
	IsError                    string         `protobuf:"bytes,82,opt,name=is_error,json=isError,proto3" json:"is_error"`    //是否错误（0否，1是）
	ErrorMsg                   string         `protobuf:"bytes,83,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg"` //错误信息
	IsFavor                    string         `protobuf:"bytes,84,opt,name=is_favor,json=isFavor,proto3" json:"is_favor"`    //是否已收藏(0否，1是)
	Checked                    bool           `protobuf:"varint,85,opt,name=checked,proto3" json:"checked"`
}

func (x *Spu) Reset() {
	*x = Spu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spu) ProtoMessage() {}

func (x *Spu) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spu.ProtoReflect.Descriptor instead.
func (*Spu) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{0}
}

func (x *Spu) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Spu) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Spu) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *Spu) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Spu) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *Spu) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *Spu) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spu) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Spu) GetSellMode() string {
	if x != nil {
		return x.SellMode
	}
	return ""
}

func (x *Spu) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Spu) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *Spu) GetExplainVideoUrl() string {
	if x != nil {
		return x.ExplainVideoUrl
	}
	return ""
}

func (x *Spu) GetIsVirtual() string {
	if x != nil {
		return x.IsVirtual
	}
	return ""
}

func (x *Spu) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *Spu) GetIsOpenWeigh() string {
	if x != nil {
		return x.IsOpenWeigh
	}
	return ""
}

func (x *Spu) GetIsMoreBarcode() string {
	if x != nil {
		return x.IsMoreBarcode
	}
	return ""
}

func (x *Spu) GetUnitId() int32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *Spu) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *Spu) GetUnitType() string {
	if x != nil {
		return x.UnitType
	}
	return ""
}

func (x *Spu) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *Spu) GetInventoryDeductType() string {
	if x != nil {
		return x.InventoryDeductType
	}
	return ""
}

func (x *Spu) GetIsShelve() string {
	if x != nil {
		return x.IsShelve
	}
	return ""
}

func (x *Spu) GetIsMemberRight() string {
	if x != nil {
		return x.IsMemberRight
	}
	return ""
}

func (x *Spu) GetIsMemberPrice() string {
	if x != nil {
		return x.IsMemberPrice
	}
	return ""
}

func (x *Spu) GetMinOriginalPrice() int64 {
	if x != nil {
		return x.MinOriginalPrice
	}
	return 0
}

func (x *Spu) GetMaxOriginalPrice() int64 {
	if x != nil {
		return x.MaxOriginalPrice
	}
	return 0
}

func (x *Spu) GetMinPrice() int64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *Spu) GetMaxPrice() int64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *Spu) GetBuyMinNumber() int64 {
	if x != nil {
		return x.BuyMinNumber
	}
	return 0
}

func (x *Spu) GetBuyMaxNumber() int64 {
	if x != nil {
		return x.BuyMaxNumber
	}
	return 0
}

func (x *Spu) GetPhotoCount() int64 {
	if x != nil {
		return x.PhotoCount
	}
	return 0
}

func (x *Spu) GetAccessCount() int64 {
	if x != nil {
		return x.AccessCount
	}
	return 0
}

func (x *Spu) GetSaleCount() int64 {
	if x != nil {
		return x.SaleCount
	}
	return 0
}

func (x *Spu) GetInitialSales() int64 {
	if x != nil {
		return x.InitialSales
	}
	return 0
}

func (x *Spu) GetButtonMode() string {
	if x != nil {
		return x.ButtonMode
	}
	return ""
}

func (x *Spu) GetButtonCustom() string {
	if x != nil {
		return x.ButtonCustom
	}
	return ""
}

func (x *Spu) GetLogisticsTypes() []string {
	if x != nil {
		return x.LogisticsTypes
	}
	return nil
}

func (x *Spu) GetExpressFeeType() string {
	if x != nil {
		return x.ExpressFeeType
	}
	return ""
}

func (x *Spu) GetExpressUniformFee() int64 {
	if x != nil {
		return x.ExpressUniformFee
	}
	return 0
}

func (x *Spu) GetExpressFeeTemplateId() int64 {
	if x != nil {
		return x.ExpressFeeTemplateId
	}
	return 0
}

func (x *Spu) GetClientTypes() []string {
	if x != nil {
		return x.ClientTypes
	}
	return nil
}

func (x *Spu) GetDetailTemplateId() int64 {
	if x != nil {
		return x.DetailTemplateId
	}
	return 0
}

func (x *Spu) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Spu) GetSellingDesc() string {
	if x != nil {
		return x.SellingDesc
	}
	return ""
}

func (x *Spu) GetShareDesc() string {
	if x != nil {
		return x.ShareDesc
	}
	return ""
}

func (x *Spu) GetSeoTitle() string {
	if x != nil {
		return x.SeoTitle
	}
	return ""
}

func (x *Spu) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *Spu) GetSeoDesc() string {
	if x != nil {
		return x.SeoDesc
	}
	return ""
}

func (x *Spu) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Spu) GetExtraMainId() string {
	if x != nil {
		return x.ExtraMainId
	}
	return ""
}

func (x *Spu) GetOutSystemId() string {
	if x != nil {
		return x.OutSystemId
	}
	return ""
}

func (x *Spu) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Spu) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Spu) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Spu) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Spu) GetShowOriginalPrice() string {
	if x != nil {
		return x.ShowOriginalPrice
	}
	return ""
}

func (x *Spu) GetShowPrice() string {
	if x != nil {
		return x.ShowPrice
	}
	return ""
}

func (x *Spu) GetShowFieldOriginalPriceText() string {
	if x != nil {
		return x.ShowFieldOriginalPriceText
	}
	return ""
}

func (x *Spu) GetShowFieldPriceText() string {
	if x != nil {
		return x.ShowFieldPriceText
	}
	return ""
}

func (x *Spu) GetBrand() *Brand {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Spu) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Spu) GetPresale() *SpuPresale {
	if x != nil {
		return x.Presale
	}
	return nil
}

func (x *Spu) GetPhotos() []*SpuPhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *Spu) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Spu) GetSkus() []*Sku {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *Spu) GetSku() *Sku {
	if x != nil {
		return x.Sku
	}
	return nil
}

func (x *Spu) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Spu) GetSpecTypes() []*SpuSpecType {
	if x != nil {
		return x.SpecTypes
	}
	return nil
}

func (x *Spu) GetCommentsCount() int64 {
	if x != nil {
		return x.CommentsCount
	}
	return 0
}

func (x *Spu) GetGoodsUrl() string {
	if x != nil {
		return x.GoodsUrl
	}
	return ""
}

func (x *Spu) GetContentWeb() string {
	if x != nil {
		return x.ContentWeb
	}
	return ""
}

func (x *Spu) GetContentApp() string {
	if x != nil {
		return x.ContentApp
	}
	return ""
}

func (x *Spu) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *Spu) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *Spu) GetIsError() string {
	if x != nil {
		return x.IsError
	}
	return ""
}

func (x *Spu) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *Spu) GetIsFavor() string {
	if x != nil {
		return x.IsFavor
	}
	return ""
}

func (x *Spu) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

// 商品库
type SpuEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                                      //ID
	Type                 string         `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`                                                                   //商品类型
	ShopId               int64          `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                                //分店ID
	CategoryId           int64          `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                                    //商品分类
	TaxonomyId           int64          `protobuf:"varint,5,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                                    //商品类目
	BrandId              int32          `protobuf:"varint,6,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                             //品牌
	Name                 string         `protobuf:"bytes,7,opt,name=name,proto3" json:"name"`                                                                   //商品名称
	Content              string         `protobuf:"bytes,8,opt,name=content,proto3" json:"content"`                                                             //商品内容
	SellingDesc          string         `protobuf:"bytes,9,opt,name=selling_desc,json=sellingDesc,proto3" json:"selling_desc"`                                  //卖点描述
	ShareDesc            string         `protobuf:"bytes,10,opt,name=share_desc,json=shareDesc,proto3" json:"share_desc"`                                       //分享描述
	ImageUrl             string         `protobuf:"bytes,11,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                                          //商品主图
	VideoUrl             string         `protobuf:"bytes,12,opt,name=video_url,json=videoUrl,proto3" json:"video_url"`                                          //主图视频
	ExplainVideoUrl      string         `protobuf:"bytes,13,opt,name=explain_video_url,json=explainVideoUrl,proto3" json:"explain_video_url"`                   //讲解视频
	IsVirtual            string         `protobuf:"bytes,14,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`                                       //虚拟商品
	IsManySpec           string         `protobuf:"bytes,15,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                                  //多规格商品
	IsOpenWeigh          string         `protobuf:"bytes,16,opt,name=is_open_weigh,json=isOpenWeigh,proto3" json:"is_open_weigh"`                               //开启称重
	Code                 string         `protobuf:"bytes,17,opt,name=code,proto3" json:"code"`                                                                  //SPU编码
	IsMoreBarcode        string         `protobuf:"bytes,18,opt,name=is_more_barcode,json=isMoreBarcode,proto3" json:"is_more_barcode"`                         //一品多码
	UnitId               int32          `protobuf:"varint,19,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`                                               //计量单位ID
	UnitName             string         `protobuf:"bytes,20,opt,name=unit_name,json=unitName,proto3" json:"unit_name"`                                          //计量单位名称
	IsShelve             string         `protobuf:"bytes,23,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`                                          //是否上架
	SellMode             string         `protobuf:"bytes,24,opt,name=sell_mode,json=sellMode,proto3" json:"sell_mode"`                                          //销售模式
	InventoryDeductType  string         `protobuf:"bytes,25,opt,name=inventory_deduct_type,json=inventoryDeductType,proto3" json:"inventory_deduct_type"`       //扣减库存类型
	IsMemberRight        string         `protobuf:"bytes,26,opt,name=is_member_right,json=isMemberRight,proto3" json:"is_member_right"`                         //购买权限
	IsMemberPrice        string         `protobuf:"bytes,27,opt,name=is_member_price,json=isMemberPrice,proto3" json:"is_member_price"`                         //是否会员折扣价
	BuyMinNumber         int64          `protobuf:"varint,32,opt,name=buy_min_number,json=buyMinNumber,proto3" json:"buy_min_number"`                           //最低起购数量
	BuyMaxNumber         int64          `protobuf:"varint,33,opt,name=buy_max_number,json=buyMaxNumber,proto3" json:"buy_max_number"`                           //最大购买数量
	InitialSales         int64          `protobuf:"varint,37,opt,name=initial_sales,json=initialSales,proto3" json:"initial_sales"`                             //初始销售数量
	ButtonMode           string         `protobuf:"bytes,38,opt,name=button_mode,json=buttonMode,proto3" json:"button_mode"`                                    //立即购买按钮
	ButtonCustom         string         `protobuf:"bytes,39,opt,name=button_custom,json=buttonCustom,proto3" json:"button_custom"`                              //按钮自定义名称
	LogisticsTypes       []string       `protobuf:"bytes,40,rep,name=logistics_types,json=logisticsTypes,proto3" json:"logistics_types"`                        //支持物流类型
	ExpressFeeMode       string         `protobuf:"bytes,41,opt,name=express_fee_mode,json=expressFeeMode,proto3" json:"express_fee_mode"`                      //运费模式
	ExpressUniformFee    int64          `protobuf:"varint,42,opt,name=express_uniform_fee,json=expressUniformFee,proto3" json:"express_uniform_fee"`            //统一运费
	ExpressFeeTemplateId int64          `protobuf:"varint,43,opt,name=express_fee_template_id,json=expressFeeTemplateId,proto3" json:"express_fee_template_id"` //运费模板
	ClientTypes          []string       `protobuf:"bytes,46,rep,name=client_types,json=clientTypes,proto3" json:"client_types"`                                 //的客户终端
	DetailTemplateId     int64          `protobuf:"varint,47,opt,name=detail_template_id,json=detailTemplateId,proto3" json:"detail_template_id"`               //详情模板
	SeoTitle             string         `protobuf:"bytes,48,opt,name=seo_title,json=seoTitle,proto3" json:"seo_title"`                                          //SEO标题
	SeoKeywords          string         `protobuf:"bytes,49,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords"`                                 //SEO关键字
	SeoDesc              string         `protobuf:"bytes,50,opt,name=seo_desc,json=seoDesc,proto3" json:"seo_desc"`                                             //SEO描述
	Sort                 int32          `protobuf:"varint,51,opt,name=sort,proto3" json:"sort"`                                                                 //排序
	Status               string         `protobuf:"bytes,52,opt,name=status,proto3" json:"status"`                                                              //商品状态
	Presale              *SpuPresale    `protobuf:"bytes,66,opt,name=presale,proto3" json:"presale"`
	Photos               []*SpuPhoto    `protobuf:"bytes,67,rep,name=photos,proto3" json:"photos"`
	Groups               []*Group       `protobuf:"bytes,68,rep,name=groups,proto3" json:"groups"`
	Skus                 []*Sku         `protobuf:"bytes,69,rep,name=skus,proto3" json:"skus"`
	Sku                  *Sku           `protobuf:"bytes,70,opt,name=sku,proto3" json:"sku"`
	Labels               []*Label       `protobuf:"bytes,71,rep,name=labels,proto3" json:"labels"`
	SpecTypes            []*SpuSpecType `protobuf:"bytes,72,rep,name=spec_types,json=specTypes,proto3" json:"spec_types"`
}

func (x *SpuEdit) Reset() {
	*x = SpuEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuEdit) ProtoMessage() {}

func (x *SpuEdit) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuEdit.ProtoReflect.Descriptor instead.
func (*SpuEdit) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{1}
}

func (x *SpuEdit) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuEdit) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SpuEdit) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *SpuEdit) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SpuEdit) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *SpuEdit) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *SpuEdit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpuEdit) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SpuEdit) GetSellingDesc() string {
	if x != nil {
		return x.SellingDesc
	}
	return ""
}

func (x *SpuEdit) GetShareDesc() string {
	if x != nil {
		return x.ShareDesc
	}
	return ""
}

func (x *SpuEdit) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *SpuEdit) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *SpuEdit) GetExplainVideoUrl() string {
	if x != nil {
		return x.ExplainVideoUrl
	}
	return ""
}

func (x *SpuEdit) GetIsVirtual() string {
	if x != nil {
		return x.IsVirtual
	}
	return ""
}

func (x *SpuEdit) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *SpuEdit) GetIsOpenWeigh() string {
	if x != nil {
		return x.IsOpenWeigh
	}
	return ""
}

func (x *SpuEdit) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SpuEdit) GetIsMoreBarcode() string {
	if x != nil {
		return x.IsMoreBarcode
	}
	return ""
}

func (x *SpuEdit) GetUnitId() int32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *SpuEdit) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *SpuEdit) GetIsShelve() string {
	if x != nil {
		return x.IsShelve
	}
	return ""
}

func (x *SpuEdit) GetSellMode() string {
	if x != nil {
		return x.SellMode
	}
	return ""
}

func (x *SpuEdit) GetInventoryDeductType() string {
	if x != nil {
		return x.InventoryDeductType
	}
	return ""
}

func (x *SpuEdit) GetIsMemberRight() string {
	if x != nil {
		return x.IsMemberRight
	}
	return ""
}

func (x *SpuEdit) GetIsMemberPrice() string {
	if x != nil {
		return x.IsMemberPrice
	}
	return ""
}

func (x *SpuEdit) GetBuyMinNumber() int64 {
	if x != nil {
		return x.BuyMinNumber
	}
	return 0
}

func (x *SpuEdit) GetBuyMaxNumber() int64 {
	if x != nil {
		return x.BuyMaxNumber
	}
	return 0
}

func (x *SpuEdit) GetInitialSales() int64 {
	if x != nil {
		return x.InitialSales
	}
	return 0
}

func (x *SpuEdit) GetButtonMode() string {
	if x != nil {
		return x.ButtonMode
	}
	return ""
}

func (x *SpuEdit) GetButtonCustom() string {
	if x != nil {
		return x.ButtonCustom
	}
	return ""
}

func (x *SpuEdit) GetLogisticsTypes() []string {
	if x != nil {
		return x.LogisticsTypes
	}
	return nil
}

func (x *SpuEdit) GetExpressFeeMode() string {
	if x != nil {
		return x.ExpressFeeMode
	}
	return ""
}

func (x *SpuEdit) GetExpressUniformFee() int64 {
	if x != nil {
		return x.ExpressUniformFee
	}
	return 0
}

func (x *SpuEdit) GetExpressFeeTemplateId() int64 {
	if x != nil {
		return x.ExpressFeeTemplateId
	}
	return 0
}

func (x *SpuEdit) GetClientTypes() []string {
	if x != nil {
		return x.ClientTypes
	}
	return nil
}

func (x *SpuEdit) GetDetailTemplateId() int64 {
	if x != nil {
		return x.DetailTemplateId
	}
	return 0
}

func (x *SpuEdit) GetSeoTitle() string {
	if x != nil {
		return x.SeoTitle
	}
	return ""
}

func (x *SpuEdit) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *SpuEdit) GetSeoDesc() string {
	if x != nil {
		return x.SeoDesc
	}
	return ""
}

func (x *SpuEdit) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SpuEdit) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SpuEdit) GetPresale() *SpuPresale {
	if x != nil {
		return x.Presale
	}
	return nil
}

func (x *SpuEdit) GetPhotos() []*SpuPhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *SpuEdit) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *SpuEdit) GetSkus() []*Sku {
	if x != nil {
		return x.Skus
	}
	return nil
}

func (x *SpuEdit) GetSku() *Sku {
	if x != nil {
		return x.Sku
	}
	return nil
}

func (x *SpuEdit) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SpuEdit) GetSpecTypes() []*SpuSpecType {
	if x != nil {
		return x.SpecTypes
	}
	return nil
}

// 商品Sku
type Sku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                              //ID
	SpuId         int64          `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                           //商品ID
	SkuKey        string         `protobuf:"bytes,3,opt,name=sku_key,json=skuKey,proto3" json:"sku_key"`                         //SKUKey
	Coding        string         `protobuf:"bytes,4,opt,name=coding,proto3" json:"coding"`                                       //编号
	Barcode       string         `protobuf:"bytes,5,opt,name=barcode,proto3" json:"barcode"`                                     //条码
	MoreBarcodes  []string       `protobuf:"bytes,6,rep,name=more_barcodes,json=moreBarcodes,proto3" json:"more_barcodes"`       //更多条码
	OriginalPrice int64          `protobuf:"varint,7,opt,name=original_price,json=originalPrice,proto3" json:"original_price"`   //划线价
	CostPrice     int64          `protobuf:"varint,8,opt,name=cost_price,json=costPrice,proto3" json:"cost_price"`               //成本价
	Price         int64          `protobuf:"varint,9,opt,name=price,proto3" json:"price"`                                        //销售价
	Inventory     int64          `protobuf:"varint,10,opt,name=inventory,proto3" json:"inventory"`                               //库存
	Weight        int64          `protobuf:"varint,11,opt,name=weight,proto3" json:"weight"`                                     //重量
	Volume        int64          `protobuf:"varint,12,opt,name=volume,proto3" json:"volume"`                                     //体积
	Spec          []*SkuSpecInfo `protobuf:"bytes,13,rep,name=spec,proto3" json:"spec"`                                          //规格信息
	SpecDesc      string         `protobuf:"bytes,14,opt,name=spec_desc,json=specDesc,proto3" json:"spec_desc"`                  //规格描述
	ExtraDetailId string         `protobuf:"bytes,15,opt,name=extra_detail_id,json=extraDetailId,proto3" json:"extra_detail_id"` //扩展业务明细ID
	OutSystemId   string         `protobuf:"bytes,16,opt,name=out_system_id,json=outSystemId,proto3" json:"out_system_id"`       //外部系统ID
	CreatedAt     string         `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at"`               //创建时间
	UpdatedAt     string         `protobuf:"bytes,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`               //修改时间
	Spu           *Spu           `protobuf:"bytes,19,opt,name=spu,proto3" json:"spu"`
}

func (x *Sku) Reset() {
	*x = Sku{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sku) ProtoMessage() {}

func (x *Sku) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sku.ProtoReflect.Descriptor instead.
func (*Sku) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{2}
}

func (x *Sku) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sku) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *Sku) GetSkuKey() string {
	if x != nil {
		return x.SkuKey
	}
	return ""
}

func (x *Sku) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *Sku) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *Sku) GetMoreBarcodes() []string {
	if x != nil {
		return x.MoreBarcodes
	}
	return nil
}

func (x *Sku) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *Sku) GetCostPrice() int64 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *Sku) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Sku) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *Sku) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Sku) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Sku) GetSpec() []*SkuSpecInfo {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Sku) GetSpecDesc() string {
	if x != nil {
		return x.SpecDesc
	}
	return ""
}

func (x *Sku) GetExtraDetailId() string {
	if x != nil {
		return x.ExtraDetailId
	}
	return ""
}

func (x *Sku) GetOutSystemId() string {
	if x != nil {
		return x.OutSystemId
	}
	return ""
}

func (x *Sku) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Sku) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Sku) GetSpu() *Spu {
	if x != nil {
		return x.Spu
	}
	return nil
}

type SpuPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SpuId     int64  `protobuf:"varint,2,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`
	ImageId   int64  `protobuf:"varint,3,opt,name=image_id,json=imageId,proto3" json:"image_id"`
	ImageUrl  string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	Sort      int32  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort"`
	CreatedAt string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *SpuPhoto) Reset() {
	*x = SpuPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuPhoto) ProtoMessage() {}

func (x *SpuPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuPhoto.ProtoReflect.Descriptor instead.
func (*SpuPhoto) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{3}
}

func (x *SpuPhoto) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuPhoto) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SpuPhoto) GetImageId() int64 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *SpuPhoto) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *SpuPhoto) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SpuPhoto) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *SpuPhoto) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// 商品Sku请求参数
type SkuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top       int32    `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64    `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sorts     []string `protobuf:"bytes,5,rep,name=sorts,proto3" json:"sorts"`
	DateRange []string `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int64  `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	Command   string   `protobuf:"bytes,9,opt,name=command,proto3" json:"command"`
	//以下为自定义参数
	SpuId         int64    `protobuf:"varint,11,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                          //商品ID
	Coding        string   `protobuf:"bytes,12,opt,name=coding,proto3" json:"coding"`                                      //编号
	Barcode       string   `protobuf:"bytes,13,opt,name=barcode,proto3" json:"barcode"`                                    //条码
	SkuKey        string   `protobuf:"bytes,14,opt,name=sku_key,json=skuKey,proto3" json:"sku_key"`                        //唯一标识
	ExtraDetailId string   `protobuf:"bytes,15,opt,name=extra_detail_id,json=extraDetailId,proto3" json:"extra_detail_id"` //扩展业务明细ID
	SpuIds        []int64  `protobuf:"varint,16,rep,packed,name=spu_ids,json=spuIds,proto3" json:"spu_ids"`
	SkuIds        []int64  `protobuf:"varint,17,rep,packed,name=sku_ids,json=skuIds,proto3" json:"sku_ids"`
	SkuKeyList    []string `protobuf:"bytes,18,rep,name=sku_key_list,json=skuKeyList,proto3" json:"sku_key_list"`
}

func (x *SkuRequest) Reset() {
	*x = SkuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuRequest) ProtoMessage() {}

func (x *SkuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuRequest.ProtoReflect.Descriptor instead.
func (*SkuRequest) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{4}
}

func (x *SkuRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *SkuRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *SkuRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SkuRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *SkuRequest) GetSorts() []string {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *SkuRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *SkuRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SkuRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SkuRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *SkuRequest) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *SkuRequest) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *SkuRequest) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *SkuRequest) GetSkuKey() string {
	if x != nil {
		return x.SkuKey
	}
	return ""
}

func (x *SkuRequest) GetExtraDetailId() string {
	if x != nil {
		return x.ExtraDetailId
	}
	return ""
}

func (x *SkuRequest) GetSpuIds() []int64 {
	if x != nil {
		return x.SpuIds
	}
	return nil
}

func (x *SkuRequest) GetSkuIds() []int64 {
	if x != nil {
		return x.SkuIds
	}
	return nil
}

func (x *SkuRequest) GetSkuKeyList() []string {
	if x != nil {
		return x.SkuKeyList
	}
	return nil
}

// 商品库请求参数
type SpuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top       int32    `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64    `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sorts     []string `protobuf:"bytes,5,rep,name=sorts,proto3" json:"sorts"`
	DateRange []string `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int64  `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	Command   string   `protobuf:"bytes,9,opt,name=command,proto3" json:"command"`
	//以下为自定义参数
	Type                   string `protobuf:"bytes,11,opt,name=type,proto3" json:"type"`                                                                        //商品类型
	ShopId                 int64  `protobuf:"varint,12,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                                     //分店ID
	CategoryId             int64  `protobuf:"varint,13,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                                         //商品分类
	TaxonomyId             int64  `protobuf:"varint,14,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                                         //商品类目
	BrandId                int32  `protobuf:"varint,15,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                                  //品牌
	Name                   string `protobuf:"bytes,16,opt,name=name,proto3" json:"name"`                                                                        //商品名称
	IsVirtual              string `protobuf:"bytes,17,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`                                             //虚拟商品
	IsManySpec             string `protobuf:"bytes,18,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                                        //多规格商品
	IsOpenWeigh            string `protobuf:"bytes,19,opt,name=is_open_weigh,json=isOpenWeigh,proto3" json:"is_open_weigh"`                                     //开启称重
	Code                   string `protobuf:"bytes,20,opt,name=code,proto3" json:"code"`                                                                        //SPU编码
	IsMultiBarcode         string `protobuf:"bytes,21,opt,name=is_multi_barcode,json=isMultiBarcode,proto3" json:"is_multi_barcode"`                            //一品多码
	UnitId                 int32  `protobuf:"varint,22,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`                                                     //计量单位ID
	UnitType               string `protobuf:"bytes,23,opt,name=unit_type,json=unitType,proto3" json:"unit_type"`                                                //计量单位类型
	Inventory              int64  `protobuf:"varint,24,opt,name=inventory,proto3" json:"inventory"`                                                             //库存
	IsShelve               string `protobuf:"bytes,25,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`                                                //是否上架
	SellMode               string `protobuf:"bytes,26,opt,name=sell_mode,json=sellMode,proto3" json:"sell_mode"`                                                //销售模式
	InventoryDeductType    string `protobuf:"bytes,27,opt,name=inventory_deduct_type,json=inventoryDeductType,proto3" json:"inventory_deduct_type"`             //库存扣减类型
	IsMemberRight          string `protobuf:"bytes,28,opt,name=is_member_right,json=isMemberRight,proto3" json:"is_member_right"`                               //购买权限
	IsMemberPrice          string `protobuf:"bytes,29,opt,name=is_member_price,json=isMemberPrice,proto3" json:"is_member_price"`                               //是否会员折扣价
	LogisticsFeeMode       string `protobuf:"bytes,30,opt,name=logistics_fee_mode,json=logisticsFeeMode,proto3" json:"logistics_fee_mode"`                      //运费模式
	LogisticsFeeTemplateId int64  `protobuf:"varint,31,opt,name=logistics_fee_template_id,json=logisticsFeeTemplateId,proto3" json:"logistics_fee_template_id"` //运费模板
	PrimaryLabel           string `protobuf:"bytes,32,opt,name=primary_label,json=primaryLabel,proto3" json:"primary_label"`                                    //关键标签
	DetailTemplateId       int64  `protobuf:"varint,33,opt,name=detail_template_id,json=detailTemplateId,proto3" json:"detail_template_id"`                     //详情模板
	Status                 string `protobuf:"bytes,34,opt,name=status,proto3" json:"status"`                                                                    //商品状态
	ExtraMainId            string `protobuf:"bytes,35,opt,name=extra_main_id,json=extraMainId,proto3" json:"extra_main_id"`                                     //扩展业务主要ID
	ExtraDetailId          string `protobuf:"bytes,36,opt,name=extra_detail_id,json=extraDetailId,proto3" json:"extra_detail_id"`                               //扩展业务明细ID
	OutSystemId            string `protobuf:"bytes,37,opt,name=out_system_id,json=outSystemId,proto3" json:"out_system_id"`                                     //外部系统ID
}

func (x *SpuRequest) Reset() {
	*x = SpuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuRequest) ProtoMessage() {}

func (x *SpuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuRequest.ProtoReflect.Descriptor instead.
func (*SpuRequest) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{5}
}

func (x *SpuRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *SpuRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *SpuRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SpuRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *SpuRequest) GetSorts() []string {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *SpuRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *SpuRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SpuRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SpuRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *SpuRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SpuRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *SpuRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SpuRequest) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *SpuRequest) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *SpuRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpuRequest) GetIsVirtual() string {
	if x != nil {
		return x.IsVirtual
	}
	return ""
}

func (x *SpuRequest) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *SpuRequest) GetIsOpenWeigh() string {
	if x != nil {
		return x.IsOpenWeigh
	}
	return ""
}

func (x *SpuRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SpuRequest) GetIsMultiBarcode() string {
	if x != nil {
		return x.IsMultiBarcode
	}
	return ""
}

func (x *SpuRequest) GetUnitId() int32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *SpuRequest) GetUnitType() string {
	if x != nil {
		return x.UnitType
	}
	return ""
}

func (x *SpuRequest) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *SpuRequest) GetIsShelve() string {
	if x != nil {
		return x.IsShelve
	}
	return ""
}

func (x *SpuRequest) GetSellMode() string {
	if x != nil {
		return x.SellMode
	}
	return ""
}

func (x *SpuRequest) GetInventoryDeductType() string {
	if x != nil {
		return x.InventoryDeductType
	}
	return ""
}

func (x *SpuRequest) GetIsMemberRight() string {
	if x != nil {
		return x.IsMemberRight
	}
	return ""
}

func (x *SpuRequest) GetIsMemberPrice() string {
	if x != nil {
		return x.IsMemberPrice
	}
	return ""
}

func (x *SpuRequest) GetLogisticsFeeMode() string {
	if x != nil {
		return x.LogisticsFeeMode
	}
	return ""
}

func (x *SpuRequest) GetLogisticsFeeTemplateId() int64 {
	if x != nil {
		return x.LogisticsFeeTemplateId
	}
	return 0
}

func (x *SpuRequest) GetPrimaryLabel() string {
	if x != nil {
		return x.PrimaryLabel
	}
	return ""
}

func (x *SpuRequest) GetDetailTemplateId() int64 {
	if x != nil {
		return x.DetailTemplateId
	}
	return 0
}

func (x *SpuRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SpuRequest) GetExtraMainId() string {
	if x != nil {
		return x.ExtraMainId
	}
	return ""
}

func (x *SpuRequest) GetExtraDetailId() string {
	if x != nil {
		return x.ExtraDetailId
	}
	return ""
}

func (x *SpuRequest) GetOutSystemId() string {
	if x != nil {
		return x.OutSystemId
	}
	return ""
}

// 商品库响应数据
type SpuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string        `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Entity *Spu          `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity"`
	Items  []*Spu        `protobuf:"bytes,4,rep,name=items,proto3" json:"items"`
}

func (x *SpuResponse) Reset() {
	*x = SpuResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spuService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpuResponse) ProtoMessage() {}

func (x *SpuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spuService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpuResponse.ProtoReflect.Descriptor instead.
func (*SpuResponse) Descriptor() ([]byte, []int) {
	return file_spuService_proto_rawDescGZIP(), []int{6}
}

func (x *SpuResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SpuResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *SpuResponse) GetEntity() *Spu {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SpuResponse) GetItems() []*Spu {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_spuService_proto protoreflect.FileDescriptor

var file_spuService_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x70, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x70, 0x75, 0x50, 0x72,
	0x65, 0x73, 0x61, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa4, 0x15, 0x0a, 0x03, 0x53, 0x70, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x73, 0x4d, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75,
	0x79, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75,
	0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x46, 0x65, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6f, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6f, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6f, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x75, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x68, 0x6f, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x42, 0x0a, 0x1e, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x2e,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x50, 0x72,
	0x65, 0x73, 0x61, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x43, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x44, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x18, 0x45, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75,
	0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x6b, 0x75, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x34, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x48,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x70, 0x75, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xff, 0x0c, 0x0a, 0x07, 0x53, 0x70,
	0x75, 0x45, 0x64, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61,
	0x6e, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x42,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75,
	0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x78,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x46, 0x65, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72,
	0x6d, 0x46, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x46, 0x65,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x6f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6f,
	0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x6f, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x70, 0x75, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73,
	0x61, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x43, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x70, 0x75, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12,
	0x27, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x44, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x6b, 0x75, 0x73,
	0x18, 0x45, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x73,
	0x6b, 0x75, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x27, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x48, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xb9, 0x04, 0x0a, 0x03,
	0x53, 0x6b, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b,
	0x75, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6b, 0x75,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f,
	0x72, 0x65, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b,
	0x75, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x03, 0x73, 0x70, 0x75, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x70, 0x75, 0x52, 0x03, 0x73, 0x70, 0x75, 0x22, 0xbb, 0x01, 0x0a, 0x08, 0x53, 0x70, 0x75, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xbc, 0x03, 0x0a, 0x0a, 0x53, 0x6b, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6b, 0x75, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6b, 0x75, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x70, 0x75, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x75,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6b, 0x75, 0x49,
	0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6b, 0x75, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x75, 0x4b, 0x65, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xf5, 0x08, 0x0a, 0x0a, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x73, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46,
	0x65, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x46, 0x65, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x75, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a,
	0x0b, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x23,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x70, 0x75, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32,
	0xb7, 0x03, 0x0a, 0x0a, 0x53, 0x70, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x45, 0x64, 0x69, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x45, 0x64, 0x69,
	0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70,
	0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x06, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x70, 0x75, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x70, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x65, 0x63, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x75, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spuService_proto_rawDescOnce sync.Once
	file_spuService_proto_rawDescData = file_spuService_proto_rawDesc
)

func file_spuService_proto_rawDescGZIP() []byte {
	file_spuService_proto_rawDescOnce.Do(func() {
		file_spuService_proto_rawDescData = protoimpl.X.CompressGZIP(file_spuService_proto_rawDescData)
	})
	return file_spuService_proto_rawDescData
}

var file_spuService_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_spuService_proto_goTypes = []interface{}{
	(*Spu)(nil),          // 0: services.Spu
	(*SpuEdit)(nil),      // 1: services.SpuEdit
	(*Sku)(nil),          // 2: services.Sku
	(*SpuPhoto)(nil),     // 3: services.SpuPhoto
	(*SkuRequest)(nil),   // 4: services.SkuRequest
	(*SpuRequest)(nil),   // 5: services.SpuRequest
	(*SpuResponse)(nil),  // 6: services.SpuResponse
	(*Brand)(nil),        // 7: services.Brand
	(*Category)(nil),     // 8: services.Category
	(*SpuPresale)(nil),   // 9: services.SpuPresale
	(*Group)(nil),        // 10: services.Group
	(*Label)(nil),        // 11: services.Label
	(*SpuSpecType)(nil),  // 12: services.SpuSpecType
	(*SkuSpecInfo)(nil),  // 13: services.SkuSpecInfo
	(*common.Pager)(nil), // 14: common.Pager
}
var file_spuService_proto_depIdxs = []int32{
	7,  // 0: services.Spu.brand:type_name -> services.Brand
	8,  // 1: services.Spu.category:type_name -> services.Category
	9,  // 2: services.Spu.presale:type_name -> services.SpuPresale
	3,  // 3: services.Spu.photos:type_name -> services.SpuPhoto
	10, // 4: services.Spu.groups:type_name -> services.Group
	2,  // 5: services.Spu.skus:type_name -> services.Sku
	2,  // 6: services.Spu.sku:type_name -> services.Sku
	11, // 7: services.Spu.labels:type_name -> services.Label
	12, // 8: services.Spu.spec_types:type_name -> services.SpuSpecType
	9,  // 9: services.SpuEdit.presale:type_name -> services.SpuPresale
	3,  // 10: services.SpuEdit.photos:type_name -> services.SpuPhoto
	10, // 11: services.SpuEdit.groups:type_name -> services.Group
	2,  // 12: services.SpuEdit.skus:type_name -> services.Sku
	2,  // 13: services.SpuEdit.sku:type_name -> services.Sku
	11, // 14: services.SpuEdit.labels:type_name -> services.Label
	12, // 15: services.SpuEdit.spec_types:type_name -> services.SpuSpecType
	13, // 16: services.Sku.spec:type_name -> services.SkuSpecInfo
	0,  // 17: services.Sku.spu:type_name -> services.Spu
	14, // 18: services.SpuResponse.pager:type_name -> common.Pager
	0,  // 19: services.SpuResponse.entity:type_name -> services.Spu
	0,  // 20: services.SpuResponse.items:type_name -> services.Spu
	1,  // 21: services.SpuService.Create:input_type -> services.SpuEdit
	1,  // 22: services.SpuService.Update:input_type -> services.SpuEdit
	0,  // 23: services.SpuService.Delete:input_type -> services.Spu
	0,  // 24: services.SpuService.Get:input_type -> services.Spu
	0,  // 25: services.SpuService.Detail:input_type -> services.Spu
	5,  // 26: services.SpuService.Search:input_type -> services.SpuRequest
	5,  // 27: services.SpuService.List:input_type -> services.SpuRequest
	5,  // 28: services.SpuService.BatchExec:input_type -> services.SpuRequest
	6,  // 29: services.SpuService.Create:output_type -> services.SpuResponse
	6,  // 30: services.SpuService.Update:output_type -> services.SpuResponse
	6,  // 31: services.SpuService.Delete:output_type -> services.SpuResponse
	6,  // 32: services.SpuService.Get:output_type -> services.SpuResponse
	6,  // 33: services.SpuService.Detail:output_type -> services.SpuResponse
	6,  // 34: services.SpuService.Search:output_type -> services.SpuResponse
	6,  // 35: services.SpuService.List:output_type -> services.SpuResponse
	6,  // 36: services.SpuService.BatchExec:output_type -> services.SpuResponse
	29, // [29:37] is the sub-list for method output_type
	21, // [21:29] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_spuService_proto_init() }
func file_spuService_proto_init() {
	if File_spuService_proto != nil {
		return
	}
	file_baseInfoService_proto_init()
	file_brandService_proto_init()
	file_categoryService_proto_init()
	file_groupService_proto_init()
	file_labelService_proto_init()
	file_spuPresaleService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spuService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sku); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spuService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpuResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spuService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spuService_proto_goTypes,
		DependencyIndexes: file_spuService_proto_depIdxs,
		MessageInfos:      file_spuService_proto_msgTypes,
	}.Build()
	File_spuService_proto = out.File
	file_spuService_proto_rawDesc = nil
	file_spuService_proto_goTypes = nil
	file_spuService_proto_depIdxs = nil
}
