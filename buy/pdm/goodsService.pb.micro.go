// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: goodsService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GoodsService service

func NewGoodsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GoodsService service

type GoodsService interface {
	//商品详情
	Detail(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsResponse, error)
	//商品搜索
	Search(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsSearchResponse, error)
	//商品列表
	List(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsListResponse, error)
	//分类导航
	Category(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsCategoryResponse, error)
	//规格详情
	SpecDetail(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsSpecDetailResponse, error)
	//规格类型
	SpecType(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsSpecTypeResponse, error)
}

type goodsService struct {
	c    client.Client
	name string
}

func NewGoodsService(name string, c client.Client) GoodsService {
	return &goodsService{
		c:    c,
		name: name,
	}
}

func (c *goodsService) Detail(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsService.Detail", in)
	out := new(GoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsService) Search(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsSearchResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsService.Search", in)
	out := new(GoodsSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsService) List(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsListResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsService.List", in)
	out := new(GoodsListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsService) Category(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsService.Category", in)
	out := new(GoodsCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsService) SpecDetail(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsSpecDetailResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsService.SpecDetail", in)
	out := new(GoodsSpecDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsService) SpecType(ctx context.Context, in *GoodsRequest, opts ...client.CallOption) (*GoodsSpecTypeResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsService.SpecType", in)
	out := new(GoodsSpecTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoodsService service

type GoodsServiceHandler interface {
	//商品详情
	Detail(context.Context, *GoodsRequest, *GoodsResponse) error
	//商品搜索
	Search(context.Context, *GoodsRequest, *GoodsSearchResponse) error
	//商品列表
	List(context.Context, *GoodsRequest, *GoodsListResponse) error
	//分类导航
	Category(context.Context, *GoodsRequest, *GoodsCategoryResponse) error
	//规格详情
	SpecDetail(context.Context, *GoodsRequest, *GoodsSpecDetailResponse) error
	//规格类型
	SpecType(context.Context, *GoodsRequest, *GoodsSpecTypeResponse) error
}

func RegisterGoodsServiceHandler(s server.Server, hdlr GoodsServiceHandler, opts ...server.HandlerOption) error {
	type goodsService interface {
		Detail(ctx context.Context, in *GoodsRequest, out *GoodsResponse) error
		Search(ctx context.Context, in *GoodsRequest, out *GoodsSearchResponse) error
		List(ctx context.Context, in *GoodsRequest, out *GoodsListResponse) error
		Category(ctx context.Context, in *GoodsRequest, out *GoodsCategoryResponse) error
		SpecDetail(ctx context.Context, in *GoodsRequest, out *GoodsSpecDetailResponse) error
		SpecType(ctx context.Context, in *GoodsRequest, out *GoodsSpecTypeResponse) error
	}
	type GoodsService struct {
		goodsService
	}
	h := &goodsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GoodsService{h}, opts...))
}

type goodsServiceHandler struct {
	GoodsServiceHandler
}

func (h *goodsServiceHandler) Detail(ctx context.Context, in *GoodsRequest, out *GoodsResponse) error {
	return h.GoodsServiceHandler.Detail(ctx, in, out)
}

func (h *goodsServiceHandler) Search(ctx context.Context, in *GoodsRequest, out *GoodsSearchResponse) error {
	return h.GoodsServiceHandler.Search(ctx, in, out)
}

func (h *goodsServiceHandler) List(ctx context.Context, in *GoodsRequest, out *GoodsListResponse) error {
	return h.GoodsServiceHandler.List(ctx, in, out)
}

func (h *goodsServiceHandler) Category(ctx context.Context, in *GoodsRequest, out *GoodsCategoryResponse) error {
	return h.GoodsServiceHandler.Category(ctx, in, out)
}

func (h *goodsServiceHandler) SpecDetail(ctx context.Context, in *GoodsRequest, out *GoodsSpecDetailResponse) error {
	return h.GoodsServiceHandler.SpecDetail(ctx, in, out)
}

func (h *goodsServiceHandler) SpecType(ctx context.Context, in *GoodsRequest, out *GoodsSpecTypeResponse) error {
	return h.GoodsServiceHandler.SpecType(ctx, in, out)
}
