// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: showService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShowService service

func NewShowServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShowService service

type ShowService interface {
	// 显示商品详情
	GoodsDetail(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*ShowResponse, error)
	// 显示商品列表
	GoodsList(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*ShowResponse, error)
}

type showService struct {
	c    client.Client
	name string
}

func NewShowService(name string, c client.Client) ShowService {
	return &showService{
		c:    c,
		name: name,
	}
}

func (c *showService) GoodsDetail(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*ShowResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.GoodsDetail", in)
	out := new(ShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) GoodsList(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*ShowResponse, error) {
	req := c.c.NewRequest(c.name, "ShowService.GoodsList", in)
	out := new(ShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShowService service

type ShowServiceHandler interface {
	// 显示商品详情
	GoodsDetail(context.Context, *ShowRequest, *ShowResponse) error
	// 显示商品列表
	GoodsList(context.Context, *ShowRequest, *ShowResponse) error
}

func RegisterShowServiceHandler(s server.Server, hdlr ShowServiceHandler, opts ...server.HandlerOption) error {
	type showService interface {
		GoodsDetail(ctx context.Context, in *ShowRequest, out *ShowResponse) error
		GoodsList(ctx context.Context, in *ShowRequest, out *ShowResponse) error
	}
	type ShowService struct {
		showService
	}
	h := &showServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShowService{h}, opts...))
}

type showServiceHandler struct {
	ShowServiceHandler
}

func (h *showServiceHandler) GoodsDetail(ctx context.Context, in *ShowRequest, out *ShowResponse) error {
	return h.ShowServiceHandler.GoodsDetail(ctx, in, out)
}

func (h *showServiceHandler) GoodsList(ctx context.Context, in *ShowRequest, out *ShowResponse) error {
	return h.ShowServiceHandler.GoodsList(ctx, in, out)
}
