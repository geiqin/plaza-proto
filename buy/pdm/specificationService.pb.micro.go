// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: specificationService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SpecificationService service

func NewSpecificationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SpecificationService service

type SpecificationService interface {
	// 多规格新增
	Create(ctx context.Context, in *Specification, opts ...client.CallOption) (*SpecificationResponse, error)
	// 多规格修改
	Update(ctx context.Context, in *Specification, opts ...client.CallOption) (*SpecificationResponse, error)
	// 多规格删除
	Delete(ctx context.Context, in *Specification, opts ...client.CallOption) (*SpecificationResponse, error)
	// 多规格获取
	Get(ctx context.Context, in *Specification, opts ...client.CallOption) (*SpecificationResponse, error)
	// 多规格查询
	Search(ctx context.Context, in *SpecificationRequest, opts ...client.CallOption) (*SpecificationResponse, error)
	// 多规格列表
	List(ctx context.Context, in *SpecificationRequest, opts ...client.CallOption) (*SpecificationResponse, error)
	// 多规格值新增
	AddValue(ctx context.Context, in *SpecificationValueRequest, opts ...client.CallOption) (*SpecificationResponse, error)
}

type specificationService struct {
	c    client.Client
	name string
}

func NewSpecificationService(name string, c client.Client) SpecificationService {
	return &specificationService{
		c:    c,
		name: name,
	}
}

func (c *specificationService) Create(ctx context.Context, in *Specification, opts ...client.CallOption) (*SpecificationResponse, error) {
	req := c.c.NewRequest(c.name, "SpecificationService.Create", in)
	out := new(SpecificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificationService) Update(ctx context.Context, in *Specification, opts ...client.CallOption) (*SpecificationResponse, error) {
	req := c.c.NewRequest(c.name, "SpecificationService.Update", in)
	out := new(SpecificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificationService) Delete(ctx context.Context, in *Specification, opts ...client.CallOption) (*SpecificationResponse, error) {
	req := c.c.NewRequest(c.name, "SpecificationService.Delete", in)
	out := new(SpecificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificationService) Get(ctx context.Context, in *Specification, opts ...client.CallOption) (*SpecificationResponse, error) {
	req := c.c.NewRequest(c.name, "SpecificationService.Get", in)
	out := new(SpecificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificationService) Search(ctx context.Context, in *SpecificationRequest, opts ...client.CallOption) (*SpecificationResponse, error) {
	req := c.c.NewRequest(c.name, "SpecificationService.Search", in)
	out := new(SpecificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificationService) List(ctx context.Context, in *SpecificationRequest, opts ...client.CallOption) (*SpecificationResponse, error) {
	req := c.c.NewRequest(c.name, "SpecificationService.List", in)
	out := new(SpecificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specificationService) AddValue(ctx context.Context, in *SpecificationValueRequest, opts ...client.CallOption) (*SpecificationResponse, error) {
	req := c.c.NewRequest(c.name, "SpecificationService.AddValue", in)
	out := new(SpecificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SpecificationService service

type SpecificationServiceHandler interface {
	// 多规格新增
	Create(context.Context, *Specification, *SpecificationResponse) error
	// 多规格修改
	Update(context.Context, *Specification, *SpecificationResponse) error
	// 多规格删除
	Delete(context.Context, *Specification, *SpecificationResponse) error
	// 多规格获取
	Get(context.Context, *Specification, *SpecificationResponse) error
	// 多规格查询
	Search(context.Context, *SpecificationRequest, *SpecificationResponse) error
	// 多规格列表
	List(context.Context, *SpecificationRequest, *SpecificationResponse) error
	// 多规格值新增
	AddValue(context.Context, *SpecificationValueRequest, *SpecificationResponse) error
}

func RegisterSpecificationServiceHandler(s server.Server, hdlr SpecificationServiceHandler, opts ...server.HandlerOption) error {
	type specificationService interface {
		Create(ctx context.Context, in *Specification, out *SpecificationResponse) error
		Update(ctx context.Context, in *Specification, out *SpecificationResponse) error
		Delete(ctx context.Context, in *Specification, out *SpecificationResponse) error
		Get(ctx context.Context, in *Specification, out *SpecificationResponse) error
		Search(ctx context.Context, in *SpecificationRequest, out *SpecificationResponse) error
		List(ctx context.Context, in *SpecificationRequest, out *SpecificationResponse) error
		AddValue(ctx context.Context, in *SpecificationValueRequest, out *SpecificationResponse) error
	}
	type SpecificationService struct {
		specificationService
	}
	h := &specificationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SpecificationService{h}, opts...))
}

type specificationServiceHandler struct {
	SpecificationServiceHandler
}

func (h *specificationServiceHandler) Create(ctx context.Context, in *Specification, out *SpecificationResponse) error {
	return h.SpecificationServiceHandler.Create(ctx, in, out)
}

func (h *specificationServiceHandler) Update(ctx context.Context, in *Specification, out *SpecificationResponse) error {
	return h.SpecificationServiceHandler.Update(ctx, in, out)
}

func (h *specificationServiceHandler) Delete(ctx context.Context, in *Specification, out *SpecificationResponse) error {
	return h.SpecificationServiceHandler.Delete(ctx, in, out)
}

func (h *specificationServiceHandler) Get(ctx context.Context, in *Specification, out *SpecificationResponse) error {
	return h.SpecificationServiceHandler.Get(ctx, in, out)
}

func (h *specificationServiceHandler) Search(ctx context.Context, in *SpecificationRequest, out *SpecificationResponse) error {
	return h.SpecificationServiceHandler.Search(ctx, in, out)
}

func (h *specificationServiceHandler) List(ctx context.Context, in *SpecificationRequest, out *SpecificationResponse) error {
	return h.SpecificationServiceHandler.List(ctx, in, out)
}

func (h *specificationServiceHandler) AddValue(ctx context.Context, in *SpecificationValueRequest, out *SpecificationResponse) error {
	return h.SpecificationServiceHandler.AddValue(ctx, in, out)
}
