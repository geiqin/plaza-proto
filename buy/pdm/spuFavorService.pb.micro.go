// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: spuFavorService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SpuFavorService service

func NewSpuFavorServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SpuFavorService service

type SpuFavorService interface {
	Collect(ctx context.Context, in *SpuFavor, opts ...client.CallOption) (*SpuFavorCollectResponse, error)
	Count(ctx context.Context, in *SpuFavorRequest, opts ...client.CallOption) (*SpuFavorResponse, error)
	Search(ctx context.Context, in *SpuFavorRequest, opts ...client.CallOption) (*SpuFavorResponse, error)
}

type spuFavorService struct {
	c    client.Client
	name string
}

func NewSpuFavorService(name string, c client.Client) SpuFavorService {
	return &spuFavorService{
		c:    c,
		name: name,
	}
}

func (c *spuFavorService) Collect(ctx context.Context, in *SpuFavor, opts ...client.CallOption) (*SpuFavorCollectResponse, error) {
	req := c.c.NewRequest(c.name, "SpuFavorService.Collect", in)
	out := new(SpuFavorCollectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spuFavorService) Count(ctx context.Context, in *SpuFavorRequest, opts ...client.CallOption) (*SpuFavorResponse, error) {
	req := c.c.NewRequest(c.name, "SpuFavorService.Count", in)
	out := new(SpuFavorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spuFavorService) Search(ctx context.Context, in *SpuFavorRequest, opts ...client.CallOption) (*SpuFavorResponse, error) {
	req := c.c.NewRequest(c.name, "SpuFavorService.Search", in)
	out := new(SpuFavorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SpuFavorService service

type SpuFavorServiceHandler interface {
	Collect(context.Context, *SpuFavor, *SpuFavorCollectResponse) error
	Count(context.Context, *SpuFavorRequest, *SpuFavorResponse) error
	Search(context.Context, *SpuFavorRequest, *SpuFavorResponse) error
}

func RegisterSpuFavorServiceHandler(s server.Server, hdlr SpuFavorServiceHandler, opts ...server.HandlerOption) error {
	type spuFavorService interface {
		Collect(ctx context.Context, in *SpuFavor, out *SpuFavorCollectResponse) error
		Count(ctx context.Context, in *SpuFavorRequest, out *SpuFavorResponse) error
		Search(ctx context.Context, in *SpuFavorRequest, out *SpuFavorResponse) error
	}
	type SpuFavorService struct {
		spuFavorService
	}
	h := &spuFavorServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SpuFavorService{h}, opts...))
}

type spuFavorServiceHandler struct {
	SpuFavorServiceHandler
}

func (h *spuFavorServiceHandler) Collect(ctx context.Context, in *SpuFavor, out *SpuFavorCollectResponse) error {
	return h.SpuFavorServiceHandler.Collect(ctx, in, out)
}

func (h *spuFavorServiceHandler) Count(ctx context.Context, in *SpuFavorRequest, out *SpuFavorResponse) error {
	return h.SpuFavorServiceHandler.Count(ctx, in, out)
}

func (h *spuFavorServiceHandler) Search(ctx context.Context, in *SpuFavorRequest, out *SpuFavorResponse) error {
	return h.SpuFavorServiceHandler.Search(ctx, in, out)
}
