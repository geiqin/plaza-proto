// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pageService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PageService service

func NewPageServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PageService service

type PageService interface {
	//商品详情页
	Detail(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageDetailResponse, error)
	//商品搜索页
	Search(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageSearchResponse, error)
	//分类导航页
	Category(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageCategoryResponse, error)
	//规格详情数据
	SpecDetail(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageSpecDetailResponse, error)
	//规格类型数据
	SpecType(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageSpecTypeResponse, error)
}

type pageService struct {
	c    client.Client
	name string
}

func NewPageService(name string, c client.Client) PageService {
	return &pageService{
		c:    c,
		name: name,
	}
}

func (c *pageService) Detail(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageDetailResponse, error) {
	req := c.c.NewRequest(c.name, "PageService.Detail", in)
	out := new(PageDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) Search(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageSearchResponse, error) {
	req := c.c.NewRequest(c.name, "PageService.Search", in)
	out := new(PageSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) Category(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "PageService.Category", in)
	out := new(PageCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) SpecDetail(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageSpecDetailResponse, error) {
	req := c.c.NewRequest(c.name, "PageService.SpecDetail", in)
	out := new(PageSpecDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageService) SpecType(ctx context.Context, in *PageRequest, opts ...client.CallOption) (*PageSpecTypeResponse, error) {
	req := c.c.NewRequest(c.name, "PageService.SpecType", in)
	out := new(PageSpecTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PageService service

type PageServiceHandler interface {
	//商品详情页
	Detail(context.Context, *PageRequest, *PageDetailResponse) error
	//商品搜索页
	Search(context.Context, *PageRequest, *PageSearchResponse) error
	//分类导航页
	Category(context.Context, *PageRequest, *PageCategoryResponse) error
	//规格详情数据
	SpecDetail(context.Context, *PageRequest, *PageSpecDetailResponse) error
	//规格类型数据
	SpecType(context.Context, *PageRequest, *PageSpecTypeResponse) error
}

func RegisterPageServiceHandler(s server.Server, hdlr PageServiceHandler, opts ...server.HandlerOption) error {
	type pageService interface {
		Detail(ctx context.Context, in *PageRequest, out *PageDetailResponse) error
		Search(ctx context.Context, in *PageRequest, out *PageSearchResponse) error
		Category(ctx context.Context, in *PageRequest, out *PageCategoryResponse) error
		SpecDetail(ctx context.Context, in *PageRequest, out *PageSpecDetailResponse) error
		SpecType(ctx context.Context, in *PageRequest, out *PageSpecTypeResponse) error
	}
	type PageService struct {
		pageService
	}
	h := &pageServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PageService{h}, opts...))
}

type pageServiceHandler struct {
	PageServiceHandler
}

func (h *pageServiceHandler) Detail(ctx context.Context, in *PageRequest, out *PageDetailResponse) error {
	return h.PageServiceHandler.Detail(ctx, in, out)
}

func (h *pageServiceHandler) Search(ctx context.Context, in *PageRequest, out *PageSearchResponse) error {
	return h.PageServiceHandler.Search(ctx, in, out)
}

func (h *pageServiceHandler) Category(ctx context.Context, in *PageRequest, out *PageCategoryResponse) error {
	return h.PageServiceHandler.Category(ctx, in, out)
}

func (h *pageServiceHandler) SpecDetail(ctx context.Context, in *PageRequest, out *PageSpecDetailResponse) error {
	return h.PageServiceHandler.SpecDetail(ctx, in, out)
}

func (h *pageServiceHandler) SpecType(ctx context.Context, in *PageRequest, out *PageSpecTypeResponse) error {
	return h.PageServiceHandler.SpecType(ctx, in, out)
}
