// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: showGoodsService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShowRealPriceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsVip        bool  `protobuf:"varint,1,opt,name=is_vip,json=isVip,proto3" json:"is_vip"`
	LevelPrice   int64 `protobuf:"varint,2,opt,name=level_price,json=levelPrice,proto3" json:"level_price"`
	MemberPrice  int64 `protobuf:"varint,3,opt,name=member_price,json=memberPrice,proto3" json:"member_price"`
	Price        int64 `protobuf:"varint,4,opt,name=price,proto3" json:"price"`
	ProductIsVip bool  `protobuf:"varint,5,opt,name=product_is_vip,json=productIsVip,proto3" json:"product_is_vip"`
	RealPrice    int64 `protobuf:"varint,6,opt,name=real_price,json=realPrice,proto3" json:"real_price"`
	UserIsMember bool  `protobuf:"varint,7,opt,name=user_is_member,json=userIsMember,proto3" json:"user_is_member"`
}

func (x *ShowRealPriceData) Reset() {
	*x = ShowRealPriceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowRealPriceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowRealPriceData) ProtoMessage() {}

func (x *ShowRealPriceData) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowRealPriceData.ProtoReflect.Descriptor instead.
func (*ShowRealPriceData) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{0}
}

func (x *ShowRealPriceData) GetIsVip() bool {
	if x != nil {
		return x.IsVip
	}
	return false
}

func (x *ShowRealPriceData) GetLevelPrice() int64 {
	if x != nil {
		return x.LevelPrice
	}
	return 0
}

func (x *ShowRealPriceData) GetMemberPrice() int64 {
	if x != nil {
		return x.MemberPrice
	}
	return 0
}

func (x *ShowRealPriceData) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ShowRealPriceData) GetProductIsVip() bool {
	if x != nil {
		return x.ProductIsVip
	}
	return false
}

func (x *ShowRealPriceData) GetRealPrice() int64 {
	if x != nil {
		return x.RealPrice
	}
	return 0
}

func (x *ShowRealPriceData) GetUserIsMember() bool {
	if x != nil {
		return x.UserIsMember
	}
	return false
}

type ShowQrcodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url"`
	Code []byte `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
}

func (x *ShowQrcodeData) Reset() {
	*x = ShowQrcodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowQrcodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowQrcodeData) ProtoMessage() {}

func (x *ShowQrcodeData) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowQrcodeData.ProtoReflect.Descriptor instead.
func (*ShowQrcodeData) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{1}
}

func (x *ShowQrcodeData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ShowQrcodeData) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type ShowPosterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url"`
	Code []byte `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`
}

func (x *ShowPosterData) Reset() {
	*x = ShowPosterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowPosterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPosterData) ProtoMessage() {}

func (x *ShowPosterData) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPosterData.ProtoReflect.Descriptor instead.
func (*ShowPosterData) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{2}
}

func (x *ShowPosterData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ShowPosterData) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

// 商品属性数据
type ShowGetAttrData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsInfo    *ShowGoodsSpu            `protobuf:"bytes,1,opt,name=goodsInfo,proto3" json:"goodsInfo"`
	ProductAttr  []*ShowGoodsAttr         `protobuf:"bytes,2,rep,name=productAttr,proto3" json:"productAttr"`
	ProductValue map[string]*ShowGoodsSku `protobuf:"bytes,3,rep,name=productValue,proto3" json:"productValue" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShowGetAttrData) Reset() {
	*x = ShowGetAttrData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowGetAttrData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowGetAttrData) ProtoMessage() {}

func (x *ShowGetAttrData) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowGetAttrData.ProtoReflect.Descriptor instead.
func (*ShowGetAttrData) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{3}
}

func (x *ShowGetAttrData) GetGoodsInfo() *ShowGoodsSpu {
	if x != nil {
		return x.GoodsInfo
	}
	return nil
}

func (x *ShowGetAttrData) GetProductAttr() []*ShowGoodsAttr {
	if x != nil {
		return x.ProductAttr
	}
	return nil
}

func (x *ShowGetAttrData) GetProductValue() map[string]*ShowGoodsSku {
	if x != nil {
		return x.ProductValue
	}
	return nil
}

// 显示商品数据
type ShowDetailData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                int64                    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	SvipOpen           bool                     `protobuf:"varint,2,opt,name=svip_open,json=svipOpen,proto3" json:"svip_open"`
	SvipPriceOpen      bool                     `protobuf:"varint,3,opt,name=svip_price_open,json=svipPriceOpen,proto3" json:"svip_price_open"`
	StoreSelfMention   bool                     `protobuf:"varint,4,opt,name=store_self_mention,json=storeSelfMention,proto3" json:"store_self_mention"`
	PriceName          string                   `protobuf:"bytes,5,opt,name=priceName,proto3" json:"priceName"`
	Reply              []byte                   `protobuf:"bytes,6,opt,name=reply,proto3" json:"reply"`
	ReplyChance        int64                    `protobuf:"varint,7,opt,name=replyChance,proto3" json:"replyChance"`
	ReplyCount         int64                    `protobuf:"varint,8,opt,name=replyCount,proto3" json:"replyCount"`
	MerId              int64                    `protobuf:"varint,9,opt,name=mer_id,json=merId,proto3" json:"mer_id"`
	GoodsInfo          *ShowGoodsSpu            `protobuf:"bytes,12,opt,name=goodsInfo,proto3" json:"goodsInfo"`
	ProductAttr        []*ShowGoodsAttr         `protobuf:"bytes,13,rep,name=productAttr,proto3" json:"productAttr"`
	ProductValue       map[string]*ShowGoodsSku `protobuf:"bytes,14,rep,name=productValue,proto3" json:"productValue" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GoodList           []*ShowGoodsInfo         `protobuf:"bytes,15,rep,name=good_list,json=goodList,proto3" json:"good_list"` //优品推荐
	RealstoreInfo      []byte                   `protobuf:"bytes,19,opt,name=realstoreInfo,proto3" json:"realstoreInfo"`       //门店信息
	Coupons            []byte                   `protobuf:"bytes,20,opt,name=coupons,proto3" json:"coupons"`
	Activity           []byte                   `protobuf:"bytes,21,opt,name=activity,proto3" json:"activity"`
	MapKey             string                   `protobuf:"bytes,22,opt,name=mapKey,proto3" json:"mapKey"`
	RoutineContactType string                   `protobuf:"bytes,23,opt,name=routine_contact_type,json=routineContactType,proto3" json:"routine_contact_type"`
	SpecUnique         string                   `protobuf:"bytes,24,opt,name=spec_unique,json=specUnique,proto3" json:"spec_unique"`
}

func (x *ShowDetailData) Reset() {
	*x = ShowDetailData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDetailData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDetailData) ProtoMessage() {}

func (x *ShowDetailData) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDetailData.ProtoReflect.Descriptor instead.
func (*ShowDetailData) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{4}
}

func (x *ShowDetailData) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ShowDetailData) GetSvipOpen() bool {
	if x != nil {
		return x.SvipOpen
	}
	return false
}

func (x *ShowDetailData) GetSvipPriceOpen() bool {
	if x != nil {
		return x.SvipPriceOpen
	}
	return false
}

func (x *ShowDetailData) GetStoreSelfMention() bool {
	if x != nil {
		return x.StoreSelfMention
	}
	return false
}

func (x *ShowDetailData) GetPriceName() string {
	if x != nil {
		return x.PriceName
	}
	return ""
}

func (x *ShowDetailData) GetReply() []byte {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *ShowDetailData) GetReplyChance() int64 {
	if x != nil {
		return x.ReplyChance
	}
	return 0
}

func (x *ShowDetailData) GetReplyCount() int64 {
	if x != nil {
		return x.ReplyCount
	}
	return 0
}

func (x *ShowDetailData) GetMerId() int64 {
	if x != nil {
		return x.MerId
	}
	return 0
}

func (x *ShowDetailData) GetGoodsInfo() *ShowGoodsSpu {
	if x != nil {
		return x.GoodsInfo
	}
	return nil
}

func (x *ShowDetailData) GetProductAttr() []*ShowGoodsAttr {
	if x != nil {
		return x.ProductAttr
	}
	return nil
}

func (x *ShowDetailData) GetProductValue() map[string]*ShowGoodsSku {
	if x != nil {
		return x.ProductValue
	}
	return nil
}

func (x *ShowDetailData) GetGoodList() []*ShowGoodsInfo {
	if x != nil {
		return x.GoodList
	}
	return nil
}

func (x *ShowDetailData) GetRealstoreInfo() []byte {
	if x != nil {
		return x.RealstoreInfo
	}
	return nil
}

func (x *ShowDetailData) GetCoupons() []byte {
	if x != nil {
		return x.Coupons
	}
	return nil
}

func (x *ShowDetailData) GetActivity() []byte {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *ShowDetailData) GetMapKey() string {
	if x != nil {
		return x.MapKey
	}
	return ""
}

func (x *ShowDetailData) GetRoutineContactType() string {
	if x != nil {
		return x.RoutineContactType
	}
	return ""
}

func (x *ShowDetailData) GetSpecUnique() string {
	if x != nil {
		return x.SpecUnique
	}
	return ""
}

// 显示商品信息（主要在列表）
type ShowGoodsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                              //ID
	Type               string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`                                                           //商品类型
	SpuName            string   `protobuf:"bytes,7,opt,name=spu_name,json=spuName,proto3" json:"spu_name"`                                      //商品名称
	SpuCode            string   `protobuf:"bytes,8,opt,name=spu_code,json=spuCode,proto3" json:"spu_code"`                                      //SPU编码
	Image              string   `protobuf:"bytes,9,opt,name=image,proto3" json:"image"`                                                         //商品主图
	UnitName           string   `protobuf:"bytes,10,opt,name=unit_name,json=unitName,proto3" json:"unit_name"`                                  //计量单位名称
	Price              int64    `protobuf:"varint,11,opt,name=price,proto3" json:"price"`                                                       //销售价
	OtPrice            int64    `protobuf:"varint,12,opt,name=ot_price,json=otPrice,proto3" json:"ot_price"`                                    //划线价
	IsVip              bool     `protobuf:"varint,13,opt,name=is_vip,json=isVip,proto3" json:"is_vip"`                                          //是否会员商品
	VipPrice           int64    `protobuf:"varint,14,opt,name=vip_price,json=vipPrice,proto3" json:"vip_price"`                                 //会员价
	SvipPriceOpen      bool     `protobuf:"varint,15,opt,name=svip_price_open,json=svipPriceOpen,proto3" json:"svip_price_open"`                //开启SVIP价格
	SvipEconomizePrice int64    `protobuf:"varint,16,opt,name=svip_economize_price,json=svipEconomizePrice,proto3" json:"svip_economize_price"` //SVIP节省金额
	Sales              int64    `protobuf:"varint,17,opt,name=sales,proto3" json:"sales"`                                                       //销量
	Stock              int64    `protobuf:"varint,18,opt,name=stock,proto3" json:"stock"`                                                       //库存量
	MinQty             int64    `protobuf:"varint,19,opt,name=min_qty,json=minQty,proto3" json:"min_qty"`
	IsManySpec         bool     `protobuf:"varint,20,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`    //多规格商品
	IsOpenWeigh        bool     `protobuf:"varint,21,opt,name=is_open_weigh,json=isOpenWeigh,proto3" json:"is_open_weigh"` //开启称重
	Presale            bool     `protobuf:"varint,22,opt,name=presale,proto3" json:"presale"`                              //是否预售
	IsVirtual          bool     `protobuf:"varint,23,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`
	CartButton         bool     `protobuf:"varint,24,opt,name=cart_button,json=cartButton,proto3" json:"cart_button"`
	AttrPics           []string `protobuf:"bytes,25,rep,name=attrPics,proto3" json:"attrPics"`
}

func (x *ShowGoodsInfo) Reset() {
	*x = ShowGoodsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowGoodsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowGoodsInfo) ProtoMessage() {}

func (x *ShowGoodsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowGoodsInfo.ProtoReflect.Descriptor instead.
func (*ShowGoodsInfo) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{5}
}

func (x *ShowGoodsInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShowGoodsInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ShowGoodsInfo) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *ShowGoodsInfo) GetSpuCode() string {
	if x != nil {
		return x.SpuCode
	}
	return ""
}

func (x *ShowGoodsInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ShowGoodsInfo) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *ShowGoodsInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ShowGoodsInfo) GetOtPrice() int64 {
	if x != nil {
		return x.OtPrice
	}
	return 0
}

func (x *ShowGoodsInfo) GetIsVip() bool {
	if x != nil {
		return x.IsVip
	}
	return false
}

func (x *ShowGoodsInfo) GetVipPrice() int64 {
	if x != nil {
		return x.VipPrice
	}
	return 0
}

func (x *ShowGoodsInfo) GetSvipPriceOpen() bool {
	if x != nil {
		return x.SvipPriceOpen
	}
	return false
}

func (x *ShowGoodsInfo) GetSvipEconomizePrice() int64 {
	if x != nil {
		return x.SvipEconomizePrice
	}
	return 0
}

func (x *ShowGoodsInfo) GetSales() int64 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *ShowGoodsInfo) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ShowGoodsInfo) GetMinQty() int64 {
	if x != nil {
		return x.MinQty
	}
	return 0
}

func (x *ShowGoodsInfo) GetIsManySpec() bool {
	if x != nil {
		return x.IsManySpec
	}
	return false
}

func (x *ShowGoodsInfo) GetIsOpenWeigh() bool {
	if x != nil {
		return x.IsOpenWeigh
	}
	return false
}

func (x *ShowGoodsInfo) GetPresale() bool {
	if x != nil {
		return x.Presale
	}
	return false
}

func (x *ShowGoodsInfo) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

func (x *ShowGoodsInfo) GetCartButton() bool {
	if x != nil {
		return x.CartButton
	}
	return false
}

func (x *ShowGoodsInfo) GetAttrPics() []string {
	if x != nil {
		return x.AttrPics
	}
	return nil
}

type ShowGoodsAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProductId  int64                 `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id"`
	AttrName   string                `protobuf:"bytes,3,opt,name=attr_name,json=attrName,proto3" json:"attr_name"`
	Type       string                `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	AttrValues []string              `protobuf:"bytes,5,rep,name=attr_values,json=attrValues,proto3" json:"attr_values"`
	AttrValue  []*ShowGoodsAttrValue `protobuf:"bytes,6,rep,name=attr_value,json=attrValue,proto3" json:"attr_value"`
}

func (x *ShowGoodsAttr) Reset() {
	*x = ShowGoodsAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowGoodsAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowGoodsAttr) ProtoMessage() {}

func (x *ShowGoodsAttr) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowGoodsAttr.ProtoReflect.Descriptor instead.
func (*ShowGoodsAttr) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{6}
}

func (x *ShowGoodsAttr) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShowGoodsAttr) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ShowGoodsAttr) GetAttrName() string {
	if x != nil {
		return x.AttrName
	}
	return ""
}

func (x *ShowGoodsAttr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ShowGoodsAttr) GetAttrValues() []string {
	if x != nil {
		return x.AttrValues
	}
	return nil
}

func (x *ShowGoodsAttr) GetAttrValue() []*ShowGoodsAttrValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

type ShowGoodsSpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                              //ID
	Type               string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`                                                           //商品类型
	ShopId             int64    `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                        //分店ID
	CategoryId         int64    `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                            //商品分类
	TaxonomyId         int64    `protobuf:"varint,5,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                            //商品类目
	BrandId            int32    `protobuf:"varint,6,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                     //品牌
	SpuName            string   `protobuf:"bytes,7,opt,name=spu_name,json=spuName,proto3" json:"spu_name"`                                      //商品名称
	SpuCode            string   `protobuf:"bytes,8,opt,name=spu_code,json=spuCode,proto3" json:"spu_code"`                                      //SPU编码
	SellMode           string   `protobuf:"bytes,9,opt,name=sell_mode,json=sellMode,proto3" json:"sell_mode"`                                   //销售模式
	Image              string   `protobuf:"bytes,10,opt,name=image,proto3" json:"image"`                                                        //商品主图
	Video              string   `protobuf:"bytes,11,opt,name=video,proto3" json:"video"`                                                        //主图视频
	ExplainVideo       string   `protobuf:"bytes,12,opt,name=explain_video,json=explainVideo,proto3" json:"explain_video"`                      //讲解视频
	SliderImage        []string `protobuf:"bytes,13,rep,name=slider_image,json=sliderImage,proto3" json:"slider_image"`                         //商品幻灯片
	IsManySpec         bool     `protobuf:"varint,14,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                         //多规格商品
	IsOpenWeigh        bool     `protobuf:"varint,15,opt,name=is_open_weigh,json=isOpenWeigh,proto3" json:"is_open_weigh"`                      //开启称重
	IsMoreBarcode      bool     `protobuf:"varint,16,opt,name=is_more_barcode,json=isMoreBarcode,proto3" json:"is_more_barcode"`                //一品多码
	UnitId             int32    `protobuf:"varint,17,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`                                       //计量单位ID
	UnitName           string   `protobuf:"bytes,18,opt,name=unit_name,json=unitName,proto3" json:"unit_name"`                                  //计量单位名称
	UnitType           string   `protobuf:"bytes,19,opt,name=unit_type,json=unitType,proto3" json:"unit_type"`                                  //计量单位类型
	IsShelve           bool     `protobuf:"varint,22,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`                                 //是否上架
	MinPrice           int64    `protobuf:"varint,27,opt,name=min_price,json=minPrice,proto3" json:"min_price"`                                 //最低价格
	MaxPrice           int64    `protobuf:"varint,28,opt,name=max_price,json=maxPrice,proto3" json:"max_price"`                                 //最高价格
	Price              int64    `protobuf:"varint,29,opt,name=price,proto3" json:"price"`                                                       //销售价
	OtPrice            int64    `protobuf:"varint,30,opt,name=ot_price,json=otPrice,proto3" json:"ot_price"`                                    //划线价
	Cost               int64    `protobuf:"varint,31,opt,name=cost,proto3" json:"cost"`                                                         //成本价
	Postage            int64    `protobuf:"varint,32,opt,name=postage,proto3" json:"postage"`                                                   //运费
	IsVip              bool     `protobuf:"varint,33,opt,name=is_vip,json=isVip,proto3" json:"is_vip"`                                          //是否会员商品
	VipPrice           float32  `protobuf:"fixed32,34,opt,name=vip_price,json=vipPrice,proto3" json:"vip_price"`                                //会员价
	SvipPriceOpen      bool     `protobuf:"varint,35,opt,name=svip_price_open,json=svipPriceOpen,proto3" json:"svip_price_open"`                //开启SVIP价格
	SvipEconomizePrice int64    `protobuf:"varint,36,opt,name=svip_economize_price,json=svipEconomizePrice,proto3" json:"svip_economize_price"` //SVIP节省金额
	Sales              int64    `protobuf:"varint,39,opt,name=sales,proto3" json:"sales"`                                                       //销量
	Stock              int64    `protobuf:"varint,40,opt,name=stock,proto3" json:"stock"`                                                       //库存量
	Browse             int64    `protobuf:"varint,41,opt,name=browse,proto3" json:"browse"`                                                     //浏览量
	Presale            bool     `protobuf:"varint,42,opt,name=presale,proto3" json:"presale"`                                                   //是否预售
	PresaleStartTime   string   `protobuf:"bytes,43,opt,name=presale_start_time,json=presaleStartTime,proto3" json:"presale_start_time"`        //预售开始时间
	PresaleEndTime     string   `protobuf:"bytes,44,opt,name=presale_end_time,json=presaleEndTime,proto3" json:"presale_end_time"`              //预售结束时间
	PresaleDay         int32    `protobuf:"varint,45,opt,name=presale_day,json=presaleDay,proto3" json:"presale_day"`                           //预售天数
	PresalePayStatus   bool     `protobuf:"varint,46,opt,name=presale_pay_status,json=presalePayStatus,proto3" json:"presale_pay_status"`       //预售支付状态
	IsLimit            bool     `protobuf:"varint,50,opt,name=is_limit,json=isLimit,proto3" json:"is_limit"`
	LimitType          string   `protobuf:"bytes,51,opt,name=limit_type,json=limitType,proto3" json:"limit_type"`
	LimitNum           int64    `protobuf:"varint,52,opt,name=limit_num,json=limitNum,proto3" json:"limit_num"`
	MinQty             int64    `protobuf:"varint,53,opt,name=min_qty,json=minQty,proto3" json:"min_qty"`
	IsVirtual          bool     `protobuf:"varint,60,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`
	VirtualType        string   `protobuf:"bytes,61,opt,name=virtual_type,json=virtualType,proto3" json:"virtual_type"`
	UserCollect        bool     `protobuf:"varint,66,opt,name=user_collect,json=userCollect,proto3" json:"user_collect"` //是否收藏
	UserLike           bool     `protobuf:"varint,67,opt,name=user_like,json=userLike,proto3" json:"user_like"`          //是否喜欢
	CartButton         bool     `protobuf:"varint,68,opt,name=cart_button,json=cartButton,proto3" json:"cart_button"`
	WechatCode         string   `protobuf:"bytes,70,opt,name=wechat_code,json=wechatCode,proto3" json:"wechat_code"`
	GiveIntegral       int64    `protobuf:"varint,71,opt,name=give_integral,json=giveIntegral,proto3" json:"give_integral"` //赠送积分
	Description        string   `protobuf:"bytes,72,opt,name=description,proto3" json:"description"`                        //商品内容
	SellingDesc        string   `protobuf:"bytes,73,opt,name=selling_desc,json=sellingDesc,proto3" json:"selling_desc"`     //卖点描述
	ShareDesc          string   `protobuf:"bytes,74,opt,name=share_desc,json=shareDesc,proto3" json:"share_desc"`           //分享描述
	SeoTitle           string   `protobuf:"bytes,75,opt,name=seo_title,json=seoTitle,proto3" json:"seo_title"`              //SEO标题
	SeoKeywords        string   `protobuf:"bytes,76,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords"`     //SEO关键字
	SeoDesc            string   `protobuf:"bytes,77,opt,name=seo_desc,json=seoDesc,proto3" json:"seo_desc"`                 //SEO描述
	Status             string   `protobuf:"bytes,78,opt,name=status,proto3" json:"status"`                                  //商品状态
	DefaultSku         string   `protobuf:"bytes,79,opt,name=default_sku,json=defaultSku,proto3" json:"default_sku"`        //默认选中SKU
}

func (x *ShowGoodsSpu) Reset() {
	*x = ShowGoodsSpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowGoodsSpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowGoodsSpu) ProtoMessage() {}

func (x *ShowGoodsSpu) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowGoodsSpu.ProtoReflect.Descriptor instead.
func (*ShowGoodsSpu) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{7}
}

func (x *ShowGoodsSpu) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShowGoodsSpu) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ShowGoodsSpu) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ShowGoodsSpu) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ShowGoodsSpu) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *ShowGoodsSpu) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *ShowGoodsSpu) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *ShowGoodsSpu) GetSpuCode() string {
	if x != nil {
		return x.SpuCode
	}
	return ""
}

func (x *ShowGoodsSpu) GetSellMode() string {
	if x != nil {
		return x.SellMode
	}
	return ""
}

func (x *ShowGoodsSpu) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ShowGoodsSpu) GetVideo() string {
	if x != nil {
		return x.Video
	}
	return ""
}

func (x *ShowGoodsSpu) GetExplainVideo() string {
	if x != nil {
		return x.ExplainVideo
	}
	return ""
}

func (x *ShowGoodsSpu) GetSliderImage() []string {
	if x != nil {
		return x.SliderImage
	}
	return nil
}

func (x *ShowGoodsSpu) GetIsManySpec() bool {
	if x != nil {
		return x.IsManySpec
	}
	return false
}

func (x *ShowGoodsSpu) GetIsOpenWeigh() bool {
	if x != nil {
		return x.IsOpenWeigh
	}
	return false
}

func (x *ShowGoodsSpu) GetIsMoreBarcode() bool {
	if x != nil {
		return x.IsMoreBarcode
	}
	return false
}

func (x *ShowGoodsSpu) GetUnitId() int32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *ShowGoodsSpu) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *ShowGoodsSpu) GetUnitType() string {
	if x != nil {
		return x.UnitType
	}
	return ""
}

func (x *ShowGoodsSpu) GetIsShelve() bool {
	if x != nil {
		return x.IsShelve
	}
	return false
}

func (x *ShowGoodsSpu) GetMinPrice() int64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *ShowGoodsSpu) GetMaxPrice() int64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *ShowGoodsSpu) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ShowGoodsSpu) GetOtPrice() int64 {
	if x != nil {
		return x.OtPrice
	}
	return 0
}

func (x *ShowGoodsSpu) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *ShowGoodsSpu) GetPostage() int64 {
	if x != nil {
		return x.Postage
	}
	return 0
}

func (x *ShowGoodsSpu) GetIsVip() bool {
	if x != nil {
		return x.IsVip
	}
	return false
}

func (x *ShowGoodsSpu) GetVipPrice() float32 {
	if x != nil {
		return x.VipPrice
	}
	return 0
}

func (x *ShowGoodsSpu) GetSvipPriceOpen() bool {
	if x != nil {
		return x.SvipPriceOpen
	}
	return false
}

func (x *ShowGoodsSpu) GetSvipEconomizePrice() int64 {
	if x != nil {
		return x.SvipEconomizePrice
	}
	return 0
}

func (x *ShowGoodsSpu) GetSales() int64 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *ShowGoodsSpu) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ShowGoodsSpu) GetBrowse() int64 {
	if x != nil {
		return x.Browse
	}
	return 0
}

func (x *ShowGoodsSpu) GetPresale() bool {
	if x != nil {
		return x.Presale
	}
	return false
}

func (x *ShowGoodsSpu) GetPresaleStartTime() string {
	if x != nil {
		return x.PresaleStartTime
	}
	return ""
}

func (x *ShowGoodsSpu) GetPresaleEndTime() string {
	if x != nil {
		return x.PresaleEndTime
	}
	return ""
}

func (x *ShowGoodsSpu) GetPresaleDay() int32 {
	if x != nil {
		return x.PresaleDay
	}
	return 0
}

func (x *ShowGoodsSpu) GetPresalePayStatus() bool {
	if x != nil {
		return x.PresalePayStatus
	}
	return false
}

func (x *ShowGoodsSpu) GetIsLimit() bool {
	if x != nil {
		return x.IsLimit
	}
	return false
}

func (x *ShowGoodsSpu) GetLimitType() string {
	if x != nil {
		return x.LimitType
	}
	return ""
}

func (x *ShowGoodsSpu) GetLimitNum() int64 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *ShowGoodsSpu) GetMinQty() int64 {
	if x != nil {
		return x.MinQty
	}
	return 0
}

func (x *ShowGoodsSpu) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

func (x *ShowGoodsSpu) GetVirtualType() string {
	if x != nil {
		return x.VirtualType
	}
	return ""
}

func (x *ShowGoodsSpu) GetUserCollect() bool {
	if x != nil {
		return x.UserCollect
	}
	return false
}

func (x *ShowGoodsSpu) GetUserLike() bool {
	if x != nil {
		return x.UserLike
	}
	return false
}

func (x *ShowGoodsSpu) GetCartButton() bool {
	if x != nil {
		return x.CartButton
	}
	return false
}

func (x *ShowGoodsSpu) GetWechatCode() string {
	if x != nil {
		return x.WechatCode
	}
	return ""
}

func (x *ShowGoodsSpu) GetGiveIntegral() int64 {
	if x != nil {
		return x.GiveIntegral
	}
	return 0
}

func (x *ShowGoodsSpu) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ShowGoodsSpu) GetSellingDesc() string {
	if x != nil {
		return x.SellingDesc
	}
	return ""
}

func (x *ShowGoodsSpu) GetShareDesc() string {
	if x != nil {
		return x.ShareDesc
	}
	return ""
}

func (x *ShowGoodsSpu) GetSeoTitle() string {
	if x != nil {
		return x.SeoTitle
	}
	return ""
}

func (x *ShowGoodsSpu) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *ShowGoodsSpu) GetSeoDesc() string {
	if x != nil {
		return x.SeoDesc
	}
	return ""
}

func (x *ShowGoodsSpu) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ShowGoodsSpu) GetDefaultSku() string {
	if x != nil {
		return x.DefaultSku
	}
	return ""
}

type ShowGoodsSku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	ProductId    int64   `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id"`
	Suk          string  `protobuf:"bytes,3,opt,name=suk,proto3" json:"suk"` //"黑色,46mm",
	Stock        int64   `protobuf:"varint,4,opt,name=stock,proto3" json:"stock"`
	Sales        int64   `protobuf:"varint,5,opt,name=sales,proto3" json:"sales"`                                    //销量
	Price        int64   `protobuf:"varint,6,opt,name=price,proto3" json:"price"`                                    //销售价(元)
	Image        string  `protobuf:"bytes,7,opt,name=image,proto3" json:"image"`                                     //图片
	Unique       string  `protobuf:"bytes,8,opt,name=unique,proto3" json:"unique"`                                   //唯一标识
	Cost         int64   `protobuf:"varint,9,opt,name=cost,proto3" json:"cost"`                                      //成本价
	BarCode      string  `protobuf:"bytes,10,opt,name=bar_code,json=barCode,proto3" json:"bar_code"`                 //商品条码
	OtPrice      int64   `protobuf:"varint,11,opt,name=ot_price,json=otPrice,proto3" json:"ot_price"`                //原始价(元)
	VipPrice     int64   `protobuf:"varint,12,opt,name=vip_price,json=vipPrice,proto3" json:"vip_price"`             //会员价(元)
	Weight       float32 `protobuf:"fixed32,13,opt,name=weight,proto3" json:"weight"`                                //重量千克
	Volume       float32 `protobuf:"fixed32,15,opt,name=volume,proto3" json:"volume"`                                //体积
	Brokerage    int64   `protobuf:"varint,16,opt,name=brokerage,proto3" json:"brokerage"`                           //推广佣金
	BrokerageTwo int64   `protobuf:"varint,17,opt,name=brokerage_two,json=brokerageTwo,proto3" json:"brokerage_two"` //二级推广佣金
	Type         string  `protobuf:"bytes,18,opt,name=type,proto3" json:"type"`
	Quota        int64   `protobuf:"varint,19,opt,name=quota,proto3" json:"quota"`                          ///配额数量
	QuotaShow    bool    `protobuf:"varint,20,opt,name=quota_show,json=quotaShow,proto3" json:"quota_show"` //是否显示配额
	IsVirtual    bool    `protobuf:"varint,21,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"` //是否虚拟商品
	CouponId     int64   `protobuf:"varint,22,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id"`    //优惠劵ID
	DiskInfo     string  `protobuf:"bytes,23,opt,name=disk_info,json=diskInfo,proto3" json:"disk_info"`
	ProductStock int64   `protobuf:"varint,24,opt,name=product_stock,json=productStock,proto3" json:"product_stock"` //库存量
}

func (x *ShowGoodsSku) Reset() {
	*x = ShowGoodsSku{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowGoodsSku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowGoodsSku) ProtoMessage() {}

func (x *ShowGoodsSku) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowGoodsSku.ProtoReflect.Descriptor instead.
func (*ShowGoodsSku) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{8}
}

func (x *ShowGoodsSku) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShowGoodsSku) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ShowGoodsSku) GetSuk() string {
	if x != nil {
		return x.Suk
	}
	return ""
}

func (x *ShowGoodsSku) GetStock() int64 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ShowGoodsSku) GetSales() int64 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *ShowGoodsSku) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ShowGoodsSku) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ShowGoodsSku) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *ShowGoodsSku) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *ShowGoodsSku) GetBarCode() string {
	if x != nil {
		return x.BarCode
	}
	return ""
}

func (x *ShowGoodsSku) GetOtPrice() int64 {
	if x != nil {
		return x.OtPrice
	}
	return 0
}

func (x *ShowGoodsSku) GetVipPrice() int64 {
	if x != nil {
		return x.VipPrice
	}
	return 0
}

func (x *ShowGoodsSku) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ShowGoodsSku) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ShowGoodsSku) GetBrokerage() int64 {
	if x != nil {
		return x.Brokerage
	}
	return 0
}

func (x *ShowGoodsSku) GetBrokerageTwo() int64 {
	if x != nil {
		return x.BrokerageTwo
	}
	return 0
}

func (x *ShowGoodsSku) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ShowGoodsSku) GetQuota() int64 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *ShowGoodsSku) GetQuotaShow() bool {
	if x != nil {
		return x.QuotaShow
	}
	return false
}

func (x *ShowGoodsSku) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

func (x *ShowGoodsSku) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *ShowGoodsSku) GetDiskInfo() string {
	if x != nil {
		return x.DiskInfo
	}
	return ""
}

func (x *ShowGoodsSku) GetProductStock() int64 {
	if x != nil {
		return x.ProductStock
	}
	return 0
}

// 商品库请求参数
type ShowGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top       int32    `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64    `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sorts     []string `protobuf:"bytes,5,rep,name=sorts,proto3" json:"sorts"`
	DateRange []string `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int64  `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	//以下为自定义参数
	SpuId          int64  `protobuf:"varint,9,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`
	Unique         string `protobuf:"bytes,10,opt,name=unique,proto3" json:"unique"`
	Type           string `protobuf:"bytes,11,opt,name=type,proto3" json:"type"`                                             //商品类型
	ShopId         int64  `protobuf:"varint,12,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                          //分店ID
	CategoryId     int64  `protobuf:"varint,13,opt,name=category_id,json=categoryId,proto3" json:"category_id"`              //商品分类
	TaxonomyId     int64  `protobuf:"varint,14,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`              //商品类目
	BrandId        int32  `protobuf:"varint,15,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                       //品牌
	Name           string `protobuf:"bytes,16,opt,name=name,proto3" json:"name"`                                             //商品名称
	IsVirtual      string `protobuf:"bytes,17,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`                  //虚拟商品
	IsManySpec     string `protobuf:"bytes,18,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`             //多规格商品
	IsOpenWeigh    string `protobuf:"bytes,19,opt,name=is_open_weigh,json=isOpenWeigh,proto3" json:"is_open_weigh"`          //开启称重
	Code           string `protobuf:"bytes,20,opt,name=code,proto3" json:"code"`                                             //SPU编码
	IsMultiBarcode string `protobuf:"bytes,21,opt,name=is_multi_barcode,json=isMultiBarcode,proto3" json:"is_multi_barcode"` //一品多码
	UnitId         int32  `protobuf:"varint,22,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`                          //计量单位ID
	UnitType       string `protobuf:"bytes,23,opt,name=unit_type,json=unitType,proto3" json:"unit_type"`                     //计量单位类型
	Inventory      int64  `protobuf:"varint,24,opt,name=inventory,proto3" json:"inventory"`                                  //库存
	IsShelve       string `protobuf:"bytes,25,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`                     //是否上架
	SellMode       string `protobuf:"bytes,26,opt,name=sell_mode,json=sellMode,proto3" json:"sell_mode"`                     //销售模式
	Command        string `protobuf:"bytes,27,opt,name=command,proto3" json:"command"`
}

func (x *ShowGoodsRequest) Reset() {
	*x = ShowGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowGoodsRequest) ProtoMessage() {}

func (x *ShowGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowGoodsRequest.ProtoReflect.Descriptor instead.
func (*ShowGoodsRequest) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{9}
}

func (x *ShowGoodsRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *ShowGoodsRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *ShowGoodsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ShowGoodsRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ShowGoodsRequest) GetSorts() []string {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *ShowGoodsRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *ShowGoodsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ShowGoodsRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShowGoodsRequest) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *ShowGoodsRequest) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *ShowGoodsRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ShowGoodsRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ShowGoodsRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ShowGoodsRequest) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *ShowGoodsRequest) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *ShowGoodsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShowGoodsRequest) GetIsVirtual() string {
	if x != nil {
		return x.IsVirtual
	}
	return ""
}

func (x *ShowGoodsRequest) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *ShowGoodsRequest) GetIsOpenWeigh() string {
	if x != nil {
		return x.IsOpenWeigh
	}
	return ""
}

func (x *ShowGoodsRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ShowGoodsRequest) GetIsMultiBarcode() string {
	if x != nil {
		return x.IsMultiBarcode
	}
	return ""
}

func (x *ShowGoodsRequest) GetUnitId() int32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *ShowGoodsRequest) GetUnitType() string {
	if x != nil {
		return x.UnitType
	}
	return ""
}

func (x *ShowGoodsRequest) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *ShowGoodsRequest) GetIsShelve() string {
	if x != nil {
		return x.IsShelve
	}
	return ""
}

func (x *ShowGoodsRequest) GetSellMode() string {
	if x != nil {
		return x.SellMode
	}
	return ""
}

func (x *ShowGoodsRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

// 商品库响应数据
type ShowListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pager *common.Pager    `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	List  []*ShowGoodsInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list"`
}

func (x *ShowListData) Reset() {
	*x = ShowListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowListData) ProtoMessage() {}

func (x *ShowListData) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowListData.ProtoReflect.Descriptor instead.
func (*ShowListData) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{10}
}

func (x *ShowListData) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *ShowListData) GetList() []*ShowGoodsInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 商品库响应数据
type ShowGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg       string             `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg"`
	List      *ShowListData      `protobuf:"bytes,3,opt,name=list,proto3" json:"list"`
	Detail    *ShowDetailData    `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail"`
	RealPrice *ShowRealPriceData `protobuf:"bytes,5,opt,name=realPrice,proto3" json:"realPrice"`
	Qrcode    *ShowQrcodeData    `protobuf:"bytes,6,opt,name=qrcode,proto3" json:"qrcode"`
	Poster    *ShowPosterData    `protobuf:"bytes,7,opt,name=poster,proto3" json:"poster"`
	GetAttr   *ShowGetAttrData   `protobuf:"bytes,8,opt,name=getAttr,proto3" json:"getAttr"`
}

func (x *ShowGoodsResponse) Reset() {
	*x = ShowGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowGoodsResponse) ProtoMessage() {}

func (x *ShowGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowGoodsResponse.ProtoReflect.Descriptor instead.
func (*ShowGoodsResponse) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{11}
}

func (x *ShowGoodsResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ShowGoodsResponse) GetList() *ShowListData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ShowGoodsResponse) GetDetail() *ShowDetailData {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *ShowGoodsResponse) GetRealPrice() *ShowRealPriceData {
	if x != nil {
		return x.RealPrice
	}
	return nil
}

func (x *ShowGoodsResponse) GetQrcode() *ShowQrcodeData {
	if x != nil {
		return x.Qrcode
	}
	return nil
}

func (x *ShowGoodsResponse) GetPoster() *ShowPosterData {
	if x != nil {
		return x.Poster
	}
	return nil
}

func (x *ShowGoodsResponse) GetGetAttr() *ShowGetAttrData {
	if x != nil {
		return x.GetAttr
	}
	return nil
}

type ShowGoodsAttrValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr  string `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr"`
	Check bool   `protobuf:"varint,2,opt,name=check,proto3" json:"check"`
}

func (x *ShowGoodsAttrValue) Reset() {
	*x = ShowGoodsAttrValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_showGoodsService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowGoodsAttrValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowGoodsAttrValue) ProtoMessage() {}

func (x *ShowGoodsAttrValue) ProtoReflect() protoreflect.Message {
	mi := &file_showGoodsService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowGoodsAttrValue.ProtoReflect.Descriptor instead.
func (*ShowGoodsAttrValue) Descriptor() ([]byte, []int) {
	return file_showGoodsService_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ShowGoodsAttrValue) GetAttr() string {
	if x != nil {
		return x.Attr
	}
	return ""
}

func (x *ShowGoodsAttrValue) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

var File_showGoodsService_proto protoreflect.FileDescriptor

var file_showGoodsService_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x01, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x56,
	0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x73, 0x56,
	0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x51,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x36, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77,
	0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x4f, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x57, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x6b, 0x75, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x06, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x76, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x76, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x76, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x73, 0x76, 0x69, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x4e, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x70, 0x65, 0x63, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x1a, 0x57, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x53, 0x6b, 0x75, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xdc, 0x04, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x75, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x56, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x76, 0x69,
	0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x76, 0x69, 0x70, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x76, 0x69, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x76, 0x69, 0x70, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x76,
	0x69, 0x70, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x51, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4d,
	0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x74, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x50, 0x69, 0x63,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x50, 0x69, 0x63,
	0x73, 0x22, 0x81, 0x02, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41,
	0x74, 0x74, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x41, 0x74, 0x74,
	0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0xca, 0x0d, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x53, 0x70, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f,
	0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x70, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x70, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61,
	0x6e, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x42, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x65, 0x6c, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53,
	0x68, 0x65, 0x6c, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x56, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x69, 0x70, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x76, 0x69,
	0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x76,
	0x69, 0x70, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x76, 0x69, 0x70, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72,
	0x65, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65,
	0x44, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x51, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6b, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x6b, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x74, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x47, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x6f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x6f, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6b, 0x75,
	0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x6b, 0x75, 0x22, 0xe0, 0x04, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x53, 0x6b, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x75, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x76, 0x69, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x77, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0xe2, 0x05, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x65,
	0x6c, 0x76, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x53, 0x68, 0x65,
	0x6c, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x60, 0x0a, 0x0c, 0x53, 0x68,
	0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd7, 0x02, 0x0a,
	0x11, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x51, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x67,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x32, 0xb2, 0x03, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x51,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f,
	0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_showGoodsService_proto_rawDescOnce sync.Once
	file_showGoodsService_proto_rawDescData = file_showGoodsService_proto_rawDesc
)

func file_showGoodsService_proto_rawDescGZIP() []byte {
	file_showGoodsService_proto_rawDescOnce.Do(func() {
		file_showGoodsService_proto_rawDescData = protoimpl.X.CompressGZIP(file_showGoodsService_proto_rawDescData)
	})
	return file_showGoodsService_proto_rawDescData
}

var file_showGoodsService_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_showGoodsService_proto_goTypes = []interface{}{
	(*ShowRealPriceData)(nil),  // 0: services.ShowRealPriceData
	(*ShowQrcodeData)(nil),     // 1: services.ShowQrcodeData
	(*ShowPosterData)(nil),     // 2: services.ShowPosterData
	(*ShowGetAttrData)(nil),    // 3: services.ShowGetAttrData
	(*ShowDetailData)(nil),     // 4: services.ShowDetailData
	(*ShowGoodsInfo)(nil),      // 5: services.ShowGoodsInfo
	(*ShowGoodsAttr)(nil),      // 6: services.ShowGoodsAttr
	(*ShowGoodsSpu)(nil),       // 7: services.ShowGoodsSpu
	(*ShowGoodsSku)(nil),       // 8: services.ShowGoodsSku
	(*ShowGoodsRequest)(nil),   // 9: services.ShowGoodsRequest
	(*ShowListData)(nil),       // 10: services.ShowListData
	(*ShowGoodsResponse)(nil),  // 11: services.ShowGoodsResponse
	nil,                        // 12: services.ShowGetAttrData.ProductValueEntry
	nil,                        // 13: services.ShowDetailData.ProductValueEntry
	(*ShowGoodsAttrValue)(nil), // 14: services.ShowGoodsAttr.value
	(*common.Pager)(nil),       // 15: common.Pager
}
var file_showGoodsService_proto_depIdxs = []int32{
	7,  // 0: services.ShowGetAttrData.goodsInfo:type_name -> services.ShowGoodsSpu
	6,  // 1: services.ShowGetAttrData.productAttr:type_name -> services.ShowGoodsAttr
	12, // 2: services.ShowGetAttrData.productValue:type_name -> services.ShowGetAttrData.ProductValueEntry
	7,  // 3: services.ShowDetailData.goodsInfo:type_name -> services.ShowGoodsSpu
	6,  // 4: services.ShowDetailData.productAttr:type_name -> services.ShowGoodsAttr
	13, // 5: services.ShowDetailData.productValue:type_name -> services.ShowDetailData.ProductValueEntry
	5,  // 6: services.ShowDetailData.good_list:type_name -> services.ShowGoodsInfo
	14, // 7: services.ShowGoodsAttr.attr_value:type_name -> services.ShowGoodsAttr.value
	15, // 8: services.ShowListData.pager:type_name -> common.Pager
	5,  // 9: services.ShowListData.list:type_name -> services.ShowGoodsInfo
	10, // 10: services.ShowGoodsResponse.list:type_name -> services.ShowListData
	4,  // 11: services.ShowGoodsResponse.detail:type_name -> services.ShowDetailData
	0,  // 12: services.ShowGoodsResponse.realPrice:type_name -> services.ShowRealPriceData
	1,  // 13: services.ShowGoodsResponse.qrcode:type_name -> services.ShowQrcodeData
	2,  // 14: services.ShowGoodsResponse.poster:type_name -> services.ShowPosterData
	3,  // 15: services.ShowGoodsResponse.getAttr:type_name -> services.ShowGetAttrData
	8,  // 16: services.ShowGetAttrData.ProductValueEntry.value:type_name -> services.ShowGoodsSku
	8,  // 17: services.ShowDetailData.ProductValueEntry.value:type_name -> services.ShowGoodsSku
	9,  // 18: services.ShowGoodsService.Detail:input_type -> services.ShowGoodsRequest
	9,  // 19: services.ShowGoodsService.List:input_type -> services.ShowGoodsRequest
	9,  // 20: services.ShowGoodsService.RealPrice:input_type -> services.ShowGoodsRequest
	9,  // 21: services.ShowGoodsService.Qrcode:input_type -> services.ShowGoodsRequest
	9,  // 22: services.ShowGoodsService.Poster:input_type -> services.ShowGoodsRequest
	9,  // 23: services.ShowGoodsService.GetAttr:input_type -> services.ShowGoodsRequest
	11, // 24: services.ShowGoodsService.Detail:output_type -> services.ShowGoodsResponse
	11, // 25: services.ShowGoodsService.List:output_type -> services.ShowGoodsResponse
	11, // 26: services.ShowGoodsService.RealPrice:output_type -> services.ShowGoodsResponse
	11, // 27: services.ShowGoodsService.Qrcode:output_type -> services.ShowGoodsResponse
	11, // 28: services.ShowGoodsService.Poster:output_type -> services.ShowGoodsResponse
	11, // 29: services.ShowGoodsService.GetAttr:output_type -> services.ShowGoodsResponse
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_showGoodsService_proto_init() }
func file_showGoodsService_proto_init() {
	if File_showGoodsService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_showGoodsService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowRealPriceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowQrcodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowPosterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowGetAttrData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDetailData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowGoodsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowGoodsAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowGoodsSpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowGoodsSku); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_showGoodsService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowGoodsAttrValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_showGoodsService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_showGoodsService_proto_goTypes,
		DependencyIndexes: file_showGoodsService_proto_depIdxs,
		MessageInfos:      file_showGoodsService_proto_msgTypes,
	}.Build()
	File_showGoodsService_proto = out.File
	file_showGoodsService_proto_rawDesc = nil
	file_showGoodsService_proto_goTypes = nil
	file_showGoodsService_proto_depIdxs = nil
}
