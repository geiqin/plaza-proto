// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: productService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`                                                                   //商品类型
	ShopId               int64    `protobuf:"varint,3,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                                //分店ID
	CategoryId           int64    `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                                    //商品分类
	TaxonomyId           int64    `protobuf:"varint,5,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                                    //商品类目
	BrandId              int32    `protobuf:"varint,6,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                             //品牌
	SpuName              string   `protobuf:"bytes,7,opt,name=spu_name,json=spuName,proto3" json:"spu_name"`                                              //商品名称
	SpuCode              string   `protobuf:"bytes,8,opt,name=spu_code,json=spuCode,proto3" json:"spu_code"`                                              //SPU编码
	SellMode             string   `protobuf:"bytes,9,opt,name=sell_mode,json=sellMode,proto3" json:"sell_mode"`                                           //销售模式
	ImageUrl             string   `protobuf:"bytes,10,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                                          //商品主图
	VideoUrl             string   `protobuf:"bytes,11,opt,name=video_url,json=videoUrl,proto3" json:"video_url"`                                          //主图视频
	ExplainVideoUrl      string   `protobuf:"bytes,12,opt,name=explain_video_url,json=explainVideoUrl,proto3" json:"explain_video_url"`                   //讲解视频
	IsVirtual            string   `protobuf:"bytes,13,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`                                       //虚拟商品
	IsManySpec           string   `protobuf:"bytes,14,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                                  //多规格商品
	IsOpenWeigh          string   `protobuf:"bytes,15,opt,name=is_open_weigh,json=isOpenWeigh,proto3" json:"is_open_weigh"`                               //开启称重
	IsMoreBarcode        string   `protobuf:"bytes,16,opt,name=is_more_barcode,json=isMoreBarcode,proto3" json:"is_more_barcode"`                         //一品多码
	UnitId               int32    `protobuf:"varint,17,opt,name=unit_id,json=unitId,proto3" json:"unit_id"`                                               //计量单位ID
	UnitName             string   `protobuf:"bytes,18,opt,name=unit_name,json=unitName,proto3" json:"unit_name"`                                          //计量单位名称
	UnitType             string   `protobuf:"bytes,19,opt,name=unit_type,json=unitType,proto3" json:"unit_type"`                                          //计量单位类型
	InventoryDeductType  string   `protobuf:"bytes,21,opt,name=inventory_deduct_type,json=inventoryDeductType,proto3" json:"inventory_deduct_type"`       //库存扣减类型
	IsShelve             string   `protobuf:"bytes,22,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`                                          //是否上架
	IsMemberRight        string   `protobuf:"bytes,23,opt,name=is_member_right,json=isMemberRight,proto3" json:"is_member_right"`                         //购买权限
	IsMemberPrice        string   `protobuf:"bytes,24,opt,name=is_member_price,json=isMemberPrice,proto3" json:"is_member_price"`                         //是否会员折扣价
	MinOriginalPrice     int64    `protobuf:"varint,25,opt,name=min_original_price,json=minOriginalPrice,proto3" json:"min_original_price"`               //最低原价
	MaxOriginalPrice     int64    `protobuf:"varint,26,opt,name=max_original_price,json=maxOriginalPrice,proto3" json:"max_original_price"`               //最大原价
	MinPrice             int64    `protobuf:"varint,27,opt,name=min_price,json=minPrice,proto3" json:"min_price"`                                         //最低价格
	MaxPrice             int64    `protobuf:"varint,28,opt,name=max_price,json=maxPrice,proto3" json:"max_price"`                                         //最高价格
	PhotoCount           int64    `protobuf:"varint,29,opt,name=photo_count,json=photoCount,proto3" json:"photo_count"`                                   //图片数量
	AccessCount          int64    `protobuf:"varint,30,opt,name=access_count,json=accessCount,proto3" json:"access_count"`                                //访问次数
	SaleCount            int64    `protobuf:"varint,31,opt,name=sale_count,json=saleCount,proto3" json:"sale_count"`                                      //实际销量
	MinQty               int64    `protobuf:"varint,32,opt,name=min_qty,json=minQty,proto3" json:"min_qty"`                                               //起购数量
	IsLimit              string   `protobuf:"bytes,33,opt,name=is_limit,json=isLimit,proto3" json:"is_limit"`                                             // 是否开启限购（0否, 1是）
	LimitType            string   `protobuf:"bytes,34,opt,name=limit_type,json=limitType,proto3" json:"limit_type"`                                       //限购类型: 1单次限购2永久限购
	LimitNum             int64    `protobuf:"varint,35,opt,name=limit_num,json=limitNum,proto3" json:"limit_num"`                                         //限购数量
	Fictions             int64    `protobuf:"varint,36,opt,name=fictions,proto3" json:"fictions"`                                                         //虚拟销量
	LogisticsTypes       []string `protobuf:"bytes,37,rep,name=logistics_types,json=logisticsTypes,proto3" json:"logistics_types"`                        //支持物流类型
	ExpressFeeType       string   `protobuf:"bytes,38,opt,name=express_fee_type,json=expressFeeType,proto3" json:"express_fee_type"`                      //快递运费类型
	ExpressUniformFee    int64    `protobuf:"varint,39,opt,name=express_uniform_fee,json=expressUniformFee,proto3" json:"express_uniform_fee"`            //快递统一运费
	ExpressFeeTemplateId int64    `protobuf:"varint,40,opt,name=express_fee_template_id,json=expressFeeTemplateId,proto3" json:"express_fee_template_id"` //快递运费模板
	ClientTypes          []string `protobuf:"bytes,41,rep,name=client_types,json=clientTypes,proto3" json:"client_types"`                                 //的客户终端
	Sort                 int32    `protobuf:"varint,49,opt,name=sort,proto3" json:"sort"`                                                                 //排序
	ExtraMainId          string   `protobuf:"bytes,50,opt,name=extra_main_id,json=extraMainId,proto3" json:"extra_main_id"`                               //扩展业务主要ID
	Status               string   `protobuf:"bytes,52,opt,name=status,proto3" json:"status"`                                                              //商品状态
	//sku信息
	SpuId         int64          `protobuf:"varint,62,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                          //商品ID
	Unique        string         `protobuf:"bytes,63,opt,name=unique,proto3" json:"unique"`                                      //SKUKey
	Coding        string         `protobuf:"bytes,64,opt,name=coding,proto3" json:"coding"`                                      //编号
	Barcode       string         `protobuf:"bytes,65,opt,name=barcode,proto3" json:"barcode"`                                    //条码
	MoreBarcodes  []string       `protobuf:"bytes,66,rep,name=more_barcodes,json=moreBarcodes,proto3" json:"more_barcodes"`      //更多条码
	OriginalPrice int64          `protobuf:"varint,67,opt,name=original_price,json=originalPrice,proto3" json:"original_price"`  //划线价
	CostPrice     int64          `protobuf:"varint,68,opt,name=cost_price,json=costPrice,proto3" json:"cost_price"`              //成本价
	Price         int64          `protobuf:"varint,69,opt,name=price,proto3" json:"price"`                                       //销售价
	Inventory     int64          `protobuf:"varint,70,opt,name=inventory,proto3" json:"inventory"`                               //库存
	Weight        int64          `protobuf:"varint,71,opt,name=weight,proto3" json:"weight"`                                     //重量
	Volume        int64          `protobuf:"varint,72,opt,name=volume,proto3" json:"volume"`                                     //体积
	Spec          []*SkuSpecInfo `protobuf:"bytes,73,rep,name=spec,proto3" json:"spec"`                                          //规格信息
	SpecDesc      string         `protobuf:"bytes,74,opt,name=spec_desc,json=specDesc,proto3" json:"spec_desc"`                  //规格描述
	ExtraDetailId string         `protobuf:"bytes,75,opt,name=extra_detail_id,json=extraDetailId,proto3" json:"extra_detail_id"` //扩展业务明细ID
	OutSystemId   string         `protobuf:"bytes,76,opt,name=out_system_id,json=outSystemId,proto3" json:"out_system_id"`       //外部系统ID
	CreatedAt     int64          `protobuf:"varint,77,opt,name=created_at,json=createdAt,proto3" json:"created_at"`              //创建时间
	UpdatedAt     int64          `protobuf:"varint,78,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`              //修改时间
	//额外扩展
	GoodsUrl string `protobuf:"bytes,80,opt,name=goods_url,json=goodsUrl,proto3" json:"goods_url"` //商品URL
	IsDelete string `protobuf:"bytes,81,opt,name=is_delete,json=isDelete,proto3" json:"is_delete"` //商品是否已删除（0否，1是）
	IsError  string `protobuf:"bytes,82,opt,name=is_error,json=isError,proto3" json:"is_error"`    //是否错误（0否，1是）
	ErrorMsg string `protobuf:"bytes,83,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg"` //错误信息
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_productService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_productService_proto_rawDescGZIP(), []int{0}
}

func (x *Product) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Product) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *Product) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Product) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *Product) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *Product) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *Product) GetSpuCode() string {
	if x != nil {
		return x.SpuCode
	}
	return ""
}

func (x *Product) GetSellMode() string {
	if x != nil {
		return x.SellMode
	}
	return ""
}

func (x *Product) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Product) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *Product) GetExplainVideoUrl() string {
	if x != nil {
		return x.ExplainVideoUrl
	}
	return ""
}

func (x *Product) GetIsVirtual() string {
	if x != nil {
		return x.IsVirtual
	}
	return ""
}

func (x *Product) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *Product) GetIsOpenWeigh() string {
	if x != nil {
		return x.IsOpenWeigh
	}
	return ""
}

func (x *Product) GetIsMoreBarcode() string {
	if x != nil {
		return x.IsMoreBarcode
	}
	return ""
}

func (x *Product) GetUnitId() int32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *Product) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *Product) GetUnitType() string {
	if x != nil {
		return x.UnitType
	}
	return ""
}

func (x *Product) GetInventoryDeductType() string {
	if x != nil {
		return x.InventoryDeductType
	}
	return ""
}

func (x *Product) GetIsShelve() string {
	if x != nil {
		return x.IsShelve
	}
	return ""
}

func (x *Product) GetIsMemberRight() string {
	if x != nil {
		return x.IsMemberRight
	}
	return ""
}

func (x *Product) GetIsMemberPrice() string {
	if x != nil {
		return x.IsMemberPrice
	}
	return ""
}

func (x *Product) GetMinOriginalPrice() int64 {
	if x != nil {
		return x.MinOriginalPrice
	}
	return 0
}

func (x *Product) GetMaxOriginalPrice() int64 {
	if x != nil {
		return x.MaxOriginalPrice
	}
	return 0
}

func (x *Product) GetMinPrice() int64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *Product) GetMaxPrice() int64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *Product) GetPhotoCount() int64 {
	if x != nil {
		return x.PhotoCount
	}
	return 0
}

func (x *Product) GetAccessCount() int64 {
	if x != nil {
		return x.AccessCount
	}
	return 0
}

func (x *Product) GetSaleCount() int64 {
	if x != nil {
		return x.SaleCount
	}
	return 0
}

func (x *Product) GetMinQty() int64 {
	if x != nil {
		return x.MinQty
	}
	return 0
}

func (x *Product) GetIsLimit() string {
	if x != nil {
		return x.IsLimit
	}
	return ""
}

func (x *Product) GetLimitType() string {
	if x != nil {
		return x.LimitType
	}
	return ""
}

func (x *Product) GetLimitNum() int64 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

func (x *Product) GetFictions() int64 {
	if x != nil {
		return x.Fictions
	}
	return 0
}

func (x *Product) GetLogisticsTypes() []string {
	if x != nil {
		return x.LogisticsTypes
	}
	return nil
}

func (x *Product) GetExpressFeeType() string {
	if x != nil {
		return x.ExpressFeeType
	}
	return ""
}

func (x *Product) GetExpressUniformFee() int64 {
	if x != nil {
		return x.ExpressUniformFee
	}
	return 0
}

func (x *Product) GetExpressFeeTemplateId() int64 {
	if x != nil {
		return x.ExpressFeeTemplateId
	}
	return 0
}

func (x *Product) GetClientTypes() []string {
	if x != nil {
		return x.ClientTypes
	}
	return nil
}

func (x *Product) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Product) GetExtraMainId() string {
	if x != nil {
		return x.ExtraMainId
	}
	return ""
}

func (x *Product) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Product) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *Product) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *Product) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *Product) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *Product) GetMoreBarcodes() []string {
	if x != nil {
		return x.MoreBarcodes
	}
	return nil
}

func (x *Product) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *Product) GetCostPrice() int64 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *Product) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *Product) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Product) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Product) GetSpec() []*SkuSpecInfo {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Product) GetSpecDesc() string {
	if x != nil {
		return x.SpecDesc
	}
	return ""
}

func (x *Product) GetExtraDetailId() string {
	if x != nil {
		return x.ExtraDetailId
	}
	return ""
}

func (x *Product) GetOutSystemId() string {
	if x != nil {
		return x.OutSystemId
	}
	return ""
}

func (x *Product) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Product) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Product) GetGoodsUrl() string {
	if x != nil {
		return x.GoodsUrl
	}
	return ""
}

func (x *Product) GetIsDelete() string {
	if x != nil {
		return x.IsDelete
	}
	return ""
}

func (x *Product) GetIsError() string {
	if x != nil {
		return x.IsError
	}
	return ""
}

func (x *Product) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type ProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top           int32    `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged         int64    `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize      int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords      string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sorts         []string `protobuf:"bytes,5,rep,name=sorts,proto3" json:"sorts"`
	DateRange     []string `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids           []int64  `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id            int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	Command       string   `protobuf:"bytes,9,opt,name=command,proto3" json:"command"`
	SkuId         int64    `protobuf:"varint,10,opt,name=sku_id,json=skuId,proto3" json:"sku_id"`
	Unique        string   `protobuf:"bytes,11,opt,name=unique,proto3" json:"unique"`
	SpuId         int64    `protobuf:"varint,12,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`
	Coding        string   `protobuf:"bytes,13,opt,name=coding,proto3" json:"coding"`
	SpuName       string   `protobuf:"bytes,14,opt,name=spu_name,json=spuName,proto3" json:"spu_name"`
	Type          string   `protobuf:"bytes,15,opt,name=type,proto3" json:"type"`
	TaxonomyId    int64    `protobuf:"varint,16,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`
	CategoryId    int64    `protobuf:"varint,17,opt,name=category_id,json=categoryId,proto3" json:"category_id"`
	GroupId       int64    `protobuf:"varint,18,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	GroupName     string   `protobuf:"bytes,19,opt,name=group_name,json=groupName,proto3" json:"group_name"`
	BrandId       int32    `protobuf:"varint,20,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`
	ShopId        int64    `protobuf:"varint,21,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`
	Status        string   `protobuf:"bytes,22,opt,name=status,proto3" json:"status"`
	ParamId       int32    `protobuf:"varint,23,opt,name=param_id,json=paramId,proto3" json:"param_id"`
	ParamValue    string   `protobuf:"bytes,24,opt,name=param_value,json=paramValue,proto3" json:"param_value"`
	LabelId       int32    `protobuf:"varint,25,opt,name=label_id,json=labelId,proto3" json:"label_id"`
	LabelName     string   `protobuf:"bytes,26,opt,name=label_name,json=labelName,proto3" json:"label_name"`
	SiteType      string   `protobuf:"bytes,27,opt,name=site_type,json=siteType,proto3" json:"site_type"`
	SpuIds        []int64  `protobuf:"varint,28,rep,packed,name=spu_ids,json=spuIds,proto3" json:"spu_ids"`
	SkuIds        []int64  `protobuf:"varint,29,rep,packed,name=sku_ids,json=skuIds,proto3" json:"sku_ids"`
	BrandIds      []int64  `protobuf:"varint,30,rep,packed,name=brand_ids,json=brandIds,proto3" json:"brand_ids"`
	LabelIds      []int64  `protobuf:"varint,31,rep,packed,name=label_ids,json=labelIds,proto3" json:"label_ids"`
	GroupIds      []int64  `protobuf:"varint,32,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids"`
	IsManySpec    string   `protobuf:"bytes,33,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`       //是否多规格商品,否则为单品(0否，1是)
	IsOpenWeight  string   `protobuf:"bytes,34,opt,name=is_open_weight,json=isOpenWeight,proto3" json:"is_open_weight"` //
	IsShelve      string   `protobuf:"bytes,35,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`
	UniqueList    []string `protobuf:"bytes,36,rep,name=unique_list,json=uniqueList,proto3" json:"unique_list"`
	IsQueryDelete string   `protobuf:"bytes,37,opt,name=is_query_delete,json=isQueryDelete,proto3" json:"is_query_delete"` //是否查询已删除（0否，1是）
}

func (x *ProductRequest) Reset() {
	*x = ProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRequest) ProtoMessage() {}

func (x *ProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRequest.ProtoReflect.Descriptor instead.
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return file_productService_proto_rawDescGZIP(), []int{1}
}

func (x *ProductRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *ProductRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *ProductRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProductRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ProductRequest) GetSorts() []string {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *ProductRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *ProductRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ProductRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ProductRequest) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *ProductRequest) GetUnique() string {
	if x != nil {
		return x.Unique
	}
	return ""
}

func (x *ProductRequest) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *ProductRequest) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *ProductRequest) GetSpuName() string {
	if x != nil {
		return x.SpuName
	}
	return ""
}

func (x *ProductRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductRequest) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *ProductRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ProductRequest) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ProductRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ProductRequest) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *ProductRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ProductRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProductRequest) GetParamId() int32 {
	if x != nil {
		return x.ParamId
	}
	return 0
}

func (x *ProductRequest) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *ProductRequest) GetLabelId() int32 {
	if x != nil {
		return x.LabelId
	}
	return 0
}

func (x *ProductRequest) GetLabelName() string {
	if x != nil {
		return x.LabelName
	}
	return ""
}

func (x *ProductRequest) GetSiteType() string {
	if x != nil {
		return x.SiteType
	}
	return ""
}

func (x *ProductRequest) GetSpuIds() []int64 {
	if x != nil {
		return x.SpuIds
	}
	return nil
}

func (x *ProductRequest) GetSkuIds() []int64 {
	if x != nil {
		return x.SkuIds
	}
	return nil
}

func (x *ProductRequest) GetBrandIds() []int64 {
	if x != nil {
		return x.BrandIds
	}
	return nil
}

func (x *ProductRequest) GetLabelIds() []int64 {
	if x != nil {
		return x.LabelIds
	}
	return nil
}

func (x *ProductRequest) GetGroupIds() []int64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *ProductRequest) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *ProductRequest) GetIsOpenWeight() string {
	if x != nil {
		return x.IsOpenWeight
	}
	return ""
}

func (x *ProductRequest) GetIsShelve() string {
	if x != nil {
		return x.IsShelve
	}
	return ""
}

func (x *ProductRequest) GetUniqueList() []string {
	if x != nil {
		return x.UniqueList
	}
	return nil
}

func (x *ProductRequest) GetIsQueryDelete() string {
	if x != nil {
		return x.IsQueryDelete
	}
	return ""
}

type ProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Product      `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,3,opt,name=pager,proto3" json:"pager"`
	Items  []*Product    `protobuf:"bytes,4,rep,name=items,proto3" json:"items"`
	Msg    string        `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg"`
}

func (x *ProductResponse) Reset() {
	*x = ProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductResponse) ProtoMessage() {}

func (x *ProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductResponse.ProtoReflect.Descriptor instead.
func (*ProductResponse) Descriptor() ([]byte, []int) {
	return file_productService_proto_rawDescGZIP(), []int{2}
}

func (x *ProductResponse) GetEntity() *Product {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ProductResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *ProductResponse) GetItems() []*Product {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ProductResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_productService_proto protoreflect.FileDescriptor

var file_productService_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x0f, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f,
	0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x70, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x70, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x6e, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x42,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69,
	0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x46, 0x65, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x46,
	0x65, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x46, 0x65, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70,
	0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x42,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x49, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x22, 0x81, 0x08, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x70, 0x75, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73,
	0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x24, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x32, 0xcb, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_productService_proto_rawDescOnce sync.Once
	file_productService_proto_rawDescData = file_productService_proto_rawDesc
)

func file_productService_proto_rawDescGZIP() []byte {
	file_productService_proto_rawDescOnce.Do(func() {
		file_productService_proto_rawDescData = protoimpl.X.CompressGZIP(file_productService_proto_rawDescData)
	})
	return file_productService_proto_rawDescData
}

var file_productService_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_productService_proto_goTypes = []interface{}{
	(*Product)(nil),         // 0: services.Product
	(*ProductRequest)(nil),  // 1: services.ProductRequest
	(*ProductResponse)(nil), // 2: services.ProductResponse
	(*SkuSpecInfo)(nil),     // 3: services.SkuSpecInfo
	(*common.Pager)(nil),    // 4: common.Pager
}
var file_productService_proto_depIdxs = []int32{
	3, // 0: services.Product.spec:type_name -> services.SkuSpecInfo
	0, // 1: services.ProductResponse.entity:type_name -> services.Product
	4, // 2: services.ProductResponse.pager:type_name -> common.Pager
	0, // 3: services.ProductResponse.items:type_name -> services.Product
	1, // 4: services.ProductService.Detail:input_type -> services.ProductRequest
	1, // 5: services.ProductService.List:input_type -> services.ProductRequest
	1, // 6: services.ProductService.Search:input_type -> services.ProductRequest
	2, // 7: services.ProductService.Detail:output_type -> services.ProductResponse
	2, // 8: services.ProductService.List:output_type -> services.ProductResponse
	2, // 9: services.ProductService.Search:output_type -> services.ProductResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_productService_proto_init() }
func file_productService_proto_init() {
	if File_productService_proto != nil {
		return
	}
	file_baseInfoService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_productService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_productService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_productService_proto_goTypes,
		DependencyIndexes: file_productService_proto_depIdxs,
		MessageInfos:      file_productService_proto_msgTypes,
	}.Build()
	File_productService_proto = out.File
	file_productService_proto_rawDesc = nil
	file_productService_proto_goTypes = nil
	file_productService_proto_depIdxs = nil
}
