// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: productService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpuId                int64             `protobuf:"varint,1,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                                                                                                                       //ID
	TaxonomyId           int64             `protobuf:"varint,2,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                                                                                                        //标准类目ID
	CategoryId           int64             `protobuf:"varint,3,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                                                                                                        //商品分类ID
	BrandId              int32             `protobuf:"varint,4,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                                                                                                 //品牌ID
	ShopId               int64             `protobuf:"varint,5,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                                                                                                    //分店ID
	Title                string            `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`                                                                                                                                     //商品标题
	TitleColor           string            `protobuf:"bytes,7,opt,name=title_color,json=titleColor,proto3" json:"title_color"`                                                                                                         //标题颜色
	SimpleDesc           string            `protobuf:"bytes,8,opt,name=simple_desc,json=simpleDesc,proto3" json:"simple_desc"`                                                                                                         //简述
	Type                 string            `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`                                                                                                                                       //商品类型：product商品,material原料,assets资产
	SiteType             string            `protobuf:"bytes,10,opt,name=site_type,json=siteType,proto3" json:"site_type"`                                                                                                              //商品类型
	Unit                 string            `protobuf:"bytes,11,opt,name=unit,proto3" json:"unit"`                                                                                                                                      //计量单位
	UnitRate             float32           `protobuf:"fixed32,12,opt,name=unit_rate,json=unitRate,proto3" json:"unit_rate"`                                                                                                            //计量单位换算率
	IsOpenWeight         string            `protobuf:"bytes,13,opt,name=is_open_weight,json=isOpenWeight,proto3" json:"is_open_weight"`                                                                                                //是否开启称重（称重商品不能是多规格）（0否, 1是）
	WeightPluCode        string            `protobuf:"bytes,14,opt,name=weight_plu_code,json=weightPluCode,proto3" json:"weight_plu_code"`                                                                                             //称重PLU码
	PlaceOriginId        int64             `protobuf:"varint,15,opt,name=place_origin_id,json=placeOriginId,proto3" json:"place_origin_id"`                                                                                            //产地ID（地区省id）
	ImageUrl             string            `protobuf:"bytes,17,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                                                                                                              //商品主图url
	VideoUrl             string            `protobuf:"bytes,18,opt,name=video_url,json=videoUrl,proto3" json:"video_url"`                                                                                                              //短视频url
	Content              string            `protobuf:"bytes,19,opt,name=content,proto3" json:"content"`                                                                                                                                //商品内容
	TemplateId           int32             `protobuf:"varint,20,opt,name=template_id,json=templateId,proto3" json:"template_id"`                                                                                                       //商品详情模板信息
	IsManySpec           string            `protobuf:"bytes,21,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                                                                                                      //是否多规格商品,否则为单品
	IsDeductionInventory string            `protobuf:"bytes,22,opt,name=is_deduction_inventory,json=isDeductionInventory,proto3" json:"is_deduction_inventory"`                                                                        //是否扣减库存（0否, 1是）
	IsListed             string            `protobuf:"bytes,23,opt,name=is_listed,json=isListed,proto3" json:"is_listed"`                                                                                                              //是否上架（下架后用户不可见, 0否, 1是）
	IsMemberRight        string            `protobuf:"bytes,24,opt,name=is_member_right,json=isMemberRight,proto3" json:"is_member_right"`                                                                                             //是否设置商品购买权限（0否, 1是）
	IsMemberPrice        string            `protobuf:"bytes,25,opt,name=is_member_price,json=isMemberPrice,proto3" json:"is_member_price"`                                                                                             //是否参与会员折扣价（0否, 1是）
	MinOriginalPrice     int64             `protobuf:"varint,26,opt,name=min_original_price,json=minOriginalPrice,proto3" json:"min_original_price"`                                                                                   //最低原价
	MaxOriginalPrice     int64             `protobuf:"varint,27,opt,name=max_original_price,json=maxOriginalPrice,proto3" json:"max_original_price"`                                                                                   //最大原价
	MinPrice             int64             `protobuf:"varint,28,opt,name=min_price,json=minPrice,proto3" json:"min_price"`                                                                                                             //最低价格
	MaxPrice             int64             `protobuf:"varint,29,opt,name=max_price,json=maxPrice,proto3" json:"max_price"`                                                                                                             //最高价格
	ShowOriginalPrice    string            `protobuf:"bytes,30,opt,name=show_original_price,json=showOriginalPrice,proto3" json:"show_original_price"`                                                                                 //显示原价（单值:10, 区间:10.00-20.00）一般用于展示使用
	ShowPrice            string            `protobuf:"bytes,31,opt,name=show_price,json=showPrice,proto3" json:"show_price"`                                                                                                           //显示销售价格（单值:10, 区间:10.00-20.00）一般用于展示使用
	BuyMinNumber         int64             `protobuf:"varint,32,opt,name=buy_min_number,json=buyMinNumber,proto3" json:"buy_min_number"`                                                                                               //最低起购数量（默认1）
	BuyMaxNumber         int64             `protobuf:"varint,33,opt,name=buy_max_number,json=buyMaxNumber,proto3" json:"buy_max_number"`                                                                                               //最大购买数量（最大数值 100000000, 小于等于0或空则不限）
	GiveIntegral         int64             `protobuf:"varint,34,opt,name=give_integral,json=giveIntegral,proto3" json:"give_integral"`                                                                                                 //购买赠送积分比例
	PhotoCount           int32             `protobuf:"varint,35,opt,name=photo_count,json=photoCount,proto3" json:"photo_count"`                                                                                                       //相册图片数量
	SaleCount            int32             `protobuf:"varint,36,opt,name=sale_count,json=saleCount,proto3" json:"sale_count"`                                                                                                          //销量
	AccessCount          int32             `protobuf:"varint,37,opt,name=access_count,json=accessCount,proto3" json:"access_count"`                                                                                                    //访问次数
	Sort                 int32             `protobuf:"varint,38,opt,name=sort,proto3" json:"sort"`                                                                                                                                     //排序值
	FableSaleCount       int32             `protobuf:"varint,39,opt,name=fable_sale_count,json=fableSaleCount,proto3" json:"fable_sale_count"`                                                                                         //虚构销量（前端展示销量时会加上虚假销量）
	ButtonMode           string            `protobuf:"bytes,40,opt,name=button_mode,json=buttonMode,proto3" json:"button_mode"`                                                                                                        //立即购买按钮：1默认名称，2自定义名称
	ButtonCustom         string            `protobuf:"bytes,41,opt,name=button_custom,json=buttonCustom,proto3" json:"button_custom"`                                                                                                  //按钮自定义名称,英文最多15个字符
	FreightType          string            `protobuf:"bytes,42,opt,name=freight_type,json=freightType,proto3" json:"freight_type"`                                                                                                     //运费模式：1统一邮费，2运费模板
	FreightUniformFee    int64             `protobuf:"varint,43,opt,name=freight_uniform_fee,json=freightUniformFee,proto3" json:"freight_uniform_fee"`                                                                                //统一运费
	FreightTemplateId    int64             `protobuf:"varint,44,opt,name=freight_template_id,json=freightTemplateId,proto3" json:"freight_template_id"`                                                                                //运费模板ID
	IsFictitious         string            `protobuf:"bytes,45,opt,name=is_fictitious,json=isFictitious,proto3" json:"is_fictitious"`                                                                                                  //是否虚拟商品（0否, 1是）
	FictitiousValue      map[string]string `protobuf:"bytes,46,rep,name=fictitious_value,json=fictitiousValue,proto3" json:"fictitious_value" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //虚拟商品展示数据
	Status               string            `protobuf:"bytes,50,opt,name=status,proto3" json:"status"`
	CreatedAt            string            `protobuf:"bytes,51,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string            `protobuf:"bytes,52,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	BrandName            string            `protobuf:"bytes,75,opt,name=brand_name,json=brandName,proto3" json:"brand_name"`
	IsError              string            `protobuf:"bytes,77,opt,name=is_error,json=isError,proto3" json:"is_error"`                    //是否错误（0否，1是）
	ErrorMsg             string            `protobuf:"bytes,78,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg"`                 //错误信息
	OriginalPrice        int64             `protobuf:"varint,80,opt,name=original_price,json=originalPrice,proto3" json:"original_price"` //划线价
	CostPrice            int64             `protobuf:"varint,81,opt,name=cost_price,json=costPrice,proto3" json:"cost_price"`             //成本价
	Price                int64             `protobuf:"varint,82,opt,name=price,proto3" json:"price"`                                      //销售价
	Inventory            int64             `protobuf:"varint,83,opt,name=inventory,proto3" json:"inventory"`                              //库存
	Md5Key               string            `protobuf:"bytes,84,opt,name=md5_key,json=md5Key,proto3" json:"md5_key"`                       //唯一标识
	Coding               string            `protobuf:"bytes,85,opt,name=coding,proto3" json:"coding"`                                     //编号
	Barcode              string            `protobuf:"bytes,86,opt,name=barcode,proto3" json:"barcode"`                                   //条码
	Weight               int64             `protobuf:"varint,87,opt,name=weight,proto3" json:"weight"`                                    //重量：克
	Volume               int64             `protobuf:"varint,88,opt,name=volume,proto3" json:"volume"`                                    //体积
	SpecDesc             string            `protobuf:"bytes,89,opt,name=spec_desc,json=specDesc,proto3" json:"spec_desc"`                 //规格描述
	SpecData             string            `protobuf:"bytes,90,opt,name=spec_data,json=specData,proto3" json:"spec_data"`                 //规格信息JSON
	Spec                 []*SkuSpec        `protobuf:"bytes,91,rep,name=spec,proto3" json:"spec"`                                         //规格信息列表
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_productService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_productService_proto_rawDescGZIP(), []int{0}
}

func (x *Product) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *Product) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *Product) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Product) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *Product) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *Product) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product) GetTitleColor() string {
	if x != nil {
		return x.TitleColor
	}
	return ""
}

func (x *Product) GetSimpleDesc() string {
	if x != nil {
		return x.SimpleDesc
	}
	return ""
}

func (x *Product) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Product) GetSiteType() string {
	if x != nil {
		return x.SiteType
	}
	return ""
}

func (x *Product) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Product) GetUnitRate() float32 {
	if x != nil {
		return x.UnitRate
	}
	return 0
}

func (x *Product) GetIsOpenWeight() string {
	if x != nil {
		return x.IsOpenWeight
	}
	return ""
}

func (x *Product) GetWeightPluCode() string {
	if x != nil {
		return x.WeightPluCode
	}
	return ""
}

func (x *Product) GetPlaceOriginId() int64 {
	if x != nil {
		return x.PlaceOriginId
	}
	return 0
}

func (x *Product) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Product) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *Product) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Product) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *Product) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *Product) GetIsDeductionInventory() string {
	if x != nil {
		return x.IsDeductionInventory
	}
	return ""
}

func (x *Product) GetIsListed() string {
	if x != nil {
		return x.IsListed
	}
	return ""
}

func (x *Product) GetIsMemberRight() string {
	if x != nil {
		return x.IsMemberRight
	}
	return ""
}

func (x *Product) GetIsMemberPrice() string {
	if x != nil {
		return x.IsMemberPrice
	}
	return ""
}

func (x *Product) GetMinOriginalPrice() int64 {
	if x != nil {
		return x.MinOriginalPrice
	}
	return 0
}

func (x *Product) GetMaxOriginalPrice() int64 {
	if x != nil {
		return x.MaxOriginalPrice
	}
	return 0
}

func (x *Product) GetMinPrice() int64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *Product) GetMaxPrice() int64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *Product) GetShowOriginalPrice() string {
	if x != nil {
		return x.ShowOriginalPrice
	}
	return ""
}

func (x *Product) GetShowPrice() string {
	if x != nil {
		return x.ShowPrice
	}
	return ""
}

func (x *Product) GetBuyMinNumber() int64 {
	if x != nil {
		return x.BuyMinNumber
	}
	return 0
}

func (x *Product) GetBuyMaxNumber() int64 {
	if x != nil {
		return x.BuyMaxNumber
	}
	return 0
}

func (x *Product) GetGiveIntegral() int64 {
	if x != nil {
		return x.GiveIntegral
	}
	return 0
}

func (x *Product) GetPhotoCount() int32 {
	if x != nil {
		return x.PhotoCount
	}
	return 0
}

func (x *Product) GetSaleCount() int32 {
	if x != nil {
		return x.SaleCount
	}
	return 0
}

func (x *Product) GetAccessCount() int32 {
	if x != nil {
		return x.AccessCount
	}
	return 0
}

func (x *Product) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Product) GetFableSaleCount() int32 {
	if x != nil {
		return x.FableSaleCount
	}
	return 0
}

func (x *Product) GetButtonMode() string {
	if x != nil {
		return x.ButtonMode
	}
	return ""
}

func (x *Product) GetButtonCustom() string {
	if x != nil {
		return x.ButtonCustom
	}
	return ""
}

func (x *Product) GetFreightType() string {
	if x != nil {
		return x.FreightType
	}
	return ""
}

func (x *Product) GetFreightUniformFee() int64 {
	if x != nil {
		return x.FreightUniformFee
	}
	return 0
}

func (x *Product) GetFreightTemplateId() int64 {
	if x != nil {
		return x.FreightTemplateId
	}
	return 0
}

func (x *Product) GetIsFictitious() string {
	if x != nil {
		return x.IsFictitious
	}
	return ""
}

func (x *Product) GetFictitiousValue() map[string]string {
	if x != nil {
		return x.FictitiousValue
	}
	return nil
}

func (x *Product) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Product) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Product) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Product) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *Product) GetIsError() string {
	if x != nil {
		return x.IsError
	}
	return ""
}

func (x *Product) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *Product) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *Product) GetCostPrice() int64 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *Product) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *Product) GetMd5Key() string {
	if x != nil {
		return x.Md5Key
	}
	return ""
}

func (x *Product) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *Product) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *Product) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Product) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Product) GetSpecDesc() string {
	if x != nil {
		return x.SpecDesc
	}
	return ""
}

func (x *Product) GetSpecData() string {
	if x != nil {
		return x.SpecData
	}
	return ""
}

func (x *Product) GetSpec() []*SkuSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged        int64    `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize     int64    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords     string   `protobuf:"bytes,3,opt,name=keywords,proto3" json:"keywords"`
	SkuId        int64    `protobuf:"varint,4,opt,name=sku_id,json=skuId,proto3" json:"sku_id"`
	IsListed     string   `protobuf:"bytes,5,opt,name=is_listed,json=isListed,proto3" json:"is_listed"`
	SpuId        int64    `protobuf:"varint,6,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`
	Coding       string   `protobuf:"bytes,7,opt,name=coding,proto3" json:"coding"`
	Title        string   `protobuf:"bytes,8,opt,name=title,proto3" json:"title"`
	Type         string   `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`
	TaxonomyId   int64    `protobuf:"varint,10,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`
	CategoryId   int64    `protobuf:"varint,11,opt,name=category_id,json=categoryId,proto3" json:"category_id"`
	TermId       int64    `protobuf:"varint,12,opt,name=term_id,json=termId,proto3" json:"term_id"`
	TermName     string   `protobuf:"bytes,13,opt,name=term_name,json=termName,proto3" json:"term_name"`
	BrandId      int32    `protobuf:"varint,14,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`
	ShopId       int64    `protobuf:"varint,15,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`
	Status       string   `protobuf:"bytes,16,opt,name=status,proto3" json:"status"`
	StartDate    string   `protobuf:"bytes,17,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate      string   `protobuf:"bytes,18,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	ParamId      int32    `protobuf:"varint,19,opt,name=param_id,json=paramId,proto3" json:"param_id"`
	ParamValue   string   `protobuf:"bytes,20,opt,name=param_value,json=paramValue,proto3" json:"param_value"`
	TagId        int32    `protobuf:"varint,21,opt,name=tag_id,json=tagId,proto3" json:"tag_id"`
	TagName      string   `protobuf:"bytes,22,opt,name=tag_name,json=tagName,proto3" json:"tag_name"`
	SiteType     string   `protobuf:"bytes,23,opt,name=site_type,json=siteType,proto3" json:"site_type"`
	Sort         int32    `protobuf:"varint,24,opt,name=sort,proto3" json:"sort"`
	SpuIds       []int64  `protobuf:"varint,25,rep,packed,name=spu_ids,json=spuIds,proto3" json:"spu_ids"`
	SkuIds       []int64  `protobuf:"varint,26,rep,packed,name=sku_ids,json=skuIds,proto3" json:"sku_ids"`
	BrandIds     []int64  `protobuf:"varint,27,rep,packed,name=brand_ids,json=brandIds,proto3" json:"brand_ids"`
	TagIds       []int64  `protobuf:"varint,28,rep,packed,name=tag_ids,json=tagIds,proto3" json:"tag_ids"`
	TermIds      []int64  `protobuf:"varint,29,rep,packed,name=term_ids,json=termIds,proto3" json:"term_ids"`
	Top          int32    `protobuf:"varint,30,opt,name=top,proto3" json:"top"`
	IsManySpec   string   `protobuf:"bytes,31,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`       //是否多规格商品,否则为单品(0否，1是)
	IsOpenWeight string   `protobuf:"bytes,32,opt,name=is_open_weight,json=isOpenWeight,proto3" json:"is_open_weight"` //
	Md5Key       string   `protobuf:"bytes,33,opt,name=md5_key,json=md5Key,proto3" json:"md5_key"`
	Md5KeyList   []string `protobuf:"bytes,34,rep,name=md5_key_list,json=md5KeyList,proto3" json:"md5_key_list"`
}

func (x *ProductRequest) Reset() {
	*x = ProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRequest) ProtoMessage() {}

func (x *ProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_productService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRequest.ProtoReflect.Descriptor instead.
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return file_productService_proto_rawDescGZIP(), []int{1}
}

func (x *ProductRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *ProductRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProductRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ProductRequest) GetSkuId() int64 {
	if x != nil {
		return x.SkuId
	}
	return 0
}

func (x *ProductRequest) GetIsListed() string {
	if x != nil {
		return x.IsListed
	}
	return ""
}

func (x *ProductRequest) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *ProductRequest) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *ProductRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProductRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductRequest) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *ProductRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ProductRequest) GetTermId() int64 {
	if x != nil {
		return x.TermId
	}
	return 0
}

func (x *ProductRequest) GetTermName() string {
	if x != nil {
		return x.TermName
	}
	return ""
}

func (x *ProductRequest) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *ProductRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ProductRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProductRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ProductRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *ProductRequest) GetParamId() int32 {
	if x != nil {
		return x.ParamId
	}
	return 0
}

func (x *ProductRequest) GetParamValue() string {
	if x != nil {
		return x.ParamValue
	}
	return ""
}

func (x *ProductRequest) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ProductRequest) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *ProductRequest) GetSiteType() string {
	if x != nil {
		return x.SiteType
	}
	return ""
}

func (x *ProductRequest) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductRequest) GetSpuIds() []int64 {
	if x != nil {
		return x.SpuIds
	}
	return nil
}

func (x *ProductRequest) GetSkuIds() []int64 {
	if x != nil {
		return x.SkuIds
	}
	return nil
}

func (x *ProductRequest) GetBrandIds() []int64 {
	if x != nil {
		return x.BrandIds
	}
	return nil
}

func (x *ProductRequest) GetTagIds() []int64 {
	if x != nil {
		return x.TagIds
	}
	return nil
}

func (x *ProductRequest) GetTermIds() []int64 {
	if x != nil {
		return x.TermIds
	}
	return nil
}

func (x *ProductRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *ProductRequest) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *ProductRequest) GetIsOpenWeight() string {
	if x != nil {
		return x.IsOpenWeight
	}
	return ""
}

func (x *ProductRequest) GetMd5Key() string {
	if x != nil {
		return x.Md5Key
	}
	return ""
}

func (x *ProductRequest) GetMd5KeyList() []string {
	if x != nil {
		return x.Md5KeyList
	}
	return nil
}

type ProductData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Product      `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,3,opt,name=pager,proto3" json:"pager"`
	Items  []*Product    `protobuf:"bytes,4,rep,name=items,proto3" json:"items"`
	Msg    string        `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg"`
}

func (x *ProductData) Reset() {
	*x = ProductData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductData) ProtoMessage() {}

func (x *ProductData) ProtoReflect() protoreflect.Message {
	mi := &file_productService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductData.ProtoReflect.Descriptor instead.
func (*ProductData) Descriptor() ([]byte, []int) {
	return file_productService_proto_rawDescGZIP(), []int{2}
}

func (x *ProductData) GetEntity() *Product {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ProductData) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *ProductData) GetItems() []*Product {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ProductData) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *ProductData  `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Error *common.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error"`
}

func (x *ProductResponse) Reset() {
	*x = ProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_productService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductResponse) ProtoMessage() {}

func (x *ProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_productService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductResponse.ProtoReflect.Descriptor instead.
func (*ProductResponse) Descriptor() ([]byte, []int) {
	return file_productService_proto_rawDescGZIP(), []int{3}
}

func (x *ProductResponse) GetData() *ProductData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ProductResponse) GetError() *common.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_productService_proto protoreflect.FileDescriptor

var file_productService_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x10, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f,
	0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x6c,
	0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x6e, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73, 0x44, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x61, 0x78, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d,
	0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x72, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x72, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x75, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x66, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x46, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x64, 0x35, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x64, 0x35, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x58, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x5b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x1a, 0x42, 0x0a, 0x14, 0x46, 0x69, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x07, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x75, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x73, 0x70, 0x75, 0x49, 0x64,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x67, 0x49, 0x64, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x6f, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x20, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64, 0x35, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35, 0x4b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x0c, 0x6d, 0x64, 0x35, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x22,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x64, 0x35, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x98, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x61, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xcb,
	0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b,
	0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_productService_proto_rawDescOnce sync.Once
	file_productService_proto_rawDescData = file_productService_proto_rawDesc
)

func file_productService_proto_rawDescGZIP() []byte {
	file_productService_proto_rawDescOnce.Do(func() {
		file_productService_proto_rawDescData = protoimpl.X.CompressGZIP(file_productService_proto_rawDescData)
	})
	return file_productService_proto_rawDescData
}

var file_productService_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_productService_proto_goTypes = []interface{}{
	(*Product)(nil),         // 0: services.Product
	(*ProductRequest)(nil),  // 1: services.ProductRequest
	(*ProductData)(nil),     // 2: services.ProductData
	(*ProductResponse)(nil), // 3: services.ProductResponse
	nil,                     // 4: services.Product.FictitiousValueEntry
	(*SkuSpec)(nil),         // 5: services.SkuSpec
	(*common.Pager)(nil),    // 6: common.Pager
	(*common.Error)(nil),    // 7: common.Error
}
var file_productService_proto_depIdxs = []int32{
	4,  // 0: services.Product.fictitious_value:type_name -> services.Product.FictitiousValueEntry
	5,  // 1: services.Product.spec:type_name -> services.SkuSpec
	0,  // 2: services.ProductData.entity:type_name -> services.Product
	6,  // 3: services.ProductData.pager:type_name -> common.Pager
	0,  // 4: services.ProductData.items:type_name -> services.Product
	2,  // 5: services.ProductResponse.data:type_name -> services.ProductData
	7,  // 6: services.ProductResponse.error:type_name -> common.Error
	1,  // 7: services.ProductService.Detail:input_type -> services.ProductRequest
	1,  // 8: services.ProductService.List:input_type -> services.ProductRequest
	1,  // 9: services.ProductService.Search:input_type -> services.ProductRequest
	3,  // 10: services.ProductService.Detail:output_type -> services.ProductResponse
	3,  // 11: services.ProductService.List:output_type -> services.ProductResponse
	3,  // 12: services.ProductService.Search:output_type -> services.ProductResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_productService_proto_init() }
func file_productService_proto_init() {
	if File_productService_proto != nil {
		return
	}
	file_baseInfoService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_productService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_productService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_productService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_productService_proto_goTypes,
		DependencyIndexes: file_productService_proto_depIdxs,
		MessageInfos:      file_productService_proto_msgTypes,
	}.Build()
	File_productService_proto = out.File
	file_productService_proto_rawDesc = nil
	file_productService_proto_goTypes = nil
	file_productService_proto_depIdxs = nil
}
