// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: expressFeeTemplateService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ExpressFeeTemplateService service

func NewExpressFeeTemplateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ExpressFeeTemplateService service

type ExpressFeeTemplateService interface {
	Create(ctx context.Context, in *ExpressFeeTemplate, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error)
	Update(ctx context.Context, in *ExpressFeeTemplate, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error)
	Copy(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error)
	Delete(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error)
	Search(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error)
	List(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error)
	Get(ctx context.Context, in *ExpressFeeTemplate, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error)
	// 设置默认使用模板
	Defaulted(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error)
	// 获取默认使用的模板
	GetDefault(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error)
}

type expressFeeTemplateService struct {
	c    client.Client
	name string
}

func NewExpressFeeTemplateService(name string, c client.Client) ExpressFeeTemplateService {
	return &expressFeeTemplateService{
		c:    c,
		name: name,
	}
}

func (c *expressFeeTemplateService) Create(ctx context.Context, in *ExpressFeeTemplate, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressFeeTemplateService.Create", in)
	out := new(ExpressFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressFeeTemplateService) Update(ctx context.Context, in *ExpressFeeTemplate, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressFeeTemplateService.Update", in)
	out := new(ExpressFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressFeeTemplateService) Copy(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressFeeTemplateService.Copy", in)
	out := new(ExpressFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressFeeTemplateService) Delete(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressFeeTemplateService.Delete", in)
	out := new(ExpressFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressFeeTemplateService) Search(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressFeeTemplateService.Search", in)
	out := new(ExpressFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressFeeTemplateService) List(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressFeeTemplateService.List", in)
	out := new(ExpressFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressFeeTemplateService) Get(ctx context.Context, in *ExpressFeeTemplate, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressFeeTemplateService.Get", in)
	out := new(ExpressFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressFeeTemplateService) Defaulted(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressFeeTemplateService.Defaulted", in)
	out := new(ExpressFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressFeeTemplateService) GetDefault(ctx context.Context, in *ExpressFeeTemplateRequest, opts ...client.CallOption) (*ExpressFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressFeeTemplateService.GetDefault", in)
	out := new(ExpressFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExpressFeeTemplateService service

type ExpressFeeTemplateServiceHandler interface {
	Create(context.Context, *ExpressFeeTemplate, *ExpressFeeTemplateResponse) error
	Update(context.Context, *ExpressFeeTemplate, *ExpressFeeTemplateResponse) error
	Copy(context.Context, *ExpressFeeTemplateRequest, *ExpressFeeTemplateResponse) error
	Delete(context.Context, *ExpressFeeTemplateRequest, *ExpressFeeTemplateResponse) error
	Search(context.Context, *ExpressFeeTemplateRequest, *ExpressFeeTemplateResponse) error
	List(context.Context, *ExpressFeeTemplateRequest, *ExpressFeeTemplateResponse) error
	Get(context.Context, *ExpressFeeTemplate, *ExpressFeeTemplateResponse) error
	// 设置默认使用模板
	Defaulted(context.Context, *ExpressFeeTemplateRequest, *ExpressFeeTemplateResponse) error
	// 获取默认使用的模板
	GetDefault(context.Context, *ExpressFeeTemplateRequest, *ExpressFeeTemplateResponse) error
}

func RegisterExpressFeeTemplateServiceHandler(s server.Server, hdlr ExpressFeeTemplateServiceHandler, opts ...server.HandlerOption) error {
	type expressFeeTemplateService interface {
		Create(ctx context.Context, in *ExpressFeeTemplate, out *ExpressFeeTemplateResponse) error
		Update(ctx context.Context, in *ExpressFeeTemplate, out *ExpressFeeTemplateResponse) error
		Copy(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error
		Delete(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error
		Search(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error
		List(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error
		Get(ctx context.Context, in *ExpressFeeTemplate, out *ExpressFeeTemplateResponse) error
		Defaulted(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error
		GetDefault(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error
	}
	type ExpressFeeTemplateService struct {
		expressFeeTemplateService
	}
	h := &expressFeeTemplateServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ExpressFeeTemplateService{h}, opts...))
}

type expressFeeTemplateServiceHandler struct {
	ExpressFeeTemplateServiceHandler
}

func (h *expressFeeTemplateServiceHandler) Create(ctx context.Context, in *ExpressFeeTemplate, out *ExpressFeeTemplateResponse) error {
	return h.ExpressFeeTemplateServiceHandler.Create(ctx, in, out)
}

func (h *expressFeeTemplateServiceHandler) Update(ctx context.Context, in *ExpressFeeTemplate, out *ExpressFeeTemplateResponse) error {
	return h.ExpressFeeTemplateServiceHandler.Update(ctx, in, out)
}

func (h *expressFeeTemplateServiceHandler) Copy(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error {
	return h.ExpressFeeTemplateServiceHandler.Copy(ctx, in, out)
}

func (h *expressFeeTemplateServiceHandler) Delete(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error {
	return h.ExpressFeeTemplateServiceHandler.Delete(ctx, in, out)
}

func (h *expressFeeTemplateServiceHandler) Search(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error {
	return h.ExpressFeeTemplateServiceHandler.Search(ctx, in, out)
}

func (h *expressFeeTemplateServiceHandler) List(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error {
	return h.ExpressFeeTemplateServiceHandler.List(ctx, in, out)
}

func (h *expressFeeTemplateServiceHandler) Get(ctx context.Context, in *ExpressFeeTemplate, out *ExpressFeeTemplateResponse) error {
	return h.ExpressFeeTemplateServiceHandler.Get(ctx, in, out)
}

func (h *expressFeeTemplateServiceHandler) Defaulted(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error {
	return h.ExpressFeeTemplateServiceHandler.Defaulted(ctx, in, out)
}

func (h *expressFeeTemplateServiceHandler) GetDefault(ctx context.Context, in *ExpressFeeTemplateRequest, out *ExpressFeeTemplateResponse) error {
	return h.ExpressFeeTemplateServiceHandler.GetDefault(ctx, in, out)
}
