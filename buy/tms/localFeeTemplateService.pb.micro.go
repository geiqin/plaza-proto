// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: localFeeTemplateService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LocalFeeTemplateService service

func NewLocalFeeTemplateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LocalFeeTemplateService service

type LocalFeeTemplateService interface {
	// 同城配送模版新增
	Create(ctx context.Context, in *LocalFeeTemplate, opts ...client.CallOption) (*LocalFeeTemplateResponse, error)
	// 同城配送模版修改
	Update(ctx context.Context, in *LocalFeeTemplate, opts ...client.CallOption) (*LocalFeeTemplateResponse, error)
	// 同城配送模版删除
	Delete(ctx context.Context, in *LocalFeeTemplate, opts ...client.CallOption) (*LocalFeeTemplateResponse, error)
	// 同城配送模版获取
	Get(ctx context.Context, in *LocalFeeTemplate, opts ...client.CallOption) (*LocalFeeTemplateResponse, error)
	// 同城配送模版查询
	Search(ctx context.Context, in *LocalFeeTemplateRequest, opts ...client.CallOption) (*LocalFeeTemplateResponse, error)
	// 同城配送模版列表
	List(ctx context.Context, in *LocalFeeTemplateRequest, opts ...client.CallOption) (*LocalFeeTemplateResponse, error)
}

type localFeeTemplateService struct {
	c    client.Client
	name string
}

func NewLocalFeeTemplateService(name string, c client.Client) LocalFeeTemplateService {
	return &localFeeTemplateService{
		c:    c,
		name: name,
	}
}

func (c *localFeeTemplateService) Create(ctx context.Context, in *LocalFeeTemplate, opts ...client.CallOption) (*LocalFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "LocalFeeTemplateService.Create", in)
	out := new(LocalFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localFeeTemplateService) Update(ctx context.Context, in *LocalFeeTemplate, opts ...client.CallOption) (*LocalFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "LocalFeeTemplateService.Update", in)
	out := new(LocalFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localFeeTemplateService) Delete(ctx context.Context, in *LocalFeeTemplate, opts ...client.CallOption) (*LocalFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "LocalFeeTemplateService.Delete", in)
	out := new(LocalFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localFeeTemplateService) Get(ctx context.Context, in *LocalFeeTemplate, opts ...client.CallOption) (*LocalFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "LocalFeeTemplateService.Get", in)
	out := new(LocalFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localFeeTemplateService) Search(ctx context.Context, in *LocalFeeTemplateRequest, opts ...client.CallOption) (*LocalFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "LocalFeeTemplateService.Search", in)
	out := new(LocalFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localFeeTemplateService) List(ctx context.Context, in *LocalFeeTemplateRequest, opts ...client.CallOption) (*LocalFeeTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "LocalFeeTemplateService.List", in)
	out := new(LocalFeeTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LocalFeeTemplateService service

type LocalFeeTemplateServiceHandler interface {
	// 同城配送模版新增
	Create(context.Context, *LocalFeeTemplate, *LocalFeeTemplateResponse) error
	// 同城配送模版修改
	Update(context.Context, *LocalFeeTemplate, *LocalFeeTemplateResponse) error
	// 同城配送模版删除
	Delete(context.Context, *LocalFeeTemplate, *LocalFeeTemplateResponse) error
	// 同城配送模版获取
	Get(context.Context, *LocalFeeTemplate, *LocalFeeTemplateResponse) error
	// 同城配送模版查询
	Search(context.Context, *LocalFeeTemplateRequest, *LocalFeeTemplateResponse) error
	// 同城配送模版列表
	List(context.Context, *LocalFeeTemplateRequest, *LocalFeeTemplateResponse) error
}

func RegisterLocalFeeTemplateServiceHandler(s server.Server, hdlr LocalFeeTemplateServiceHandler, opts ...server.HandlerOption) error {
	type localFeeTemplateService interface {
		Create(ctx context.Context, in *LocalFeeTemplate, out *LocalFeeTemplateResponse) error
		Update(ctx context.Context, in *LocalFeeTemplate, out *LocalFeeTemplateResponse) error
		Delete(ctx context.Context, in *LocalFeeTemplate, out *LocalFeeTemplateResponse) error
		Get(ctx context.Context, in *LocalFeeTemplate, out *LocalFeeTemplateResponse) error
		Search(ctx context.Context, in *LocalFeeTemplateRequest, out *LocalFeeTemplateResponse) error
		List(ctx context.Context, in *LocalFeeTemplateRequest, out *LocalFeeTemplateResponse) error
	}
	type LocalFeeTemplateService struct {
		localFeeTemplateService
	}
	h := &localFeeTemplateServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LocalFeeTemplateService{h}, opts...))
}

type localFeeTemplateServiceHandler struct {
	LocalFeeTemplateServiceHandler
}

func (h *localFeeTemplateServiceHandler) Create(ctx context.Context, in *LocalFeeTemplate, out *LocalFeeTemplateResponse) error {
	return h.LocalFeeTemplateServiceHandler.Create(ctx, in, out)
}

func (h *localFeeTemplateServiceHandler) Update(ctx context.Context, in *LocalFeeTemplate, out *LocalFeeTemplateResponse) error {
	return h.LocalFeeTemplateServiceHandler.Update(ctx, in, out)
}

func (h *localFeeTemplateServiceHandler) Delete(ctx context.Context, in *LocalFeeTemplate, out *LocalFeeTemplateResponse) error {
	return h.LocalFeeTemplateServiceHandler.Delete(ctx, in, out)
}

func (h *localFeeTemplateServiceHandler) Get(ctx context.Context, in *LocalFeeTemplate, out *LocalFeeTemplateResponse) error {
	return h.LocalFeeTemplateServiceHandler.Get(ctx, in, out)
}

func (h *localFeeTemplateServiceHandler) Search(ctx context.Context, in *LocalFeeTemplateRequest, out *LocalFeeTemplateResponse) error {
	return h.LocalFeeTemplateServiceHandler.Search(ctx, in, out)
}

func (h *localFeeTemplateServiceHandler) List(ctx context.Context, in *LocalFeeTemplateRequest, out *LocalFeeTemplateResponse) error {
	return h.LocalFeeTemplateServiceHandler.List(ctx, in, out)
}
