// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mentionAddrService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MentionAddrService service

func NewMentionAddrServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MentionAddrService service

type MentionAddrService interface {
	Create(ctx context.Context, in *MentionAddr, opts ...client.CallOption) (*MentionAddrResponse, error)
	Update(ctx context.Context, in *MentionAddr, opts ...client.CallOption) (*MentionAddrResponse, error)
	Delete(ctx context.Context, in *MentionAddrRequest, opts ...client.CallOption) (*MentionAddrResponse, error)
	Get(ctx context.Context, in *MentionAddr, opts ...client.CallOption) (*MentionAddrResponse, error)
	Search(ctx context.Context, in *MentionAddrRequest, opts ...client.CallOption) (*MentionAddrResponse, error)
	List(ctx context.Context, in *MentionAddrRequest, opts ...client.CallOption) (*MentionAddrResponse, error)
	// 获取距离用户最近的自提点
	Nearest(ctx context.Context, in *MentionAddrRequest, opts ...client.CallOption) (*MentionAddrResponse, error)
}

type mentionAddrService struct {
	c    client.Client
	name string
}

func NewMentionAddrService(name string, c client.Client) MentionAddrService {
	return &mentionAddrService{
		c:    c,
		name: name,
	}
}

func (c *mentionAddrService) Create(ctx context.Context, in *MentionAddr, opts ...client.CallOption) (*MentionAddrResponse, error) {
	req := c.c.NewRequest(c.name, "MentionAddrService.Create", in)
	out := new(MentionAddrResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentionAddrService) Update(ctx context.Context, in *MentionAddr, opts ...client.CallOption) (*MentionAddrResponse, error) {
	req := c.c.NewRequest(c.name, "MentionAddrService.Update", in)
	out := new(MentionAddrResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentionAddrService) Delete(ctx context.Context, in *MentionAddrRequest, opts ...client.CallOption) (*MentionAddrResponse, error) {
	req := c.c.NewRequest(c.name, "MentionAddrService.Delete", in)
	out := new(MentionAddrResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentionAddrService) Get(ctx context.Context, in *MentionAddr, opts ...client.CallOption) (*MentionAddrResponse, error) {
	req := c.c.NewRequest(c.name, "MentionAddrService.Get", in)
	out := new(MentionAddrResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentionAddrService) Search(ctx context.Context, in *MentionAddrRequest, opts ...client.CallOption) (*MentionAddrResponse, error) {
	req := c.c.NewRequest(c.name, "MentionAddrService.Search", in)
	out := new(MentionAddrResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentionAddrService) List(ctx context.Context, in *MentionAddrRequest, opts ...client.CallOption) (*MentionAddrResponse, error) {
	req := c.c.NewRequest(c.name, "MentionAddrService.List", in)
	out := new(MentionAddrResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mentionAddrService) Nearest(ctx context.Context, in *MentionAddrRequest, opts ...client.CallOption) (*MentionAddrResponse, error) {
	req := c.c.NewRequest(c.name, "MentionAddrService.Nearest", in)
	out := new(MentionAddrResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MentionAddrService service

type MentionAddrServiceHandler interface {
	Create(context.Context, *MentionAddr, *MentionAddrResponse) error
	Update(context.Context, *MentionAddr, *MentionAddrResponse) error
	Delete(context.Context, *MentionAddrRequest, *MentionAddrResponse) error
	Get(context.Context, *MentionAddr, *MentionAddrResponse) error
	Search(context.Context, *MentionAddrRequest, *MentionAddrResponse) error
	List(context.Context, *MentionAddrRequest, *MentionAddrResponse) error
	// 获取距离用户最近的自提点
	Nearest(context.Context, *MentionAddrRequest, *MentionAddrResponse) error
}

func RegisterMentionAddrServiceHandler(s server.Server, hdlr MentionAddrServiceHandler, opts ...server.HandlerOption) error {
	type mentionAddrService interface {
		Create(ctx context.Context, in *MentionAddr, out *MentionAddrResponse) error
		Update(ctx context.Context, in *MentionAddr, out *MentionAddrResponse) error
		Delete(ctx context.Context, in *MentionAddrRequest, out *MentionAddrResponse) error
		Get(ctx context.Context, in *MentionAddr, out *MentionAddrResponse) error
		Search(ctx context.Context, in *MentionAddrRequest, out *MentionAddrResponse) error
		List(ctx context.Context, in *MentionAddrRequest, out *MentionAddrResponse) error
		Nearest(ctx context.Context, in *MentionAddrRequest, out *MentionAddrResponse) error
	}
	type MentionAddrService struct {
		mentionAddrService
	}
	h := &mentionAddrServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MentionAddrService{h}, opts...))
}

type mentionAddrServiceHandler struct {
	MentionAddrServiceHandler
}

func (h *mentionAddrServiceHandler) Create(ctx context.Context, in *MentionAddr, out *MentionAddrResponse) error {
	return h.MentionAddrServiceHandler.Create(ctx, in, out)
}

func (h *mentionAddrServiceHandler) Update(ctx context.Context, in *MentionAddr, out *MentionAddrResponse) error {
	return h.MentionAddrServiceHandler.Update(ctx, in, out)
}

func (h *mentionAddrServiceHandler) Delete(ctx context.Context, in *MentionAddrRequest, out *MentionAddrResponse) error {
	return h.MentionAddrServiceHandler.Delete(ctx, in, out)
}

func (h *mentionAddrServiceHandler) Get(ctx context.Context, in *MentionAddr, out *MentionAddrResponse) error {
	return h.MentionAddrServiceHandler.Get(ctx, in, out)
}

func (h *mentionAddrServiceHandler) Search(ctx context.Context, in *MentionAddrRequest, out *MentionAddrResponse) error {
	return h.MentionAddrServiceHandler.Search(ctx, in, out)
}

func (h *mentionAddrServiceHandler) List(ctx context.Context, in *MentionAddrRequest, out *MentionAddrResponse) error {
	return h.MentionAddrServiceHandler.List(ctx, in, out)
}

func (h *mentionAddrServiceHandler) Nearest(ctx context.Context, in *MentionAddrRequest, out *MentionAddrResponse) error {
	return h.MentionAddrServiceHandler.Nearest(ctx, in, out)
}
