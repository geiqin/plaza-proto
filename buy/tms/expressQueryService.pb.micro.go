// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: expressQueryService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ExpressQueryService service

func NewExpressQueryServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ExpressQueryService service

type ExpressQueryService interface {
	//物流信息详情
	Detail(ctx context.Context, in *ExpressQuery, opts ...client.CallOption) (*ExpressQueryResponse, error)
	//查询物流信息
	Search(ctx context.Context, in *ExpressQueryRequest, opts ...client.CallOption) (*ExpressQueryResponse, error)
	//查询物流轨迹
	Trace(ctx context.Context, in *ExpressQueryTraceRequest, opts ...client.CallOption) (*ExpressQueryResponse, error)
}

type expressQueryService struct {
	c    client.Client
	name string
}

func NewExpressQueryService(name string, c client.Client) ExpressQueryService {
	return &expressQueryService{
		c:    c,
		name: name,
	}
}

func (c *expressQueryService) Detail(ctx context.Context, in *ExpressQuery, opts ...client.CallOption) (*ExpressQueryResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressQueryService.Detail", in)
	out := new(ExpressQueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressQueryService) Search(ctx context.Context, in *ExpressQueryRequest, opts ...client.CallOption) (*ExpressQueryResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressQueryService.Search", in)
	out := new(ExpressQueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expressQueryService) Trace(ctx context.Context, in *ExpressQueryTraceRequest, opts ...client.CallOption) (*ExpressQueryResponse, error) {
	req := c.c.NewRequest(c.name, "ExpressQueryService.Trace", in)
	out := new(ExpressQueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExpressQueryService service

type ExpressQueryServiceHandler interface {
	//物流信息详情
	Detail(context.Context, *ExpressQuery, *ExpressQueryResponse) error
	//查询物流信息
	Search(context.Context, *ExpressQueryRequest, *ExpressQueryResponse) error
	//查询物流轨迹
	Trace(context.Context, *ExpressQueryTraceRequest, *ExpressQueryResponse) error
}

func RegisterExpressQueryServiceHandler(s server.Server, hdlr ExpressQueryServiceHandler, opts ...server.HandlerOption) error {
	type expressQueryService interface {
		Detail(ctx context.Context, in *ExpressQuery, out *ExpressQueryResponse) error
		Search(ctx context.Context, in *ExpressQueryRequest, out *ExpressQueryResponse) error
		Trace(ctx context.Context, in *ExpressQueryTraceRequest, out *ExpressQueryResponse) error
	}
	type ExpressQueryService struct {
		expressQueryService
	}
	h := &expressQueryServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ExpressQueryService{h}, opts...))
}

type expressQueryServiceHandler struct {
	ExpressQueryServiceHandler
}

func (h *expressQueryServiceHandler) Detail(ctx context.Context, in *ExpressQuery, out *ExpressQueryResponse) error {
	return h.ExpressQueryServiceHandler.Detail(ctx, in, out)
}

func (h *expressQueryServiceHandler) Search(ctx context.Context, in *ExpressQueryRequest, out *ExpressQueryResponse) error {
	return h.ExpressQueryServiceHandler.Search(ctx, in, out)
}

func (h *expressQueryServiceHandler) Trace(ctx context.Context, in *ExpressQueryTraceRequest, out *ExpressQueryResponse) error {
	return h.ExpressQueryServiceHandler.Trace(ctx, in, out)
}
