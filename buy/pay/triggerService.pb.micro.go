// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: triggerService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TriggerService service

func NewTriggerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TriggerService service

type TriggerService interface {
	//推送支付对账
	PushCharge(ctx context.Context, in *TriggerRequest, opts ...client.CallOption) (*TriggerResponse, error)
	//推送退款对账
	PushRefund(ctx context.Context, in *TriggerRequest, opts ...client.CallOption) (*TriggerResponse, error)
	//推送转账对账
	PushTransfer(ctx context.Context, in *TriggerRequest, opts ...client.CallOption) (*TriggerResponse, error)
	//拉取支付凭证对账（向第三方发起对账）
	PullCharge(ctx context.Context, in *TriggerRequest, opts ...client.CallOption) (*TriggerResponse, error)
	//拉取退款凭证对账（向第三方发起对账）
	PullRefund(ctx context.Context, in *TriggerRequest, opts ...client.CallOption) (*TriggerResponse, error)
}

type triggerService struct {
	c    client.Client
	name string
}

func NewTriggerService(name string, c client.Client) TriggerService {
	return &triggerService{
		c:    c,
		name: name,
	}
}

func (c *triggerService) PushCharge(ctx context.Context, in *TriggerRequest, opts ...client.CallOption) (*TriggerResponse, error) {
	req := c.c.NewRequest(c.name, "TriggerService.PushCharge", in)
	out := new(TriggerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerService) PushRefund(ctx context.Context, in *TriggerRequest, opts ...client.CallOption) (*TriggerResponse, error) {
	req := c.c.NewRequest(c.name, "TriggerService.PushRefund", in)
	out := new(TriggerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerService) PushTransfer(ctx context.Context, in *TriggerRequest, opts ...client.CallOption) (*TriggerResponse, error) {
	req := c.c.NewRequest(c.name, "TriggerService.PushTransfer", in)
	out := new(TriggerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerService) PullCharge(ctx context.Context, in *TriggerRequest, opts ...client.CallOption) (*TriggerResponse, error) {
	req := c.c.NewRequest(c.name, "TriggerService.PullCharge", in)
	out := new(TriggerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerService) PullRefund(ctx context.Context, in *TriggerRequest, opts ...client.CallOption) (*TriggerResponse, error) {
	req := c.c.NewRequest(c.name, "TriggerService.PullRefund", in)
	out := new(TriggerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TriggerService service

type TriggerServiceHandler interface {
	//推送支付对账
	PushCharge(context.Context, *TriggerRequest, *TriggerResponse) error
	//推送退款对账
	PushRefund(context.Context, *TriggerRequest, *TriggerResponse) error
	//推送转账对账
	PushTransfer(context.Context, *TriggerRequest, *TriggerResponse) error
	//拉取支付凭证对账（向第三方发起对账）
	PullCharge(context.Context, *TriggerRequest, *TriggerResponse) error
	//拉取退款凭证对账（向第三方发起对账）
	PullRefund(context.Context, *TriggerRequest, *TriggerResponse) error
}

func RegisterTriggerServiceHandler(s server.Server, hdlr TriggerServiceHandler, opts ...server.HandlerOption) error {
	type triggerService interface {
		PushCharge(ctx context.Context, in *TriggerRequest, out *TriggerResponse) error
		PushRefund(ctx context.Context, in *TriggerRequest, out *TriggerResponse) error
		PushTransfer(ctx context.Context, in *TriggerRequest, out *TriggerResponse) error
		PullCharge(ctx context.Context, in *TriggerRequest, out *TriggerResponse) error
		PullRefund(ctx context.Context, in *TriggerRequest, out *TriggerResponse) error
	}
	type TriggerService struct {
		triggerService
	}
	h := &triggerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TriggerService{h}, opts...))
}

type triggerServiceHandler struct {
	TriggerServiceHandler
}

func (h *triggerServiceHandler) PushCharge(ctx context.Context, in *TriggerRequest, out *TriggerResponse) error {
	return h.TriggerServiceHandler.PushCharge(ctx, in, out)
}

func (h *triggerServiceHandler) PushRefund(ctx context.Context, in *TriggerRequest, out *TriggerResponse) error {
	return h.TriggerServiceHandler.PushRefund(ctx, in, out)
}

func (h *triggerServiceHandler) PushTransfer(ctx context.Context, in *TriggerRequest, out *TriggerResponse) error {
	return h.TriggerServiceHandler.PushTransfer(ctx, in, out)
}

func (h *triggerServiceHandler) PullCharge(ctx context.Context, in *TriggerRequest, out *TriggerResponse) error {
	return h.TriggerServiceHandler.PullCharge(ctx, in, out)
}

func (h *triggerServiceHandler) PullRefund(ctx context.Context, in *TriggerRequest, out *TriggerResponse) error {
	return h.TriggerServiceHandler.PullRefund(ctx, in, out)
}
