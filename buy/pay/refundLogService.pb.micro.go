// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: refundLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RefundLogService service

func NewRefundLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RefundLogService service

type RefundLogService interface {
	//创建退款
	Create(ctx context.Context, in *RefundLog, opts ...client.CallOption) (*RefundLogResponse, error)
	//删除退款
	Delete(ctx context.Context, in *RefundLog, opts ...client.CallOption) (*RefundLogResponse, error)
	//获得退款信息
	Get(ctx context.Context, in *RefundLog, opts ...client.CallOption) (*RefundLogResponse, error)
	//查询退款
	Search(ctx context.Context, in *RefundLogRequest, opts ...client.CallOption) (*RefundLogResponse, error)
}

type refundLogService struct {
	c    client.Client
	name string
}

func NewRefundLogService(name string, c client.Client) RefundLogService {
	return &refundLogService{
		c:    c,
		name: name,
	}
}

func (c *refundLogService) Create(ctx context.Context, in *RefundLog, opts ...client.CallOption) (*RefundLogResponse, error) {
	req := c.c.NewRequest(c.name, "RefundLogService.Create", in)
	out := new(RefundLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundLogService) Delete(ctx context.Context, in *RefundLog, opts ...client.CallOption) (*RefundLogResponse, error) {
	req := c.c.NewRequest(c.name, "RefundLogService.Delete", in)
	out := new(RefundLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundLogService) Get(ctx context.Context, in *RefundLog, opts ...client.CallOption) (*RefundLogResponse, error) {
	req := c.c.NewRequest(c.name, "RefundLogService.Get", in)
	out := new(RefundLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundLogService) Search(ctx context.Context, in *RefundLogRequest, opts ...client.CallOption) (*RefundLogResponse, error) {
	req := c.c.NewRequest(c.name, "RefundLogService.Search", in)
	out := new(RefundLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RefundLogService service

type RefundLogServiceHandler interface {
	//创建退款
	Create(context.Context, *RefundLog, *RefundLogResponse) error
	//删除退款
	Delete(context.Context, *RefundLog, *RefundLogResponse) error
	//获得退款信息
	Get(context.Context, *RefundLog, *RefundLogResponse) error
	//查询退款
	Search(context.Context, *RefundLogRequest, *RefundLogResponse) error
}

func RegisterRefundLogServiceHandler(s server.Server, hdlr RefundLogServiceHandler, opts ...server.HandlerOption) error {
	type refundLogService interface {
		Create(ctx context.Context, in *RefundLog, out *RefundLogResponse) error
		Delete(ctx context.Context, in *RefundLog, out *RefundLogResponse) error
		Get(ctx context.Context, in *RefundLog, out *RefundLogResponse) error
		Search(ctx context.Context, in *RefundLogRequest, out *RefundLogResponse) error
	}
	type RefundLogService struct {
		refundLogService
	}
	h := &refundLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RefundLogService{h}, opts...))
}

type refundLogServiceHandler struct {
	RefundLogServiceHandler
}

func (h *refundLogServiceHandler) Create(ctx context.Context, in *RefundLog, out *RefundLogResponse) error {
	return h.RefundLogServiceHandler.Create(ctx, in, out)
}

func (h *refundLogServiceHandler) Delete(ctx context.Context, in *RefundLog, out *RefundLogResponse) error {
	return h.RefundLogServiceHandler.Delete(ctx, in, out)
}

func (h *refundLogServiceHandler) Get(ctx context.Context, in *RefundLog, out *RefundLogResponse) error {
	return h.RefundLogServiceHandler.Get(ctx, in, out)
}

func (h *refundLogServiceHandler) Search(ctx context.Context, in *RefundLogRequest, out *RefundLogResponse) error {
	return h.RefundLogServiceHandler.Search(ctx, in, out)
}
