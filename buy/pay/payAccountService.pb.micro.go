// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: payAccountService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PayAccountService service

func NewPayAccountServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PayAccountService service

type PayAccountService interface {
	Create(ctx context.Context, in *PayAccount, opts ...client.CallOption) (*PayAccountResponse, error)
	Update(ctx context.Context, in *PayAccount, opts ...client.CallOption) (*PayAccountResponse, error)
	Delete(ctx context.Context, in *PayAccount, opts ...client.CallOption) (*PayAccountResponse, error)
	Get(ctx context.Context, in *PayAccount, opts ...client.CallOption) (*PayAccountResponse, error)
	List(ctx context.Context, in *PayAccountRequest, opts ...client.CallOption) (*PayAccountResponse, error)
	Search(ctx context.Context, in *PayAccountRequest, opts ...client.CallOption) (*PayAccountResponse, error)
}

type payAccountService struct {
	c    client.Client
	name string
}

func NewPayAccountService(name string, c client.Client) PayAccountService {
	return &payAccountService{
		c:    c,
		name: name,
	}
}

func (c *payAccountService) Create(ctx context.Context, in *PayAccount, opts ...client.CallOption) (*PayAccountResponse, error) {
	req := c.c.NewRequest(c.name, "PayAccountService.Create", in)
	out := new(PayAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payAccountService) Update(ctx context.Context, in *PayAccount, opts ...client.CallOption) (*PayAccountResponse, error) {
	req := c.c.NewRequest(c.name, "PayAccountService.Update", in)
	out := new(PayAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payAccountService) Delete(ctx context.Context, in *PayAccount, opts ...client.CallOption) (*PayAccountResponse, error) {
	req := c.c.NewRequest(c.name, "PayAccountService.Delete", in)
	out := new(PayAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payAccountService) Get(ctx context.Context, in *PayAccount, opts ...client.CallOption) (*PayAccountResponse, error) {
	req := c.c.NewRequest(c.name, "PayAccountService.Get", in)
	out := new(PayAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payAccountService) List(ctx context.Context, in *PayAccountRequest, opts ...client.CallOption) (*PayAccountResponse, error) {
	req := c.c.NewRequest(c.name, "PayAccountService.List", in)
	out := new(PayAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payAccountService) Search(ctx context.Context, in *PayAccountRequest, opts ...client.CallOption) (*PayAccountResponse, error) {
	req := c.c.NewRequest(c.name, "PayAccountService.Search", in)
	out := new(PayAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PayAccountService service

type PayAccountServiceHandler interface {
	Create(context.Context, *PayAccount, *PayAccountResponse) error
	Update(context.Context, *PayAccount, *PayAccountResponse) error
	Delete(context.Context, *PayAccount, *PayAccountResponse) error
	Get(context.Context, *PayAccount, *PayAccountResponse) error
	List(context.Context, *PayAccountRequest, *PayAccountResponse) error
	Search(context.Context, *PayAccountRequest, *PayAccountResponse) error
}

func RegisterPayAccountServiceHandler(s server.Server, hdlr PayAccountServiceHandler, opts ...server.HandlerOption) error {
	type payAccountService interface {
		Create(ctx context.Context, in *PayAccount, out *PayAccountResponse) error
		Update(ctx context.Context, in *PayAccount, out *PayAccountResponse) error
		Delete(ctx context.Context, in *PayAccount, out *PayAccountResponse) error
		Get(ctx context.Context, in *PayAccount, out *PayAccountResponse) error
		List(ctx context.Context, in *PayAccountRequest, out *PayAccountResponse) error
		Search(ctx context.Context, in *PayAccountRequest, out *PayAccountResponse) error
	}
	type PayAccountService struct {
		payAccountService
	}
	h := &payAccountServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PayAccountService{h}, opts...))
}

type payAccountServiceHandler struct {
	PayAccountServiceHandler
}

func (h *payAccountServiceHandler) Create(ctx context.Context, in *PayAccount, out *PayAccountResponse) error {
	return h.PayAccountServiceHandler.Create(ctx, in, out)
}

func (h *payAccountServiceHandler) Update(ctx context.Context, in *PayAccount, out *PayAccountResponse) error {
	return h.PayAccountServiceHandler.Update(ctx, in, out)
}

func (h *payAccountServiceHandler) Delete(ctx context.Context, in *PayAccount, out *PayAccountResponse) error {
	return h.PayAccountServiceHandler.Delete(ctx, in, out)
}

func (h *payAccountServiceHandler) Get(ctx context.Context, in *PayAccount, out *PayAccountResponse) error {
	return h.PayAccountServiceHandler.Get(ctx, in, out)
}

func (h *payAccountServiceHandler) List(ctx context.Context, in *PayAccountRequest, out *PayAccountResponse) error {
	return h.PayAccountServiceHandler.List(ctx, in, out)
}

func (h *payAccountServiceHandler) Search(ctx context.Context, in *PayAccountRequest, out *PayAccountResponse) error {
	return h.PayAccountServiceHandler.Search(ctx, in, out)
}
