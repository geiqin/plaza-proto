// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: payRequestLogService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PayRequestLogService service

func NewPayRequestLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PayRequestLogService service

type PayRequestLogService interface {
	//获得支付日志
	Get(ctx context.Context, in *PayRequestLog, opts ...client.CallOption) (*PayRequestLogResponse, error)
	//查询支付日志
	Search(ctx context.Context, in *PayRequestLogRequest, opts ...client.CallOption) (*PayRequestLogResponse, error)
}

type payRequestLogService struct {
	c    client.Client
	name string
}

func NewPayRequestLogService(name string, c client.Client) PayRequestLogService {
	return &payRequestLogService{
		c:    c,
		name: name,
	}
}

func (c *payRequestLogService) Get(ctx context.Context, in *PayRequestLog, opts ...client.CallOption) (*PayRequestLogResponse, error) {
	req := c.c.NewRequest(c.name, "PayRequestLogService.Get", in)
	out := new(PayRequestLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payRequestLogService) Search(ctx context.Context, in *PayRequestLogRequest, opts ...client.CallOption) (*PayRequestLogResponse, error) {
	req := c.c.NewRequest(c.name, "PayRequestLogService.Search", in)
	out := new(PayRequestLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PayRequestLogService service

type PayRequestLogServiceHandler interface {
	//获得支付日志
	Get(context.Context, *PayRequestLog, *PayRequestLogResponse) error
	//查询支付日志
	Search(context.Context, *PayRequestLogRequest, *PayRequestLogResponse) error
}

func RegisterPayRequestLogServiceHandler(s server.Server, hdlr PayRequestLogServiceHandler, opts ...server.HandlerOption) error {
	type payRequestLogService interface {
		Get(ctx context.Context, in *PayRequestLog, out *PayRequestLogResponse) error
		Search(ctx context.Context, in *PayRequestLogRequest, out *PayRequestLogResponse) error
	}
	type PayRequestLogService struct {
		payRequestLogService
	}
	h := &payRequestLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PayRequestLogService{h}, opts...))
}

type payRequestLogServiceHandler struct {
	PayRequestLogServiceHandler
}

func (h *payRequestLogServiceHandler) Get(ctx context.Context, in *PayRequestLog, out *PayRequestLogResponse) error {
	return h.PayRequestLogServiceHandler.Get(ctx, in, out)
}

func (h *payRequestLogServiceHandler) Search(ctx context.Context, in *PayRequestLogRequest, out *PayRequestLogResponse) error {
	return h.PayRequestLogServiceHandler.Search(ctx, in, out)
}
