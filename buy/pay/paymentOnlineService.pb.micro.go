// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: paymentOnlineService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PaymentOnlineService service

func NewPaymentOnlineServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PaymentOnlineService service

type PaymentOnlineService interface {
	// 支付方式新增
	Create(ctx context.Context, in *PaymentOnline, opts ...client.CallOption) (*PaymentOnlineResponse, error)
	// 支付方式修改
	Update(ctx context.Context, in *PaymentOnline, opts ...client.CallOption) (*PaymentOnlineResponse, error)
	// 支付方式删除
	Delete(ctx context.Context, in *PaymentOnline, opts ...client.CallOption) (*PaymentOnlineResponse, error)
	// 支付方式获取
	Get(ctx context.Context, in *PaymentOnline, opts ...client.CallOption) (*PaymentOnlineResponse, error)
	// 支付方式查询
	Search(ctx context.Context, in *PaymentOnlineRequest, opts ...client.CallOption) (*PaymentOnlineResponse, error)
	// 支付方式列表
	List(ctx context.Context, in *PaymentOnlineRequest, opts ...client.CallOption) (*PaymentOnlineResponse, error)
}

type paymentOnlineService struct {
	c    client.Client
	name string
}

func NewPaymentOnlineService(name string, c client.Client) PaymentOnlineService {
	return &paymentOnlineService{
		c:    c,
		name: name,
	}
}

func (c *paymentOnlineService) Create(ctx context.Context, in *PaymentOnline, opts ...client.CallOption) (*PaymentOnlineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOnlineService.Create", in)
	out := new(PaymentOnlineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentOnlineService) Update(ctx context.Context, in *PaymentOnline, opts ...client.CallOption) (*PaymentOnlineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOnlineService.Update", in)
	out := new(PaymentOnlineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentOnlineService) Delete(ctx context.Context, in *PaymentOnline, opts ...client.CallOption) (*PaymentOnlineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOnlineService.Delete", in)
	out := new(PaymentOnlineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentOnlineService) Get(ctx context.Context, in *PaymentOnline, opts ...client.CallOption) (*PaymentOnlineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOnlineService.Get", in)
	out := new(PaymentOnlineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentOnlineService) Search(ctx context.Context, in *PaymentOnlineRequest, opts ...client.CallOption) (*PaymentOnlineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOnlineService.Search", in)
	out := new(PaymentOnlineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentOnlineService) List(ctx context.Context, in *PaymentOnlineRequest, opts ...client.CallOption) (*PaymentOnlineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOnlineService.List", in)
	out := new(PaymentOnlineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentOnlineService service

type PaymentOnlineServiceHandler interface {
	// 支付方式新增
	Create(context.Context, *PaymentOnline, *PaymentOnlineResponse) error
	// 支付方式修改
	Update(context.Context, *PaymentOnline, *PaymentOnlineResponse) error
	// 支付方式删除
	Delete(context.Context, *PaymentOnline, *PaymentOnlineResponse) error
	// 支付方式获取
	Get(context.Context, *PaymentOnline, *PaymentOnlineResponse) error
	// 支付方式查询
	Search(context.Context, *PaymentOnlineRequest, *PaymentOnlineResponse) error
	// 支付方式列表
	List(context.Context, *PaymentOnlineRequest, *PaymentOnlineResponse) error
}

func RegisterPaymentOnlineServiceHandler(s server.Server, hdlr PaymentOnlineServiceHandler, opts ...server.HandlerOption) error {
	type paymentOnlineService interface {
		Create(ctx context.Context, in *PaymentOnline, out *PaymentOnlineResponse) error
		Update(ctx context.Context, in *PaymentOnline, out *PaymentOnlineResponse) error
		Delete(ctx context.Context, in *PaymentOnline, out *PaymentOnlineResponse) error
		Get(ctx context.Context, in *PaymentOnline, out *PaymentOnlineResponse) error
		Search(ctx context.Context, in *PaymentOnlineRequest, out *PaymentOnlineResponse) error
		List(ctx context.Context, in *PaymentOnlineRequest, out *PaymentOnlineResponse) error
	}
	type PaymentOnlineService struct {
		paymentOnlineService
	}
	h := &paymentOnlineServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PaymentOnlineService{h}, opts...))
}

type paymentOnlineServiceHandler struct {
	PaymentOnlineServiceHandler
}

func (h *paymentOnlineServiceHandler) Create(ctx context.Context, in *PaymentOnline, out *PaymentOnlineResponse) error {
	return h.PaymentOnlineServiceHandler.Create(ctx, in, out)
}

func (h *paymentOnlineServiceHandler) Update(ctx context.Context, in *PaymentOnline, out *PaymentOnlineResponse) error {
	return h.PaymentOnlineServiceHandler.Update(ctx, in, out)
}

func (h *paymentOnlineServiceHandler) Delete(ctx context.Context, in *PaymentOnline, out *PaymentOnlineResponse) error {
	return h.PaymentOnlineServiceHandler.Delete(ctx, in, out)
}

func (h *paymentOnlineServiceHandler) Get(ctx context.Context, in *PaymentOnline, out *PaymentOnlineResponse) error {
	return h.PaymentOnlineServiceHandler.Get(ctx, in, out)
}

func (h *paymentOnlineServiceHandler) Search(ctx context.Context, in *PaymentOnlineRequest, out *PaymentOnlineResponse) error {
	return h.PaymentOnlineServiceHandler.Search(ctx, in, out)
}

func (h *paymentOnlineServiceHandler) List(ctx context.Context, in *PaymentOnlineRequest, out *PaymentOnlineResponse) error {
	return h.PaymentOnlineServiceHandler.List(ctx, in, out)
}
