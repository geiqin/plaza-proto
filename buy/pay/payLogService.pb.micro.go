// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: payLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PayLogService service

func NewPayLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PayLogService service

type PayLogService interface {
	//支付日志添加
	Insert(ctx context.Context, in *PayLog, opts ...client.CallOption) (*PayLogResponse, error)
	//支付日志更新
	Success(ctx context.Context, in *PayLog, opts ...client.CallOption) (*PayLogResponse, error)
	//支付日志关闭
	Close(ctx context.Context, in *PayLog, opts ...client.CallOption) (*PayLogResponse, error)
	//支付日志类型列表
	TypeList(ctx context.Context, in *PayLog, opts ...client.CallOption) (*PayLogResponse, error)
	//支付日志详情
	Detail(ctx context.Context, in *PayLogRequest, opts ...client.CallOption) (*PayLogResponse, error)
	//支付日志列表
	List(ctx context.Context, in *PayLogRequest, opts ...client.CallOption) (*PayLogResponse, error)
	//支付日志查询
	Search(ctx context.Context, in *PayLogRequest, opts ...client.CallOption) (*PayLogResponse, error)
}

type payLogService struct {
	c    client.Client
	name string
}

func NewPayLogService(name string, c client.Client) PayLogService {
	return &payLogService{
		c:    c,
		name: name,
	}
}

func (c *payLogService) Insert(ctx context.Context, in *PayLog, opts ...client.CallOption) (*PayLogResponse, error) {
	req := c.c.NewRequest(c.name, "PayLogService.Insert", in)
	out := new(PayLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payLogService) Success(ctx context.Context, in *PayLog, opts ...client.CallOption) (*PayLogResponse, error) {
	req := c.c.NewRequest(c.name, "PayLogService.Success", in)
	out := new(PayLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payLogService) Close(ctx context.Context, in *PayLog, opts ...client.CallOption) (*PayLogResponse, error) {
	req := c.c.NewRequest(c.name, "PayLogService.Close", in)
	out := new(PayLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payLogService) TypeList(ctx context.Context, in *PayLog, opts ...client.CallOption) (*PayLogResponse, error) {
	req := c.c.NewRequest(c.name, "PayLogService.TypeList", in)
	out := new(PayLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payLogService) Detail(ctx context.Context, in *PayLogRequest, opts ...client.CallOption) (*PayLogResponse, error) {
	req := c.c.NewRequest(c.name, "PayLogService.Detail", in)
	out := new(PayLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payLogService) List(ctx context.Context, in *PayLogRequest, opts ...client.CallOption) (*PayLogResponse, error) {
	req := c.c.NewRequest(c.name, "PayLogService.List", in)
	out := new(PayLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payLogService) Search(ctx context.Context, in *PayLogRequest, opts ...client.CallOption) (*PayLogResponse, error) {
	req := c.c.NewRequest(c.name, "PayLogService.Search", in)
	out := new(PayLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PayLogService service

type PayLogServiceHandler interface {
	//支付日志添加
	Insert(context.Context, *PayLog, *PayLogResponse) error
	//支付日志更新
	Success(context.Context, *PayLog, *PayLogResponse) error
	//支付日志关闭
	Close(context.Context, *PayLog, *PayLogResponse) error
	//支付日志类型列表
	TypeList(context.Context, *PayLog, *PayLogResponse) error
	//支付日志详情
	Detail(context.Context, *PayLogRequest, *PayLogResponse) error
	//支付日志列表
	List(context.Context, *PayLogRequest, *PayLogResponse) error
	//支付日志查询
	Search(context.Context, *PayLogRequest, *PayLogResponse) error
}

func RegisterPayLogServiceHandler(s server.Server, hdlr PayLogServiceHandler, opts ...server.HandlerOption) error {
	type payLogService interface {
		Insert(ctx context.Context, in *PayLog, out *PayLogResponse) error
		Success(ctx context.Context, in *PayLog, out *PayLogResponse) error
		Close(ctx context.Context, in *PayLog, out *PayLogResponse) error
		TypeList(ctx context.Context, in *PayLog, out *PayLogResponse) error
		Detail(ctx context.Context, in *PayLogRequest, out *PayLogResponse) error
		List(ctx context.Context, in *PayLogRequest, out *PayLogResponse) error
		Search(ctx context.Context, in *PayLogRequest, out *PayLogResponse) error
	}
	type PayLogService struct {
		payLogService
	}
	h := &payLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PayLogService{h}, opts...))
}

type payLogServiceHandler struct {
	PayLogServiceHandler
}

func (h *payLogServiceHandler) Insert(ctx context.Context, in *PayLog, out *PayLogResponse) error {
	return h.PayLogServiceHandler.Insert(ctx, in, out)
}

func (h *payLogServiceHandler) Success(ctx context.Context, in *PayLog, out *PayLogResponse) error {
	return h.PayLogServiceHandler.Success(ctx, in, out)
}

func (h *payLogServiceHandler) Close(ctx context.Context, in *PayLog, out *PayLogResponse) error {
	return h.PayLogServiceHandler.Close(ctx, in, out)
}

func (h *payLogServiceHandler) TypeList(ctx context.Context, in *PayLog, out *PayLogResponse) error {
	return h.PayLogServiceHandler.TypeList(ctx, in, out)
}

func (h *payLogServiceHandler) Detail(ctx context.Context, in *PayLogRequest, out *PayLogResponse) error {
	return h.PayLogServiceHandler.Detail(ctx, in, out)
}

func (h *payLogServiceHandler) List(ctx context.Context, in *PayLogRequest, out *PayLogResponse) error {
	return h.PayLogServiceHandler.List(ctx, in, out)
}

func (h *payLogServiceHandler) Search(ctx context.Context, in *PayLogRequest, out *PayLogResponse) error {
	return h.PayLogServiceHandler.Search(ctx, in, out)
}
