// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: paymentOfflineService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PaymentOfflineService service

func NewPaymentOfflineServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PaymentOfflineService service

type PaymentOfflineService interface {
	// 线下支付新增
	Create(ctx context.Context, in *PaymentOffline, opts ...client.CallOption) (*PaymentOfflineResponse, error)
	// 线下支付修改
	Update(ctx context.Context, in *PaymentOffline, opts ...client.CallOption) (*PaymentOfflineResponse, error)
	// 线下支付删除
	Delete(ctx context.Context, in *PaymentOffline, opts ...client.CallOption) (*PaymentOfflineResponse, error)
	// 线下支付获取
	Get(ctx context.Context, in *PaymentOffline, opts ...client.CallOption) (*PaymentOfflineResponse, error)
	// 线下支付查询
	Search(ctx context.Context, in *PaymentOfflineRequest, opts ...client.CallOption) (*PaymentOfflineResponse, error)
	// 线下支付列表
	List(ctx context.Context, in *PaymentOfflineRequest, opts ...client.CallOption) (*PaymentOfflineResponse, error)
}

type paymentOfflineService struct {
	c    client.Client
	name string
}

func NewPaymentOfflineService(name string, c client.Client) PaymentOfflineService {
	return &paymentOfflineService{
		c:    c,
		name: name,
	}
}

func (c *paymentOfflineService) Create(ctx context.Context, in *PaymentOffline, opts ...client.CallOption) (*PaymentOfflineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOfflineService.Create", in)
	out := new(PaymentOfflineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentOfflineService) Update(ctx context.Context, in *PaymentOffline, opts ...client.CallOption) (*PaymentOfflineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOfflineService.Update", in)
	out := new(PaymentOfflineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentOfflineService) Delete(ctx context.Context, in *PaymentOffline, opts ...client.CallOption) (*PaymentOfflineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOfflineService.Delete", in)
	out := new(PaymentOfflineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentOfflineService) Get(ctx context.Context, in *PaymentOffline, opts ...client.CallOption) (*PaymentOfflineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOfflineService.Get", in)
	out := new(PaymentOfflineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentOfflineService) Search(ctx context.Context, in *PaymentOfflineRequest, opts ...client.CallOption) (*PaymentOfflineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOfflineService.Search", in)
	out := new(PaymentOfflineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentOfflineService) List(ctx context.Context, in *PaymentOfflineRequest, opts ...client.CallOption) (*PaymentOfflineResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentOfflineService.List", in)
	out := new(PaymentOfflineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentOfflineService service

type PaymentOfflineServiceHandler interface {
	// 线下支付新增
	Create(context.Context, *PaymentOffline, *PaymentOfflineResponse) error
	// 线下支付修改
	Update(context.Context, *PaymentOffline, *PaymentOfflineResponse) error
	// 线下支付删除
	Delete(context.Context, *PaymentOffline, *PaymentOfflineResponse) error
	// 线下支付获取
	Get(context.Context, *PaymentOffline, *PaymentOfflineResponse) error
	// 线下支付查询
	Search(context.Context, *PaymentOfflineRequest, *PaymentOfflineResponse) error
	// 线下支付列表
	List(context.Context, *PaymentOfflineRequest, *PaymentOfflineResponse) error
}

func RegisterPaymentOfflineServiceHandler(s server.Server, hdlr PaymentOfflineServiceHandler, opts ...server.HandlerOption) error {
	type paymentOfflineService interface {
		Create(ctx context.Context, in *PaymentOffline, out *PaymentOfflineResponse) error
		Update(ctx context.Context, in *PaymentOffline, out *PaymentOfflineResponse) error
		Delete(ctx context.Context, in *PaymentOffline, out *PaymentOfflineResponse) error
		Get(ctx context.Context, in *PaymentOffline, out *PaymentOfflineResponse) error
		Search(ctx context.Context, in *PaymentOfflineRequest, out *PaymentOfflineResponse) error
		List(ctx context.Context, in *PaymentOfflineRequest, out *PaymentOfflineResponse) error
	}
	type PaymentOfflineService struct {
		paymentOfflineService
	}
	h := &paymentOfflineServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PaymentOfflineService{h}, opts...))
}

type paymentOfflineServiceHandler struct {
	PaymentOfflineServiceHandler
}

func (h *paymentOfflineServiceHandler) Create(ctx context.Context, in *PaymentOffline, out *PaymentOfflineResponse) error {
	return h.PaymentOfflineServiceHandler.Create(ctx, in, out)
}

func (h *paymentOfflineServiceHandler) Update(ctx context.Context, in *PaymentOffline, out *PaymentOfflineResponse) error {
	return h.PaymentOfflineServiceHandler.Update(ctx, in, out)
}

func (h *paymentOfflineServiceHandler) Delete(ctx context.Context, in *PaymentOffline, out *PaymentOfflineResponse) error {
	return h.PaymentOfflineServiceHandler.Delete(ctx, in, out)
}

func (h *paymentOfflineServiceHandler) Get(ctx context.Context, in *PaymentOffline, out *PaymentOfflineResponse) error {
	return h.PaymentOfflineServiceHandler.Get(ctx, in, out)
}

func (h *paymentOfflineServiceHandler) Search(ctx context.Context, in *PaymentOfflineRequest, out *PaymentOfflineResponse) error {
	return h.PaymentOfflineServiceHandler.Search(ctx, in, out)
}

func (h *paymentOfflineServiceHandler) List(ctx context.Context, in *PaymentOfflineRequest, out *PaymentOfflineResponse) error {
	return h.PaymentOfflineServiceHandler.List(ctx, in, out)
}
