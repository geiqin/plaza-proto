// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: transferLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TransferLogService service

func NewTransferLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TransferLogService service

type TransferLogService interface {
	//创建转账
	Create(ctx context.Context, in *TransferLog, opts ...client.CallOption) (*TransferLogResponse, error)
	//获得转账信息
	Get(ctx context.Context, in *TransferLog, opts ...client.CallOption) (*TransferLogResponse, error)
	//查询转账
	Search(ctx context.Context, in *TransferLogRequest, opts ...client.CallOption) (*TransferLogResponse, error)
	// 转账到企业银行账户
	ToCorpBank(ctx context.Context, in *TransferLogRequest, opts ...client.CallOption) (*TransferLogResponse, error)
	//转账到微信个人钱包
	ToWxWallet(ctx context.Context, in *TransferLogRequest, opts ...client.CallOption) (*TransferLogResponse, error)
	//转账到支付宝账户
	ToAliAccount(ctx context.Context, in *TransferLogRequest, opts ...client.CallOption) (*TransferLogResponse, error)
}

type transferLogService struct {
	c    client.Client
	name string
}

func NewTransferLogService(name string, c client.Client) TransferLogService {
	return &transferLogService{
		c:    c,
		name: name,
	}
}

func (c *transferLogService) Create(ctx context.Context, in *TransferLog, opts ...client.CallOption) (*TransferLogResponse, error) {
	req := c.c.NewRequest(c.name, "TransferLogService.Create", in)
	out := new(TransferLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferLogService) Get(ctx context.Context, in *TransferLog, opts ...client.CallOption) (*TransferLogResponse, error) {
	req := c.c.NewRequest(c.name, "TransferLogService.Get", in)
	out := new(TransferLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferLogService) Search(ctx context.Context, in *TransferLogRequest, opts ...client.CallOption) (*TransferLogResponse, error) {
	req := c.c.NewRequest(c.name, "TransferLogService.Search", in)
	out := new(TransferLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferLogService) ToCorpBank(ctx context.Context, in *TransferLogRequest, opts ...client.CallOption) (*TransferLogResponse, error) {
	req := c.c.NewRequest(c.name, "TransferLogService.ToCorpBank", in)
	out := new(TransferLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferLogService) ToWxWallet(ctx context.Context, in *TransferLogRequest, opts ...client.CallOption) (*TransferLogResponse, error) {
	req := c.c.NewRequest(c.name, "TransferLogService.ToWxWallet", in)
	out := new(TransferLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferLogService) ToAliAccount(ctx context.Context, in *TransferLogRequest, opts ...client.CallOption) (*TransferLogResponse, error) {
	req := c.c.NewRequest(c.name, "TransferLogService.ToAliAccount", in)
	out := new(TransferLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TransferLogService service

type TransferLogServiceHandler interface {
	//创建转账
	Create(context.Context, *TransferLog, *TransferLogResponse) error
	//获得转账信息
	Get(context.Context, *TransferLog, *TransferLogResponse) error
	//查询转账
	Search(context.Context, *TransferLogRequest, *TransferLogResponse) error
	// 转账到企业银行账户
	ToCorpBank(context.Context, *TransferLogRequest, *TransferLogResponse) error
	//转账到微信个人钱包
	ToWxWallet(context.Context, *TransferLogRequest, *TransferLogResponse) error
	//转账到支付宝账户
	ToAliAccount(context.Context, *TransferLogRequest, *TransferLogResponse) error
}

func RegisterTransferLogServiceHandler(s server.Server, hdlr TransferLogServiceHandler, opts ...server.HandlerOption) error {
	type transferLogService interface {
		Create(ctx context.Context, in *TransferLog, out *TransferLogResponse) error
		Get(ctx context.Context, in *TransferLog, out *TransferLogResponse) error
		Search(ctx context.Context, in *TransferLogRequest, out *TransferLogResponse) error
		ToCorpBank(ctx context.Context, in *TransferLogRequest, out *TransferLogResponse) error
		ToWxWallet(ctx context.Context, in *TransferLogRequest, out *TransferLogResponse) error
		ToAliAccount(ctx context.Context, in *TransferLogRequest, out *TransferLogResponse) error
	}
	type TransferLogService struct {
		transferLogService
	}
	h := &transferLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TransferLogService{h}, opts...))
}

type transferLogServiceHandler struct {
	TransferLogServiceHandler
}

func (h *transferLogServiceHandler) Create(ctx context.Context, in *TransferLog, out *TransferLogResponse) error {
	return h.TransferLogServiceHandler.Create(ctx, in, out)
}

func (h *transferLogServiceHandler) Get(ctx context.Context, in *TransferLog, out *TransferLogResponse) error {
	return h.TransferLogServiceHandler.Get(ctx, in, out)
}

func (h *transferLogServiceHandler) Search(ctx context.Context, in *TransferLogRequest, out *TransferLogResponse) error {
	return h.TransferLogServiceHandler.Search(ctx, in, out)
}

func (h *transferLogServiceHandler) ToCorpBank(ctx context.Context, in *TransferLogRequest, out *TransferLogResponse) error {
	return h.TransferLogServiceHandler.ToCorpBank(ctx, in, out)
}

func (h *transferLogServiceHandler) ToWxWallet(ctx context.Context, in *TransferLogRequest, out *TransferLogResponse) error {
	return h.TransferLogServiceHandler.ToWxWallet(ctx, in, out)
}

func (h *transferLogServiceHandler) ToAliAccount(ctx context.Context, in *TransferLogRequest, out *TransferLogResponse) error {
	return h.TransferLogServiceHandler.ToAliAccount(ctx, in, out)
}
