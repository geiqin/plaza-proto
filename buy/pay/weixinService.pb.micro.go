// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: weixinService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WeixinService service

func NewWeixinServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WeixinService service

type WeixinService interface {
	//APP支付【微信】
	AppPay(ctx context.Context, in *WeixinPayRequest, opts ...client.CallOption) (*WeixinResponse, error)
	//小程序支付【微信】
	MiniPay(ctx context.Context, in *WeixinPayRequest, opts ...client.CallOption) (*WeixinResponse, error)
	//付款码支付【微信】
	MicroPay(ctx context.Context, in *WeixinPayRequest, opts ...client.CallOption) (*WeixinResponse, error)
	//扫码支付【微信】
	NativePay(ctx context.Context, in *WeixinPayRequest, opts ...client.CallOption) (*WeixinResponse, error)
	//查询订单【微信】
	QueryOrder(ctx context.Context, in *WeixinOrderRequest, opts ...client.CallOption) (*WeixinResponse, error)
	//关闭订单【微信】
	CloseOrder(ctx context.Context, in *WeixinOrderRequest, opts ...client.CallOption) (*WeixinResponse, error)
	//发起退款【微信】
	Refund(ctx context.Context, in *WeixinRefundRequest, opts ...client.CallOption) (*WeixinResponse, error)
}

type weixinService struct {
	c    client.Client
	name string
}

func NewWeixinService(name string, c client.Client) WeixinService {
	return &weixinService{
		c:    c,
		name: name,
	}
}

func (c *weixinService) AppPay(ctx context.Context, in *WeixinPayRequest, opts ...client.CallOption) (*WeixinResponse, error) {
	req := c.c.NewRequest(c.name, "WeixinService.AppPay", in)
	out := new(WeixinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weixinService) MiniPay(ctx context.Context, in *WeixinPayRequest, opts ...client.CallOption) (*WeixinResponse, error) {
	req := c.c.NewRequest(c.name, "WeixinService.MiniPay", in)
	out := new(WeixinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weixinService) MicroPay(ctx context.Context, in *WeixinPayRequest, opts ...client.CallOption) (*WeixinResponse, error) {
	req := c.c.NewRequest(c.name, "WeixinService.MicroPay", in)
	out := new(WeixinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weixinService) NativePay(ctx context.Context, in *WeixinPayRequest, opts ...client.CallOption) (*WeixinResponse, error) {
	req := c.c.NewRequest(c.name, "WeixinService.NativePay", in)
	out := new(WeixinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weixinService) QueryOrder(ctx context.Context, in *WeixinOrderRequest, opts ...client.CallOption) (*WeixinResponse, error) {
	req := c.c.NewRequest(c.name, "WeixinService.QueryOrder", in)
	out := new(WeixinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weixinService) CloseOrder(ctx context.Context, in *WeixinOrderRequest, opts ...client.CallOption) (*WeixinResponse, error) {
	req := c.c.NewRequest(c.name, "WeixinService.CloseOrder", in)
	out := new(WeixinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weixinService) Refund(ctx context.Context, in *WeixinRefundRequest, opts ...client.CallOption) (*WeixinResponse, error) {
	req := c.c.NewRequest(c.name, "WeixinService.Refund", in)
	out := new(WeixinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WeixinService service

type WeixinServiceHandler interface {
	//APP支付【微信】
	AppPay(context.Context, *WeixinPayRequest, *WeixinResponse) error
	//小程序支付【微信】
	MiniPay(context.Context, *WeixinPayRequest, *WeixinResponse) error
	//付款码支付【微信】
	MicroPay(context.Context, *WeixinPayRequest, *WeixinResponse) error
	//扫码支付【微信】
	NativePay(context.Context, *WeixinPayRequest, *WeixinResponse) error
	//查询订单【微信】
	QueryOrder(context.Context, *WeixinOrderRequest, *WeixinResponse) error
	//关闭订单【微信】
	CloseOrder(context.Context, *WeixinOrderRequest, *WeixinResponse) error
	//发起退款【微信】
	Refund(context.Context, *WeixinRefundRequest, *WeixinResponse) error
}

func RegisterWeixinServiceHandler(s server.Server, hdlr WeixinServiceHandler, opts ...server.HandlerOption) error {
	type weixinService interface {
		AppPay(ctx context.Context, in *WeixinPayRequest, out *WeixinResponse) error
		MiniPay(ctx context.Context, in *WeixinPayRequest, out *WeixinResponse) error
		MicroPay(ctx context.Context, in *WeixinPayRequest, out *WeixinResponse) error
		NativePay(ctx context.Context, in *WeixinPayRequest, out *WeixinResponse) error
		QueryOrder(ctx context.Context, in *WeixinOrderRequest, out *WeixinResponse) error
		CloseOrder(ctx context.Context, in *WeixinOrderRequest, out *WeixinResponse) error
		Refund(ctx context.Context, in *WeixinRefundRequest, out *WeixinResponse) error
	}
	type WeixinService struct {
		weixinService
	}
	h := &weixinServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WeixinService{h}, opts...))
}

type weixinServiceHandler struct {
	WeixinServiceHandler
}

func (h *weixinServiceHandler) AppPay(ctx context.Context, in *WeixinPayRequest, out *WeixinResponse) error {
	return h.WeixinServiceHandler.AppPay(ctx, in, out)
}

func (h *weixinServiceHandler) MiniPay(ctx context.Context, in *WeixinPayRequest, out *WeixinResponse) error {
	return h.WeixinServiceHandler.MiniPay(ctx, in, out)
}

func (h *weixinServiceHandler) MicroPay(ctx context.Context, in *WeixinPayRequest, out *WeixinResponse) error {
	return h.WeixinServiceHandler.MicroPay(ctx, in, out)
}

func (h *weixinServiceHandler) NativePay(ctx context.Context, in *WeixinPayRequest, out *WeixinResponse) error {
	return h.WeixinServiceHandler.NativePay(ctx, in, out)
}

func (h *weixinServiceHandler) QueryOrder(ctx context.Context, in *WeixinOrderRequest, out *WeixinResponse) error {
	return h.WeixinServiceHandler.QueryOrder(ctx, in, out)
}

func (h *weixinServiceHandler) CloseOrder(ctx context.Context, in *WeixinOrderRequest, out *WeixinResponse) error {
	return h.WeixinServiceHandler.CloseOrder(ctx, in, out)
}

func (h *weixinServiceHandler) Refund(ctx context.Context, in *WeixinRefundRequest, out *WeixinResponse) error {
	return h.WeixinServiceHandler.Refund(ctx, in, out)
}
