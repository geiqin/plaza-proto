// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: paymentMethodService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PaymentMethodService service

func NewPaymentMethodServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PaymentMethodService service

type PaymentMethodService interface {
	// 支付方式新增
	Create(ctx context.Context, in *PaymentMethod, opts ...client.CallOption) (*PaymentMethodResponse, error)
	// 支付方式修改
	Update(ctx context.Context, in *PaymentMethod, opts ...client.CallOption) (*PaymentMethodResponse, error)
	// 支付方式删除
	Delete(ctx context.Context, in *PaymentMethod, opts ...client.CallOption) (*PaymentMethodResponse, error)
	// 支付方式获取
	Get(ctx context.Context, in *PaymentMethod, opts ...client.CallOption) (*PaymentMethodResponse, error)
	// 支付方式查询
	Search(ctx context.Context, in *PaymentMethodRequest, opts ...client.CallOption) (*PaymentMethodResponse, error)
	// 支付方式列表
	List(ctx context.Context, in *PaymentMethodRequest, opts ...client.CallOption) (*PaymentMethodResponse, error)
}

type paymentMethodService struct {
	c    client.Client
	name string
}

func NewPaymentMethodService(name string, c client.Client) PaymentMethodService {
	return &paymentMethodService{
		c:    c,
		name: name,
	}
}

func (c *paymentMethodService) Create(ctx context.Context, in *PaymentMethod, opts ...client.CallOption) (*PaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethodService.Create", in)
	out := new(PaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodService) Update(ctx context.Context, in *PaymentMethod, opts ...client.CallOption) (*PaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethodService.Update", in)
	out := new(PaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodService) Delete(ctx context.Context, in *PaymentMethod, opts ...client.CallOption) (*PaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethodService.Delete", in)
	out := new(PaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodService) Get(ctx context.Context, in *PaymentMethod, opts ...client.CallOption) (*PaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethodService.Get", in)
	out := new(PaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodService) Search(ctx context.Context, in *PaymentMethodRequest, opts ...client.CallOption) (*PaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethodService.Search", in)
	out := new(PaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodService) List(ctx context.Context, in *PaymentMethodRequest, opts ...client.CallOption) (*PaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "PaymentMethodService.List", in)
	out := new(PaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentMethodService service

type PaymentMethodServiceHandler interface {
	// 支付方式新增
	Create(context.Context, *PaymentMethod, *PaymentMethodResponse) error
	// 支付方式修改
	Update(context.Context, *PaymentMethod, *PaymentMethodResponse) error
	// 支付方式删除
	Delete(context.Context, *PaymentMethod, *PaymentMethodResponse) error
	// 支付方式获取
	Get(context.Context, *PaymentMethod, *PaymentMethodResponse) error
	// 支付方式查询
	Search(context.Context, *PaymentMethodRequest, *PaymentMethodResponse) error
	// 支付方式列表
	List(context.Context, *PaymentMethodRequest, *PaymentMethodResponse) error
}

func RegisterPaymentMethodServiceHandler(s server.Server, hdlr PaymentMethodServiceHandler, opts ...server.HandlerOption) error {
	type paymentMethodService interface {
		Create(ctx context.Context, in *PaymentMethod, out *PaymentMethodResponse) error
		Update(ctx context.Context, in *PaymentMethod, out *PaymentMethodResponse) error
		Delete(ctx context.Context, in *PaymentMethod, out *PaymentMethodResponse) error
		Get(ctx context.Context, in *PaymentMethod, out *PaymentMethodResponse) error
		Search(ctx context.Context, in *PaymentMethodRequest, out *PaymentMethodResponse) error
		List(ctx context.Context, in *PaymentMethodRequest, out *PaymentMethodResponse) error
	}
	type PaymentMethodService struct {
		paymentMethodService
	}
	h := &paymentMethodServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PaymentMethodService{h}, opts...))
}

type paymentMethodServiceHandler struct {
	PaymentMethodServiceHandler
}

func (h *paymentMethodServiceHandler) Create(ctx context.Context, in *PaymentMethod, out *PaymentMethodResponse) error {
	return h.PaymentMethodServiceHandler.Create(ctx, in, out)
}

func (h *paymentMethodServiceHandler) Update(ctx context.Context, in *PaymentMethod, out *PaymentMethodResponse) error {
	return h.PaymentMethodServiceHandler.Update(ctx, in, out)
}

func (h *paymentMethodServiceHandler) Delete(ctx context.Context, in *PaymentMethod, out *PaymentMethodResponse) error {
	return h.PaymentMethodServiceHandler.Delete(ctx, in, out)
}

func (h *paymentMethodServiceHandler) Get(ctx context.Context, in *PaymentMethod, out *PaymentMethodResponse) error {
	return h.PaymentMethodServiceHandler.Get(ctx, in, out)
}

func (h *paymentMethodServiceHandler) Search(ctx context.Context, in *PaymentMethodRequest, out *PaymentMethodResponse) error {
	return h.PaymentMethodServiceHandler.Search(ctx, in, out)
}

func (h *paymentMethodServiceHandler) List(ctx context.Context, in *PaymentMethodRequest, out *PaymentMethodResponse) error {
	return h.PaymentMethodServiceHandler.List(ctx, in, out)
}
