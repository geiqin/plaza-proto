// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: fetchService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FetchService service

func NewFetchServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FetchService service

type FetchService interface {
	Create(ctx context.Context, in *Fetch, opts ...client.CallOption) (*FetchResponse, error)
	Update(ctx context.Context, in *Fetch, opts ...client.CallOption) (*FetchResponse, error)
	Delete(ctx context.Context, in *FetchRequest, opts ...client.CallOption) (*FetchResponse, error)
	Get(ctx context.Context, in *Fetch, opts ...client.CallOption) (*FetchResponse, error)
	Search(ctx context.Context, in *FetchRequest, opts ...client.CallOption) (*FetchResponse, error)
	List(ctx context.Context, in *FetchRequest, opts ...client.CallOption) (*FetchResponse, error)
	// 获取上门自提时间
	GetTimes(ctx context.Context, in *FetchRequest, opts ...client.CallOption) (*DateListResponse, error)
	// 获取距离用户最近的自提点
	GetLatest(ctx context.Context, in *FetchRequest, opts ...client.CallOption) (*FetchResponse, error)
}

type fetchService struct {
	c    client.Client
	name string
}

func NewFetchService(name string, c client.Client) FetchService {
	return &fetchService{
		c:    c,
		name: name,
	}
}

func (c *fetchService) Create(ctx context.Context, in *Fetch, opts ...client.CallOption) (*FetchResponse, error) {
	req := c.c.NewRequest(c.name, "FetchService.Create", in)
	out := new(FetchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchService) Update(ctx context.Context, in *Fetch, opts ...client.CallOption) (*FetchResponse, error) {
	req := c.c.NewRequest(c.name, "FetchService.Update", in)
	out := new(FetchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchService) Delete(ctx context.Context, in *FetchRequest, opts ...client.CallOption) (*FetchResponse, error) {
	req := c.c.NewRequest(c.name, "FetchService.Delete", in)
	out := new(FetchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchService) Get(ctx context.Context, in *Fetch, opts ...client.CallOption) (*FetchResponse, error) {
	req := c.c.NewRequest(c.name, "FetchService.Get", in)
	out := new(FetchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchService) Search(ctx context.Context, in *FetchRequest, opts ...client.CallOption) (*FetchResponse, error) {
	req := c.c.NewRequest(c.name, "FetchService.Search", in)
	out := new(FetchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchService) List(ctx context.Context, in *FetchRequest, opts ...client.CallOption) (*FetchResponse, error) {
	req := c.c.NewRequest(c.name, "FetchService.List", in)
	out := new(FetchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchService) GetTimes(ctx context.Context, in *FetchRequest, opts ...client.CallOption) (*DateListResponse, error) {
	req := c.c.NewRequest(c.name, "FetchService.GetTimes", in)
	out := new(DateListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchService) GetLatest(ctx context.Context, in *FetchRequest, opts ...client.CallOption) (*FetchResponse, error) {
	req := c.c.NewRequest(c.name, "FetchService.GetLatest", in)
	out := new(FetchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FetchService service

type FetchServiceHandler interface {
	Create(context.Context, *Fetch, *FetchResponse) error
	Update(context.Context, *Fetch, *FetchResponse) error
	Delete(context.Context, *FetchRequest, *FetchResponse) error
	Get(context.Context, *Fetch, *FetchResponse) error
	Search(context.Context, *FetchRequest, *FetchResponse) error
	List(context.Context, *FetchRequest, *FetchResponse) error
	// 获取上门自提时间
	GetTimes(context.Context, *FetchRequest, *DateListResponse) error
	// 获取距离用户最近的自提点
	GetLatest(context.Context, *FetchRequest, *FetchResponse) error
}

func RegisterFetchServiceHandler(s server.Server, hdlr FetchServiceHandler, opts ...server.HandlerOption) error {
	type fetchService interface {
		Create(ctx context.Context, in *Fetch, out *FetchResponse) error
		Update(ctx context.Context, in *Fetch, out *FetchResponse) error
		Delete(ctx context.Context, in *FetchRequest, out *FetchResponse) error
		Get(ctx context.Context, in *Fetch, out *FetchResponse) error
		Search(ctx context.Context, in *FetchRequest, out *FetchResponse) error
		List(ctx context.Context, in *FetchRequest, out *FetchResponse) error
		GetTimes(ctx context.Context, in *FetchRequest, out *DateListResponse) error
		GetLatest(ctx context.Context, in *FetchRequest, out *FetchResponse) error
	}
	type FetchService struct {
		fetchService
	}
	h := &fetchServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FetchService{h}, opts...))
}

type fetchServiceHandler struct {
	FetchServiceHandler
}

func (h *fetchServiceHandler) Create(ctx context.Context, in *Fetch, out *FetchResponse) error {
	return h.FetchServiceHandler.Create(ctx, in, out)
}

func (h *fetchServiceHandler) Update(ctx context.Context, in *Fetch, out *FetchResponse) error {
	return h.FetchServiceHandler.Update(ctx, in, out)
}

func (h *fetchServiceHandler) Delete(ctx context.Context, in *FetchRequest, out *FetchResponse) error {
	return h.FetchServiceHandler.Delete(ctx, in, out)
}

func (h *fetchServiceHandler) Get(ctx context.Context, in *Fetch, out *FetchResponse) error {
	return h.FetchServiceHandler.Get(ctx, in, out)
}

func (h *fetchServiceHandler) Search(ctx context.Context, in *FetchRequest, out *FetchResponse) error {
	return h.FetchServiceHandler.Search(ctx, in, out)
}

func (h *fetchServiceHandler) List(ctx context.Context, in *FetchRequest, out *FetchResponse) error {
	return h.FetchServiceHandler.List(ctx, in, out)
}

func (h *fetchServiceHandler) GetTimes(ctx context.Context, in *FetchRequest, out *DateListResponse) error {
	return h.FetchServiceHandler.GetTimes(ctx, in, out)
}

func (h *fetchServiceHandler) GetLatest(ctx context.Context, in *FetchRequest, out *FetchResponse) error {
	return h.FetchServiceHandler.GetLatest(ctx, in, out)
}
