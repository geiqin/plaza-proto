// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: initializeService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for InitializeService service

func NewInitializeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for InitializeService service

type InitializeService interface {
	Create(ctx context.Context, in *Initialize, opts ...client.CallOption) (*InitializeResponse, error)
	Get(ctx context.Context, in *Initialize, opts ...client.CallOption) (*InitializeResponse, error)
	Search(ctx context.Context, in *InitializeRequest, opts ...client.CallOption) (*InitializeResponse, error)
}

type initializeService struct {
	c    client.Client
	name string
}

func NewInitializeService(name string, c client.Client) InitializeService {
	return &initializeService{
		c:    c,
		name: name,
	}
}

func (c *initializeService) Create(ctx context.Context, in *Initialize, opts ...client.CallOption) (*InitializeResponse, error) {
	req := c.c.NewRequest(c.name, "InitializeService.Create", in)
	out := new(InitializeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initializeService) Get(ctx context.Context, in *Initialize, opts ...client.CallOption) (*InitializeResponse, error) {
	req := c.c.NewRequest(c.name, "InitializeService.Get", in)
	out := new(InitializeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initializeService) Search(ctx context.Context, in *InitializeRequest, opts ...client.CallOption) (*InitializeResponse, error) {
	req := c.c.NewRequest(c.name, "InitializeService.Search", in)
	out := new(InitializeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InitializeService service

type InitializeServiceHandler interface {
	Create(context.Context, *Initialize, *InitializeResponse) error
	Get(context.Context, *Initialize, *InitializeResponse) error
	Search(context.Context, *InitializeRequest, *InitializeResponse) error
}

func RegisterInitializeServiceHandler(s server.Server, hdlr InitializeServiceHandler, opts ...server.HandlerOption) error {
	type initializeService interface {
		Create(ctx context.Context, in *Initialize, out *InitializeResponse) error
		Get(ctx context.Context, in *Initialize, out *InitializeResponse) error
		Search(ctx context.Context, in *InitializeRequest, out *InitializeResponse) error
	}
	type InitializeService struct {
		initializeService
	}
	h := &initializeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&InitializeService{h}, opts...))
}

type initializeServiceHandler struct {
	InitializeServiceHandler
}

func (h *initializeServiceHandler) Create(ctx context.Context, in *Initialize, out *InitializeResponse) error {
	return h.InitializeServiceHandler.Create(ctx, in, out)
}

func (h *initializeServiceHandler) Get(ctx context.Context, in *Initialize, out *InitializeResponse) error {
	return h.InitializeServiceHandler.Get(ctx, in, out)
}

func (h *initializeServiceHandler) Search(ctx context.Context, in *InitializeRequest, out *InitializeResponse) error {
	return h.InitializeServiceHandler.Search(ctx, in, out)
}
