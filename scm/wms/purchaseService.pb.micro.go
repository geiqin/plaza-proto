// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: purchaseService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PurchaseService service

func NewPurchaseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PurchaseService service

type PurchaseService interface {
	Create(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error)
	Update(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error)
	Delete(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error)
	Approve(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error)
	Get(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error)
	Search(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error)
	Details(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error)
}

type purchaseService struct {
	c    client.Client
	name string
}

func NewPurchaseService(name string, c client.Client) PurchaseService {
	return &purchaseService{
		c:    c,
		name: name,
	}
}

func (c *purchaseService) Create(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.Create", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseService) Update(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.Update", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseService) Delete(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.Delete", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseService) Approve(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.Approve", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseService) Get(ctx context.Context, in *Purchase, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.Get", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseService) Search(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.Search", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseService) Details(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.Details", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PurchaseService service

type PurchaseServiceHandler interface {
	Create(context.Context, *Purchase, *PurchaseResponse) error
	Update(context.Context, *Purchase, *PurchaseResponse) error
	Delete(context.Context, *PurchaseRequest, *PurchaseResponse) error
	Approve(context.Context, *PurchaseRequest, *PurchaseResponse) error
	Get(context.Context, *Purchase, *PurchaseResponse) error
	Search(context.Context, *PurchaseRequest, *PurchaseResponse) error
	Details(context.Context, *PurchaseRequest, *PurchaseResponse) error
}

func RegisterPurchaseServiceHandler(s server.Server, hdlr PurchaseServiceHandler, opts ...server.HandlerOption) error {
	type purchaseService interface {
		Create(ctx context.Context, in *Purchase, out *PurchaseResponse) error
		Update(ctx context.Context, in *Purchase, out *PurchaseResponse) error
		Delete(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error
		Approve(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error
		Get(ctx context.Context, in *Purchase, out *PurchaseResponse) error
		Search(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error
		Details(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error
	}
	type PurchaseService struct {
		purchaseService
	}
	h := &purchaseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PurchaseService{h}, opts...))
}

type purchaseServiceHandler struct {
	PurchaseServiceHandler
}

func (h *purchaseServiceHandler) Create(ctx context.Context, in *Purchase, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.Create(ctx, in, out)
}

func (h *purchaseServiceHandler) Update(ctx context.Context, in *Purchase, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.Update(ctx, in, out)
}

func (h *purchaseServiceHandler) Delete(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.Delete(ctx, in, out)
}

func (h *purchaseServiceHandler) Approve(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.Approve(ctx, in, out)
}

func (h *purchaseServiceHandler) Get(ctx context.Context, in *Purchase, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.Get(ctx, in, out)
}

func (h *purchaseServiceHandler) Search(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.Search(ctx, in, out)
}

func (h *purchaseServiceHandler) Details(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.Details(ctx, in, out)
}
