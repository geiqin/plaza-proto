// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: calculateService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CalculateService service

func NewCalculateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CalculateService service

type CalculateService interface {
	//快递组合计算（推荐）
	ExpressCombine(ctx context.Context, in *CalculateRequest, opts ...client.CallOption) (*CalculateResponse, error)
	//快递累加计算
	ExpressTotal(ctx context.Context, in *CalculateRequest, opts ...client.CallOption) (*CalculateResponse, error)
}

type calculateService struct {
	c    client.Client
	name string
}

func NewCalculateService(name string, c client.Client) CalculateService {
	return &calculateService{
		c:    c,
		name: name,
	}
}

func (c *calculateService) ExpressCombine(ctx context.Context, in *CalculateRequest, opts ...client.CallOption) (*CalculateResponse, error) {
	req := c.c.NewRequest(c.name, "CalculateService.ExpressCombine", in)
	out := new(CalculateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateService) ExpressTotal(ctx context.Context, in *CalculateRequest, opts ...client.CallOption) (*CalculateResponse, error) {
	req := c.c.NewRequest(c.name, "CalculateService.ExpressTotal", in)
	out := new(CalculateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CalculateService service

type CalculateServiceHandler interface {
	//快递组合计算（推荐）
	ExpressCombine(context.Context, *CalculateRequest, *CalculateResponse) error
	//快递累加计算
	ExpressTotal(context.Context, *CalculateRequest, *CalculateResponse) error
}

func RegisterCalculateServiceHandler(s server.Server, hdlr CalculateServiceHandler, opts ...server.HandlerOption) error {
	type calculateService interface {
		ExpressCombine(ctx context.Context, in *CalculateRequest, out *CalculateResponse) error
		ExpressTotal(ctx context.Context, in *CalculateRequest, out *CalculateResponse) error
	}
	type CalculateService struct {
		calculateService
	}
	h := &calculateServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CalculateService{h}, opts...))
}

type calculateServiceHandler struct {
	CalculateServiceHandler
}

func (h *calculateServiceHandler) ExpressCombine(ctx context.Context, in *CalculateRequest, out *CalculateResponse) error {
	return h.CalculateServiceHandler.ExpressCombine(ctx, in, out)
}

func (h *calculateServiceHandler) ExpressTotal(ctx context.Context, in *CalculateRequest, out *CalculateResponse) error {
	return h.CalculateServiceHandler.ExpressTotal(ctx, in, out)
}
