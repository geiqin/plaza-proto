// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: shipOrderService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShipOrderService service

func NewShipOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShipOrderService service

type ShipOrderService interface {
	Create(ctx context.Context, in *ShipOrder, opts ...client.CallOption) (*ShipOrderResponse, error)
	Update(ctx context.Context, in *ShipOrder, opts ...client.CallOption) (*ShipOrderResponse, error)
	Get(ctx context.Context, in *ShipOrderRequest, opts ...client.CallOption) (*ShipOrderResponse, error)
	List(ctx context.Context, in *ShipOrderRequest, opts ...client.CallOption) (*ShipOrderResponse, error)
}

type shipOrderService struct {
	c    client.Client
	name string
}

func NewShipOrderService(name string, c client.Client) ShipOrderService {
	return &shipOrderService{
		c:    c,
		name: name,
	}
}

func (c *shipOrderService) Create(ctx context.Context, in *ShipOrder, opts ...client.CallOption) (*ShipOrderResponse, error) {
	req := c.c.NewRequest(c.name, "ShipOrderService.Create", in)
	out := new(ShipOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipOrderService) Update(ctx context.Context, in *ShipOrder, opts ...client.CallOption) (*ShipOrderResponse, error) {
	req := c.c.NewRequest(c.name, "ShipOrderService.Update", in)
	out := new(ShipOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipOrderService) Get(ctx context.Context, in *ShipOrderRequest, opts ...client.CallOption) (*ShipOrderResponse, error) {
	req := c.c.NewRequest(c.name, "ShipOrderService.Get", in)
	out := new(ShipOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipOrderService) List(ctx context.Context, in *ShipOrderRequest, opts ...client.CallOption) (*ShipOrderResponse, error) {
	req := c.c.NewRequest(c.name, "ShipOrderService.List", in)
	out := new(ShipOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShipOrderService service

type ShipOrderServiceHandler interface {
	Create(context.Context, *ShipOrder, *ShipOrderResponse) error
	Update(context.Context, *ShipOrder, *ShipOrderResponse) error
	Get(context.Context, *ShipOrderRequest, *ShipOrderResponse) error
	List(context.Context, *ShipOrderRequest, *ShipOrderResponse) error
}

func RegisterShipOrderServiceHandler(s server.Server, hdlr ShipOrderServiceHandler, opts ...server.HandlerOption) error {
	type shipOrderService interface {
		Create(ctx context.Context, in *ShipOrder, out *ShipOrderResponse) error
		Update(ctx context.Context, in *ShipOrder, out *ShipOrderResponse) error
		Get(ctx context.Context, in *ShipOrderRequest, out *ShipOrderResponse) error
		List(ctx context.Context, in *ShipOrderRequest, out *ShipOrderResponse) error
	}
	type ShipOrderService struct {
		shipOrderService
	}
	h := &shipOrderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShipOrderService{h}, opts...))
}

type shipOrderServiceHandler struct {
	ShipOrderServiceHandler
}

func (h *shipOrderServiceHandler) Create(ctx context.Context, in *ShipOrder, out *ShipOrderResponse) error {
	return h.ShipOrderServiceHandler.Create(ctx, in, out)
}

func (h *shipOrderServiceHandler) Update(ctx context.Context, in *ShipOrder, out *ShipOrderResponse) error {
	return h.ShipOrderServiceHandler.Update(ctx, in, out)
}

func (h *shipOrderServiceHandler) Get(ctx context.Context, in *ShipOrderRequest, out *ShipOrderResponse) error {
	return h.ShipOrderServiceHandler.Get(ctx, in, out)
}

func (h *shipOrderServiceHandler) List(ctx context.Context, in *ShipOrderRequest, out *ShipOrderResponse) error {
	return h.ShipOrderServiceHandler.List(ctx, in, out)
}
