// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: fileService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FileService service

func NewFileServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FileService service

type FileService interface {
	Update(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error)
	Delete(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error)
	Get(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error)
	List(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error)
	Search(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error)
	SetCat(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error)
	CodeList(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error)
	//服务调用（拉取并确认）
	PullList(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error)
}

type fileService struct {
	c    client.Client
	name string
}

func NewFileService(name string, c client.Client) FileService {
	return &fileService{
		c:    c,
		name: name,
	}
}

func (c *fileService) Update(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.Update", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) Delete(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.Delete", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) Get(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.Get", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) List(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.List", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) Search(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.Search", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) SetCat(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.SetCat", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) CodeList(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.CodeList", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) PullList(ctx context.Context, in *FileRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.name, "FileService.PullList", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileService service

type FileServiceHandler interface {
	Update(context.Context, *FileRequest, *FileResponse) error
	Delete(context.Context, *FileRequest, *FileResponse) error
	Get(context.Context, *FileRequest, *FileResponse) error
	List(context.Context, *FileRequest, *FileResponse) error
	Search(context.Context, *FileRequest, *FileResponse) error
	SetCat(context.Context, *FileRequest, *FileResponse) error
	CodeList(context.Context, *FileRequest, *FileResponse) error
	//服务调用（拉取并确认）
	PullList(context.Context, *FileRequest, *FileResponse) error
}

func RegisterFileServiceHandler(s server.Server, hdlr FileServiceHandler, opts ...server.HandlerOption) error {
	type fileService interface {
		Update(ctx context.Context, in *FileRequest, out *FileResponse) error
		Delete(ctx context.Context, in *FileRequest, out *FileResponse) error
		Get(ctx context.Context, in *FileRequest, out *FileResponse) error
		List(ctx context.Context, in *FileRequest, out *FileResponse) error
		Search(ctx context.Context, in *FileRequest, out *FileResponse) error
		SetCat(ctx context.Context, in *FileRequest, out *FileResponse) error
		CodeList(ctx context.Context, in *FileRequest, out *FileResponse) error
		PullList(ctx context.Context, in *FileRequest, out *FileResponse) error
	}
	type FileService struct {
		fileService
	}
	h := &fileServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FileService{h}, opts...))
}

type fileServiceHandler struct {
	FileServiceHandler
}

func (h *fileServiceHandler) Update(ctx context.Context, in *FileRequest, out *FileResponse) error {
	return h.FileServiceHandler.Update(ctx, in, out)
}

func (h *fileServiceHandler) Delete(ctx context.Context, in *FileRequest, out *FileResponse) error {
	return h.FileServiceHandler.Delete(ctx, in, out)
}

func (h *fileServiceHandler) Get(ctx context.Context, in *FileRequest, out *FileResponse) error {
	return h.FileServiceHandler.Get(ctx, in, out)
}

func (h *fileServiceHandler) List(ctx context.Context, in *FileRequest, out *FileResponse) error {
	return h.FileServiceHandler.List(ctx, in, out)
}

func (h *fileServiceHandler) Search(ctx context.Context, in *FileRequest, out *FileResponse) error {
	return h.FileServiceHandler.Search(ctx, in, out)
}

func (h *fileServiceHandler) SetCat(ctx context.Context, in *FileRequest, out *FileResponse) error {
	return h.FileServiceHandler.SetCat(ctx, in, out)
}

func (h *fileServiceHandler) CodeList(ctx context.Context, in *FileRequest, out *FileResponse) error {
	return h.FileServiceHandler.CodeList(ctx, in, out)
}

func (h *fileServiceHandler) PullList(ctx context.Context, in *FileRequest, out *FileResponse) error {
	return h.FileServiceHandler.PullList(ctx, in, out)
}
