// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: personDeathService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PersonDeathService service

func NewPersonDeathServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PersonDeathService service

type PersonDeathService interface {
	//创建死亡状况
	Create(ctx context.Context, in *PersonDeath, opts ...client.CallOption) (*PersonDeathResponse, error)
	// 编辑死亡状况
	Update(ctx context.Context, in *PersonDeath, opts ...client.CallOption) (*PersonDeathResponse, error)
	// 删除死亡状况
	Delete(ctx context.Context, in *PersonDeath, opts ...client.CallOption) (*PersonDeathResponse, error)
	// 获取死亡状况详情
	Get(ctx context.Context, in *PersonDeath, opts ...client.CallOption) (*PersonDeathResponse, error)
	//分页查询家庭列表
	Search(ctx context.Context, in *PersonDeathRequest, opts ...client.CallOption) (*PersonDeathResponse, error)
}

type personDeathService struct {
	c    client.Client
	name string
}

func NewPersonDeathService(name string, c client.Client) PersonDeathService {
	return &personDeathService{
		c:    c,
		name: name,
	}
}

func (c *personDeathService) Create(ctx context.Context, in *PersonDeath, opts ...client.CallOption) (*PersonDeathResponse, error) {
	req := c.c.NewRequest(c.name, "PersonDeathService.Create", in)
	out := new(PersonDeathResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personDeathService) Update(ctx context.Context, in *PersonDeath, opts ...client.CallOption) (*PersonDeathResponse, error) {
	req := c.c.NewRequest(c.name, "PersonDeathService.Update", in)
	out := new(PersonDeathResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personDeathService) Delete(ctx context.Context, in *PersonDeath, opts ...client.CallOption) (*PersonDeathResponse, error) {
	req := c.c.NewRequest(c.name, "PersonDeathService.Delete", in)
	out := new(PersonDeathResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personDeathService) Get(ctx context.Context, in *PersonDeath, opts ...client.CallOption) (*PersonDeathResponse, error) {
	req := c.c.NewRequest(c.name, "PersonDeathService.Get", in)
	out := new(PersonDeathResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personDeathService) Search(ctx context.Context, in *PersonDeathRequest, opts ...client.CallOption) (*PersonDeathResponse, error) {
	req := c.c.NewRequest(c.name, "PersonDeathService.Search", in)
	out := new(PersonDeathResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PersonDeathService service

type PersonDeathServiceHandler interface {
	//创建死亡状况
	Create(context.Context, *PersonDeath, *PersonDeathResponse) error
	// 编辑死亡状况
	Update(context.Context, *PersonDeath, *PersonDeathResponse) error
	// 删除死亡状况
	Delete(context.Context, *PersonDeath, *PersonDeathResponse) error
	// 获取死亡状况详情
	Get(context.Context, *PersonDeath, *PersonDeathResponse) error
	//分页查询家庭列表
	Search(context.Context, *PersonDeathRequest, *PersonDeathResponse) error
}

func RegisterPersonDeathServiceHandler(s server.Server, hdlr PersonDeathServiceHandler, opts ...server.HandlerOption) error {
	type personDeathService interface {
		Create(ctx context.Context, in *PersonDeath, out *PersonDeathResponse) error
		Update(ctx context.Context, in *PersonDeath, out *PersonDeathResponse) error
		Delete(ctx context.Context, in *PersonDeath, out *PersonDeathResponse) error
		Get(ctx context.Context, in *PersonDeath, out *PersonDeathResponse) error
		Search(ctx context.Context, in *PersonDeathRequest, out *PersonDeathResponse) error
	}
	type PersonDeathService struct {
		personDeathService
	}
	h := &personDeathServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PersonDeathService{h}, opts...))
}

type personDeathServiceHandler struct {
	PersonDeathServiceHandler
}

func (h *personDeathServiceHandler) Create(ctx context.Context, in *PersonDeath, out *PersonDeathResponse) error {
	return h.PersonDeathServiceHandler.Create(ctx, in, out)
}

func (h *personDeathServiceHandler) Update(ctx context.Context, in *PersonDeath, out *PersonDeathResponse) error {
	return h.PersonDeathServiceHandler.Update(ctx, in, out)
}

func (h *personDeathServiceHandler) Delete(ctx context.Context, in *PersonDeath, out *PersonDeathResponse) error {
	return h.PersonDeathServiceHandler.Delete(ctx, in, out)
}

func (h *personDeathServiceHandler) Get(ctx context.Context, in *PersonDeath, out *PersonDeathResponse) error {
	return h.PersonDeathServiceHandler.Get(ctx, in, out)
}

func (h *personDeathServiceHandler) Search(ctx context.Context, in *PersonDeathRequest, out *PersonDeathResponse) error {
	return h.PersonDeathServiceHandler.Search(ctx, in, out)
}
