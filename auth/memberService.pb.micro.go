// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: memberService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MemberService service

func NewMemberServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MemberService service

type MemberService interface {
	//用户登录
	Login(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error)
	//用户登录-验证码发送
	LoginVerifySend(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//用户-验证码显示
	VerifyEntry(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//密码找回
	ForgetPwd(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//密码找回-验证码发送
	ForgetPwdVerifySend(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//小程序用户授权
	AppMiniAuth(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error)
	//app用户手机绑定
	AppMobileBind(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//小程序用户手机一键绑定
	OnekeyMobileBind(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
	//安全退出
	Logout(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error)
}

type memberService struct {
	c    client.Client
	name string
}

func NewMemberService(name string, c client.Client) MemberService {
	return &memberService{
		c:    c,
		name: name,
	}
}

func (c *memberService) Login(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Login", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) LoginVerifySend(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.LoginVerifySend", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) VerifyEntry(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.VerifyEntry", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) ForgetPwd(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.ForgetPwd", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) ForgetPwdVerifySend(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.ForgetPwdVerifySend", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) AppMiniAuth(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.AppMiniAuth", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) AppMobileBind(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.AppMobileBind", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) OnekeyMobileBind(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.OnekeyMobileBind", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Logout(ctx context.Context, in *MemberRequest, opts ...client.CallOption) (*MemberResponse, error) {
	req := c.c.NewRequest(c.name, "MemberService.Logout", in)
	out := new(MemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MemberService service

type MemberServiceHandler interface {
	//用户登录
	Login(context.Context, *AuthRequest, *AuthResponse) error
	//用户登录-验证码发送
	LoginVerifySend(context.Context, *MemberRequest, *MemberResponse) error
	//用户-验证码显示
	VerifyEntry(context.Context, *MemberRequest, *MemberResponse) error
	//密码找回
	ForgetPwd(context.Context, *MemberRequest, *MemberResponse) error
	//密码找回-验证码发送
	ForgetPwdVerifySend(context.Context, *MemberRequest, *MemberResponse) error
	//小程序用户授权
	AppMiniAuth(context.Context, *AuthRequest, *AuthResponse) error
	//app用户手机绑定
	AppMobileBind(context.Context, *MemberRequest, *MemberResponse) error
	//小程序用户手机一键绑定
	OnekeyMobileBind(context.Context, *MemberRequest, *MemberResponse) error
	//安全退出
	Logout(context.Context, *MemberRequest, *MemberResponse) error
}

func RegisterMemberServiceHandler(s server.Server, hdlr MemberServiceHandler, opts ...server.HandlerOption) error {
	type memberService interface {
		Login(ctx context.Context, in *AuthRequest, out *AuthResponse) error
		LoginVerifySend(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		VerifyEntry(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		ForgetPwd(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		ForgetPwdVerifySend(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		AppMiniAuth(ctx context.Context, in *AuthRequest, out *AuthResponse) error
		AppMobileBind(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		OnekeyMobileBind(ctx context.Context, in *MemberRequest, out *MemberResponse) error
		Logout(ctx context.Context, in *MemberRequest, out *MemberResponse) error
	}
	type MemberService struct {
		memberService
	}
	h := &memberServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MemberService{h}, opts...))
}

type memberServiceHandler struct {
	MemberServiceHandler
}

func (h *memberServiceHandler) Login(ctx context.Context, in *AuthRequest, out *AuthResponse) error {
	return h.MemberServiceHandler.Login(ctx, in, out)
}

func (h *memberServiceHandler) LoginVerifySend(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.LoginVerifySend(ctx, in, out)
}

func (h *memberServiceHandler) VerifyEntry(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.VerifyEntry(ctx, in, out)
}

func (h *memberServiceHandler) ForgetPwd(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.ForgetPwd(ctx, in, out)
}

func (h *memberServiceHandler) ForgetPwdVerifySend(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.ForgetPwdVerifySend(ctx, in, out)
}

func (h *memberServiceHandler) AppMiniAuth(ctx context.Context, in *AuthRequest, out *AuthResponse) error {
	return h.MemberServiceHandler.AppMiniAuth(ctx, in, out)
}

func (h *memberServiceHandler) AppMobileBind(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.AppMobileBind(ctx, in, out)
}

func (h *memberServiceHandler) OnekeyMobileBind(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.OnekeyMobileBind(ctx, in, out)
}

func (h *memberServiceHandler) Logout(ctx context.Context, in *MemberRequest, out *MemberResponse) error {
	return h.MemberServiceHandler.Logout(ctx, in, out)
}
