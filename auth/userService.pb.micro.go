// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	//用户登录
	Login(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error)
	//切换用户【service】
	SwitchHandle(ctx context.Context, in *SwitchRequest, opts ...client.CallOption) (*AuthResponse, error)
	//用户登录-验证码发送
	LoginVerifySend(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	//用户-验证码显示
	VerifyEntry(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	//密码找回
	ForgetPwd(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	//密码找回-验证码发送
	ForgetPwdVerifySend(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	//app用户手机绑定
	AppMobileBind(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
	//安全退出
	Logout(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Login(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Login", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SwitchHandle(ctx context.Context, in *SwitchRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.SwitchHandle", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) LoginVerifySend(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.LoginVerifySend", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifyEntry(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.VerifyEntry", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ForgetPwd(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ForgetPwd", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ForgetPwdVerifySend(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ForgetPwdVerifySend", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AppMobileBind(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AppMobileBind", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Logout(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Logout", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	//用户登录
	Login(context.Context, *AuthRequest, *AuthResponse) error
	//切换用户【service】
	SwitchHandle(context.Context, *SwitchRequest, *AuthResponse) error
	//用户登录-验证码发送
	LoginVerifySend(context.Context, *UserRequest, *UserResponse) error
	//用户-验证码显示
	VerifyEntry(context.Context, *UserRequest, *UserResponse) error
	//密码找回
	ForgetPwd(context.Context, *UserRequest, *UserResponse) error
	//密码找回-验证码发送
	ForgetPwdVerifySend(context.Context, *UserRequest, *UserResponse) error
	//app用户手机绑定
	AppMobileBind(context.Context, *UserRequest, *UserResponse) error
	//安全退出
	Logout(context.Context, *UserRequest, *UserResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Login(ctx context.Context, in *AuthRequest, out *AuthResponse) error
		SwitchHandle(ctx context.Context, in *SwitchRequest, out *AuthResponse) error
		LoginVerifySend(ctx context.Context, in *UserRequest, out *UserResponse) error
		VerifyEntry(ctx context.Context, in *UserRequest, out *UserResponse) error
		ForgetPwd(ctx context.Context, in *UserRequest, out *UserResponse) error
		ForgetPwdVerifySend(ctx context.Context, in *UserRequest, out *UserResponse) error
		AppMobileBind(ctx context.Context, in *UserRequest, out *UserResponse) error
		Logout(ctx context.Context, in *UserRequest, out *UserResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Login(ctx context.Context, in *AuthRequest, out *AuthResponse) error {
	return h.UserServiceHandler.Login(ctx, in, out)
}

func (h *userServiceHandler) SwitchHandle(ctx context.Context, in *SwitchRequest, out *AuthResponse) error {
	return h.UserServiceHandler.SwitchHandle(ctx, in, out)
}

func (h *userServiceHandler) LoginVerifySend(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.LoginVerifySend(ctx, in, out)
}

func (h *userServiceHandler) VerifyEntry(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.VerifyEntry(ctx, in, out)
}

func (h *userServiceHandler) ForgetPwd(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.ForgetPwd(ctx, in, out)
}

func (h *userServiceHandler) ForgetPwdVerifySend(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.ForgetPwdVerifySend(ctx, in, out)
}

func (h *userServiceHandler) AppMobileBind(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.AppMobileBind(ctx, in, out)
}

func (h *userServiceHandler) Logout(ctx context.Context, in *UserRequest, out *UserResponse) error {
	return h.UserServiceHandler.Logout(ctx, in, out)
}
