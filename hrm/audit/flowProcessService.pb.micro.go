// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: flowProcessService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FlowProcessService service

func NewFlowProcessServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FlowProcessService service

type FlowProcessService interface {
	Create(ctx context.Context, in *FlowProcess, opts ...client.CallOption) (*FlowProcessResponse, error)
	Update(ctx context.Context, in *FlowProcess, opts ...client.CallOption) (*FlowProcessResponse, error)
	Delete(ctx context.Context, in *FlowProcess, opts ...client.CallOption) (*FlowProcessResponse, error)
	Get(ctx context.Context, in *FlowProcess, opts ...client.CallOption) (*FlowProcessResponse, error)
	Search(ctx context.Context, in *FlowProcessRequest, opts ...client.CallOption) (*FlowProcessResponse, error)
}

type flowProcessService struct {
	c    client.Client
	name string
}

func NewFlowProcessService(name string, c client.Client) FlowProcessService {
	return &flowProcessService{
		c:    c,
		name: name,
	}
}

func (c *flowProcessService) Create(ctx context.Context, in *FlowProcess, opts ...client.CallOption) (*FlowProcessResponse, error) {
	req := c.c.NewRequest(c.name, "FlowProcessService.Create", in)
	out := new(FlowProcessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowProcessService) Update(ctx context.Context, in *FlowProcess, opts ...client.CallOption) (*FlowProcessResponse, error) {
	req := c.c.NewRequest(c.name, "FlowProcessService.Update", in)
	out := new(FlowProcessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowProcessService) Delete(ctx context.Context, in *FlowProcess, opts ...client.CallOption) (*FlowProcessResponse, error) {
	req := c.c.NewRequest(c.name, "FlowProcessService.Delete", in)
	out := new(FlowProcessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowProcessService) Get(ctx context.Context, in *FlowProcess, opts ...client.CallOption) (*FlowProcessResponse, error) {
	req := c.c.NewRequest(c.name, "FlowProcessService.Get", in)
	out := new(FlowProcessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowProcessService) Search(ctx context.Context, in *FlowProcessRequest, opts ...client.CallOption) (*FlowProcessResponse, error) {
	req := c.c.NewRequest(c.name, "FlowProcessService.Search", in)
	out := new(FlowProcessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FlowProcessService service

type FlowProcessServiceHandler interface {
	Create(context.Context, *FlowProcess, *FlowProcessResponse) error
	Update(context.Context, *FlowProcess, *FlowProcessResponse) error
	Delete(context.Context, *FlowProcess, *FlowProcessResponse) error
	Get(context.Context, *FlowProcess, *FlowProcessResponse) error
	Search(context.Context, *FlowProcessRequest, *FlowProcessResponse) error
}

func RegisterFlowProcessServiceHandler(s server.Server, hdlr FlowProcessServiceHandler, opts ...server.HandlerOption) error {
	type flowProcessService interface {
		Create(ctx context.Context, in *FlowProcess, out *FlowProcessResponse) error
		Update(ctx context.Context, in *FlowProcess, out *FlowProcessResponse) error
		Delete(ctx context.Context, in *FlowProcess, out *FlowProcessResponse) error
		Get(ctx context.Context, in *FlowProcess, out *FlowProcessResponse) error
		Search(ctx context.Context, in *FlowProcessRequest, out *FlowProcessResponse) error
	}
	type FlowProcessService struct {
		flowProcessService
	}
	h := &flowProcessServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FlowProcessService{h}, opts...))
}

type flowProcessServiceHandler struct {
	FlowProcessServiceHandler
}

func (h *flowProcessServiceHandler) Create(ctx context.Context, in *FlowProcess, out *FlowProcessResponse) error {
	return h.FlowProcessServiceHandler.Create(ctx, in, out)
}

func (h *flowProcessServiceHandler) Update(ctx context.Context, in *FlowProcess, out *FlowProcessResponse) error {
	return h.FlowProcessServiceHandler.Update(ctx, in, out)
}

func (h *flowProcessServiceHandler) Delete(ctx context.Context, in *FlowProcess, out *FlowProcessResponse) error {
	return h.FlowProcessServiceHandler.Delete(ctx, in, out)
}

func (h *flowProcessServiceHandler) Get(ctx context.Context, in *FlowProcess, out *FlowProcessResponse) error {
	return h.FlowProcessServiceHandler.Get(ctx, in, out)
}

func (h *flowProcessServiceHandler) Search(ctx context.Context, in *FlowProcessRequest, out *FlowProcessResponse) error {
	return h.FlowProcessServiceHandler.Search(ctx, in, out)
}
