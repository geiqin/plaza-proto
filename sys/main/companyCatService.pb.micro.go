// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: companyCatService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CompanyCatService service

func NewCompanyCatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CompanyCatService service

type CompanyCatService interface {
	Create(ctx context.Context, in *CompanyCat, opts ...client.CallOption) (*CompanyCatResponse, error)
	Update(ctx context.Context, in *CompanyCat, opts ...client.CallOption) (*CompanyCatResponse, error)
	Delete(ctx context.Context, in *CompanyCat, opts ...client.CallOption) (*CompanyCatResponse, error)
	Get(ctx context.Context, in *CompanyCat, opts ...client.CallOption) (*CompanyCatResponse, error)
	Search(ctx context.Context, in *CompanyCatRequest, opts ...client.CallOption) (*CompanyCatResponse, error)
	List(ctx context.Context, in *CompanyCatRequest, opts ...client.CallOption) (*CompanyCatResponse, error)
	Tree(ctx context.Context, in *CompanyCatRequest, opts ...client.CallOption) (*CompanyCatResponse, error)
}

type companyCatService struct {
	c    client.Client
	name string
}

func NewCompanyCatService(name string, c client.Client) CompanyCatService {
	return &companyCatService{
		c:    c,
		name: name,
	}
}

func (c *companyCatService) Create(ctx context.Context, in *CompanyCat, opts ...client.CallOption) (*CompanyCatResponse, error) {
	req := c.c.NewRequest(c.name, "CompanyCatService.Create", in)
	out := new(CompanyCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCatService) Update(ctx context.Context, in *CompanyCat, opts ...client.CallOption) (*CompanyCatResponse, error) {
	req := c.c.NewRequest(c.name, "CompanyCatService.Update", in)
	out := new(CompanyCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCatService) Delete(ctx context.Context, in *CompanyCat, opts ...client.CallOption) (*CompanyCatResponse, error) {
	req := c.c.NewRequest(c.name, "CompanyCatService.Delete", in)
	out := new(CompanyCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCatService) Get(ctx context.Context, in *CompanyCat, opts ...client.CallOption) (*CompanyCatResponse, error) {
	req := c.c.NewRequest(c.name, "CompanyCatService.Get", in)
	out := new(CompanyCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCatService) Search(ctx context.Context, in *CompanyCatRequest, opts ...client.CallOption) (*CompanyCatResponse, error) {
	req := c.c.NewRequest(c.name, "CompanyCatService.Search", in)
	out := new(CompanyCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCatService) List(ctx context.Context, in *CompanyCatRequest, opts ...client.CallOption) (*CompanyCatResponse, error) {
	req := c.c.NewRequest(c.name, "CompanyCatService.List", in)
	out := new(CompanyCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCatService) Tree(ctx context.Context, in *CompanyCatRequest, opts ...client.CallOption) (*CompanyCatResponse, error) {
	req := c.c.NewRequest(c.name, "CompanyCatService.Tree", in)
	out := new(CompanyCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CompanyCatService service

type CompanyCatServiceHandler interface {
	Create(context.Context, *CompanyCat, *CompanyCatResponse) error
	Update(context.Context, *CompanyCat, *CompanyCatResponse) error
	Delete(context.Context, *CompanyCat, *CompanyCatResponse) error
	Get(context.Context, *CompanyCat, *CompanyCatResponse) error
	Search(context.Context, *CompanyCatRequest, *CompanyCatResponse) error
	List(context.Context, *CompanyCatRequest, *CompanyCatResponse) error
	Tree(context.Context, *CompanyCatRequest, *CompanyCatResponse) error
}

func RegisterCompanyCatServiceHandler(s server.Server, hdlr CompanyCatServiceHandler, opts ...server.HandlerOption) error {
	type companyCatService interface {
		Create(ctx context.Context, in *CompanyCat, out *CompanyCatResponse) error
		Update(ctx context.Context, in *CompanyCat, out *CompanyCatResponse) error
		Delete(ctx context.Context, in *CompanyCat, out *CompanyCatResponse) error
		Get(ctx context.Context, in *CompanyCat, out *CompanyCatResponse) error
		Search(ctx context.Context, in *CompanyCatRequest, out *CompanyCatResponse) error
		List(ctx context.Context, in *CompanyCatRequest, out *CompanyCatResponse) error
		Tree(ctx context.Context, in *CompanyCatRequest, out *CompanyCatResponse) error
	}
	type CompanyCatService struct {
		companyCatService
	}
	h := &companyCatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CompanyCatService{h}, opts...))
}

type companyCatServiceHandler struct {
	CompanyCatServiceHandler
}

func (h *companyCatServiceHandler) Create(ctx context.Context, in *CompanyCat, out *CompanyCatResponse) error {
	return h.CompanyCatServiceHandler.Create(ctx, in, out)
}

func (h *companyCatServiceHandler) Update(ctx context.Context, in *CompanyCat, out *CompanyCatResponse) error {
	return h.CompanyCatServiceHandler.Update(ctx, in, out)
}

func (h *companyCatServiceHandler) Delete(ctx context.Context, in *CompanyCat, out *CompanyCatResponse) error {
	return h.CompanyCatServiceHandler.Delete(ctx, in, out)
}

func (h *companyCatServiceHandler) Get(ctx context.Context, in *CompanyCat, out *CompanyCatResponse) error {
	return h.CompanyCatServiceHandler.Get(ctx, in, out)
}

func (h *companyCatServiceHandler) Search(ctx context.Context, in *CompanyCatRequest, out *CompanyCatResponse) error {
	return h.CompanyCatServiceHandler.Search(ctx, in, out)
}

func (h *companyCatServiceHandler) List(ctx context.Context, in *CompanyCatRequest, out *CompanyCatResponse) error {
	return h.CompanyCatServiceHandler.List(ctx, in, out)
}

func (h *companyCatServiceHandler) Tree(ctx context.Context, in *CompanyCatRequest, out *CompanyCatResponse) error {
	return h.CompanyCatServiceHandler.Tree(ctx, in, out)
}
