// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: verifyCodeService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VerifyCodeService service

func NewVerifyCodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VerifyCodeService service

type VerifyCodeService interface {
	//发送短信验证码
	SendSms(ctx context.Context, in *VerifyCode, opts ...client.CallOption) (*VerifyCodeResponse, error)
	//检验短信验证码
	CheckSms(ctx context.Context, in *VerifyCode, opts ...client.CallOption) (*VerifyCodeResponse, error)
	//发送邮件验证码
	SendEmail(ctx context.Context, in *VerifyCode, opts ...client.CallOption) (*VerifyCodeResponse, error)
	//检验邮件验证码
	CheckEmail(ctx context.Context, in *VerifyCode, opts ...client.CallOption) (*VerifyCodeResponse, error)
}

type verifyCodeService struct {
	c    client.Client
	name string
}

func NewVerifyCodeService(name string, c client.Client) VerifyCodeService {
	return &verifyCodeService{
		c:    c,
		name: name,
	}
}

func (c *verifyCodeService) SendSms(ctx context.Context, in *VerifyCode, opts ...client.CallOption) (*VerifyCodeResponse, error) {
	req := c.c.NewRequest(c.name, "VerifyCodeService.SendSms", in)
	out := new(VerifyCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifyCodeService) CheckSms(ctx context.Context, in *VerifyCode, opts ...client.CallOption) (*VerifyCodeResponse, error) {
	req := c.c.NewRequest(c.name, "VerifyCodeService.CheckSms", in)
	out := new(VerifyCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifyCodeService) SendEmail(ctx context.Context, in *VerifyCode, opts ...client.CallOption) (*VerifyCodeResponse, error) {
	req := c.c.NewRequest(c.name, "VerifyCodeService.SendEmail", in)
	out := new(VerifyCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifyCodeService) CheckEmail(ctx context.Context, in *VerifyCode, opts ...client.CallOption) (*VerifyCodeResponse, error) {
	req := c.c.NewRequest(c.name, "VerifyCodeService.CheckEmail", in)
	out := new(VerifyCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VerifyCodeService service

type VerifyCodeServiceHandler interface {
	//发送短信验证码
	SendSms(context.Context, *VerifyCode, *VerifyCodeResponse) error
	//检验短信验证码
	CheckSms(context.Context, *VerifyCode, *VerifyCodeResponse) error
	//发送邮件验证码
	SendEmail(context.Context, *VerifyCode, *VerifyCodeResponse) error
	//检验邮件验证码
	CheckEmail(context.Context, *VerifyCode, *VerifyCodeResponse) error
}

func RegisterVerifyCodeServiceHandler(s server.Server, hdlr VerifyCodeServiceHandler, opts ...server.HandlerOption) error {
	type verifyCodeService interface {
		SendSms(ctx context.Context, in *VerifyCode, out *VerifyCodeResponse) error
		CheckSms(ctx context.Context, in *VerifyCode, out *VerifyCodeResponse) error
		SendEmail(ctx context.Context, in *VerifyCode, out *VerifyCodeResponse) error
		CheckEmail(ctx context.Context, in *VerifyCode, out *VerifyCodeResponse) error
	}
	type VerifyCodeService struct {
		verifyCodeService
	}
	h := &verifyCodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&VerifyCodeService{h}, opts...))
}

type verifyCodeServiceHandler struct {
	VerifyCodeServiceHandler
}

func (h *verifyCodeServiceHandler) SendSms(ctx context.Context, in *VerifyCode, out *VerifyCodeResponse) error {
	return h.VerifyCodeServiceHandler.SendSms(ctx, in, out)
}

func (h *verifyCodeServiceHandler) CheckSms(ctx context.Context, in *VerifyCode, out *VerifyCodeResponse) error {
	return h.VerifyCodeServiceHandler.CheckSms(ctx, in, out)
}

func (h *verifyCodeServiceHandler) SendEmail(ctx context.Context, in *VerifyCode, out *VerifyCodeResponse) error {
	return h.VerifyCodeServiceHandler.SendEmail(ctx, in, out)
}

func (h *verifyCodeServiceHandler) CheckEmail(ctx context.Context, in *VerifyCode, out *VerifyCodeResponse) error {
	return h.VerifyCodeServiceHandler.CheckEmail(ctx, in, out)
}
