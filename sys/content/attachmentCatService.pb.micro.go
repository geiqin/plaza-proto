// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: attachmentCatService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AttachmentCatService service

func NewAttachmentCatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AttachmentCatService service

type AttachmentCatService interface {
	// 分类新增
	Create(ctx context.Context, in *AttachmentCat, opts ...client.CallOption) (*AttachmentCatResponse, error)
	// 分类修改
	Update(ctx context.Context, in *AttachmentCat, opts ...client.CallOption) (*AttachmentCatResponse, error)
	// 分类删除
	Delete(ctx context.Context, in *AttachmentCat, opts ...client.CallOption) (*AttachmentCatResponse, error)
	// 分类获取
	Get(ctx context.Context, in *AttachmentCat, opts ...client.CallOption) (*AttachmentCatResponse, error)
	// 分类查询
	Search(ctx context.Context, in *AttachmentCatRequest, opts ...client.CallOption) (*AttachmentCatResponse, error)
	// 分类列表
	List(ctx context.Context, in *AttachmentCatRequest, opts ...client.CallOption) (*AttachmentCatResponse, error)
	// 分类列表树
	ListTree(ctx context.Context, in *AttachmentCatRequest, opts ...client.CallOption) (*AttachmentCatResponse, error)
	// 分类选择树
	SelectTree(ctx context.Context, in *AttachmentCatRequest, opts ...client.CallOption) (*AttachmentCatResponse, error)
}

type attachmentCatService struct {
	c    client.Client
	name string
}

func NewAttachmentCatService(name string, c client.Client) AttachmentCatService {
	return &attachmentCatService{
		c:    c,
		name: name,
	}
}

func (c *attachmentCatService) Create(ctx context.Context, in *AttachmentCat, opts ...client.CallOption) (*AttachmentCatResponse, error) {
	req := c.c.NewRequest(c.name, "AttachmentCatService.Create", in)
	out := new(AttachmentCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentCatService) Update(ctx context.Context, in *AttachmentCat, opts ...client.CallOption) (*AttachmentCatResponse, error) {
	req := c.c.NewRequest(c.name, "AttachmentCatService.Update", in)
	out := new(AttachmentCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentCatService) Delete(ctx context.Context, in *AttachmentCat, opts ...client.CallOption) (*AttachmentCatResponse, error) {
	req := c.c.NewRequest(c.name, "AttachmentCatService.Delete", in)
	out := new(AttachmentCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentCatService) Get(ctx context.Context, in *AttachmentCat, opts ...client.CallOption) (*AttachmentCatResponse, error) {
	req := c.c.NewRequest(c.name, "AttachmentCatService.Get", in)
	out := new(AttachmentCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentCatService) Search(ctx context.Context, in *AttachmentCatRequest, opts ...client.CallOption) (*AttachmentCatResponse, error) {
	req := c.c.NewRequest(c.name, "AttachmentCatService.Search", in)
	out := new(AttachmentCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentCatService) List(ctx context.Context, in *AttachmentCatRequest, opts ...client.CallOption) (*AttachmentCatResponse, error) {
	req := c.c.NewRequest(c.name, "AttachmentCatService.List", in)
	out := new(AttachmentCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentCatService) ListTree(ctx context.Context, in *AttachmentCatRequest, opts ...client.CallOption) (*AttachmentCatResponse, error) {
	req := c.c.NewRequest(c.name, "AttachmentCatService.ListTree", in)
	out := new(AttachmentCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentCatService) SelectTree(ctx context.Context, in *AttachmentCatRequest, opts ...client.CallOption) (*AttachmentCatResponse, error) {
	req := c.c.NewRequest(c.name, "AttachmentCatService.SelectTree", in)
	out := new(AttachmentCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AttachmentCatService service

type AttachmentCatServiceHandler interface {
	// 分类新增
	Create(context.Context, *AttachmentCat, *AttachmentCatResponse) error
	// 分类修改
	Update(context.Context, *AttachmentCat, *AttachmentCatResponse) error
	// 分类删除
	Delete(context.Context, *AttachmentCat, *AttachmentCatResponse) error
	// 分类获取
	Get(context.Context, *AttachmentCat, *AttachmentCatResponse) error
	// 分类查询
	Search(context.Context, *AttachmentCatRequest, *AttachmentCatResponse) error
	// 分类列表
	List(context.Context, *AttachmentCatRequest, *AttachmentCatResponse) error
	// 分类列表树
	ListTree(context.Context, *AttachmentCatRequest, *AttachmentCatResponse) error
	// 分类选择树
	SelectTree(context.Context, *AttachmentCatRequest, *AttachmentCatResponse) error
}

func RegisterAttachmentCatServiceHandler(s server.Server, hdlr AttachmentCatServiceHandler, opts ...server.HandlerOption) error {
	type attachmentCatService interface {
		Create(ctx context.Context, in *AttachmentCat, out *AttachmentCatResponse) error
		Update(ctx context.Context, in *AttachmentCat, out *AttachmentCatResponse) error
		Delete(ctx context.Context, in *AttachmentCat, out *AttachmentCatResponse) error
		Get(ctx context.Context, in *AttachmentCat, out *AttachmentCatResponse) error
		Search(ctx context.Context, in *AttachmentCatRequest, out *AttachmentCatResponse) error
		List(ctx context.Context, in *AttachmentCatRequest, out *AttachmentCatResponse) error
		ListTree(ctx context.Context, in *AttachmentCatRequest, out *AttachmentCatResponse) error
		SelectTree(ctx context.Context, in *AttachmentCatRequest, out *AttachmentCatResponse) error
	}
	type AttachmentCatService struct {
		attachmentCatService
	}
	h := &attachmentCatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AttachmentCatService{h}, opts...))
}

type attachmentCatServiceHandler struct {
	AttachmentCatServiceHandler
}

func (h *attachmentCatServiceHandler) Create(ctx context.Context, in *AttachmentCat, out *AttachmentCatResponse) error {
	return h.AttachmentCatServiceHandler.Create(ctx, in, out)
}

func (h *attachmentCatServiceHandler) Update(ctx context.Context, in *AttachmentCat, out *AttachmentCatResponse) error {
	return h.AttachmentCatServiceHandler.Update(ctx, in, out)
}

func (h *attachmentCatServiceHandler) Delete(ctx context.Context, in *AttachmentCat, out *AttachmentCatResponse) error {
	return h.AttachmentCatServiceHandler.Delete(ctx, in, out)
}

func (h *attachmentCatServiceHandler) Get(ctx context.Context, in *AttachmentCat, out *AttachmentCatResponse) error {
	return h.AttachmentCatServiceHandler.Get(ctx, in, out)
}

func (h *attachmentCatServiceHandler) Search(ctx context.Context, in *AttachmentCatRequest, out *AttachmentCatResponse) error {
	return h.AttachmentCatServiceHandler.Search(ctx, in, out)
}

func (h *attachmentCatServiceHandler) List(ctx context.Context, in *AttachmentCatRequest, out *AttachmentCatResponse) error {
	return h.AttachmentCatServiceHandler.List(ctx, in, out)
}

func (h *attachmentCatServiceHandler) ListTree(ctx context.Context, in *AttachmentCatRequest, out *AttachmentCatResponse) error {
	return h.AttachmentCatServiceHandler.ListTree(ctx, in, out)
}

func (h *attachmentCatServiceHandler) SelectTree(ctx context.Context, in *AttachmentCatRequest, out *AttachmentCatResponse) error {
	return h.AttachmentCatServiceHandler.SelectTree(ctx, in, out)
}
