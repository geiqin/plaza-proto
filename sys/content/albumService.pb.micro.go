// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: albumService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AlbumService service

func NewAlbumServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AlbumService service

type AlbumService interface {
	// 图册新增
	Create(ctx context.Context, in *Album, opts ...client.CallOption) (*AlbumResponse, error)
	// 图册修改
	Update(ctx context.Context, in *Album, opts ...client.CallOption) (*AlbumResponse, error)
	// 图册删除
	Delete(ctx context.Context, in *Album, opts ...client.CallOption) (*AlbumResponse, error)
	// 图册获取
	Get(ctx context.Context, in *Album, opts ...client.CallOption) (*AlbumResponse, error)
	// 图册查询
	Search(ctx context.Context, in *AlbumRequest, opts ...client.CallOption) (*AlbumResponse, error)
	// 图册列表
	List(ctx context.Context, in *AlbumRequest, opts ...client.CallOption) (*AlbumResponse, error)
}

type albumService struct {
	c    client.Client
	name string
}

func NewAlbumService(name string, c client.Client) AlbumService {
	return &albumService{
		c:    c,
		name: name,
	}
}

func (c *albumService) Create(ctx context.Context, in *Album, opts ...client.CallOption) (*AlbumResponse, error) {
	req := c.c.NewRequest(c.name, "AlbumService.Create", in)
	out := new(AlbumResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) Update(ctx context.Context, in *Album, opts ...client.CallOption) (*AlbumResponse, error) {
	req := c.c.NewRequest(c.name, "AlbumService.Update", in)
	out := new(AlbumResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) Delete(ctx context.Context, in *Album, opts ...client.CallOption) (*AlbumResponse, error) {
	req := c.c.NewRequest(c.name, "AlbumService.Delete", in)
	out := new(AlbumResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) Get(ctx context.Context, in *Album, opts ...client.CallOption) (*AlbumResponse, error) {
	req := c.c.NewRequest(c.name, "AlbumService.Get", in)
	out := new(AlbumResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) Search(ctx context.Context, in *AlbumRequest, opts ...client.CallOption) (*AlbumResponse, error) {
	req := c.c.NewRequest(c.name, "AlbumService.Search", in)
	out := new(AlbumResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumService) List(ctx context.Context, in *AlbumRequest, opts ...client.CallOption) (*AlbumResponse, error) {
	req := c.c.NewRequest(c.name, "AlbumService.List", in)
	out := new(AlbumResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AlbumService service

type AlbumServiceHandler interface {
	// 图册新增
	Create(context.Context, *Album, *AlbumResponse) error
	// 图册修改
	Update(context.Context, *Album, *AlbumResponse) error
	// 图册删除
	Delete(context.Context, *Album, *AlbumResponse) error
	// 图册获取
	Get(context.Context, *Album, *AlbumResponse) error
	// 图册查询
	Search(context.Context, *AlbumRequest, *AlbumResponse) error
	// 图册列表
	List(context.Context, *AlbumRequest, *AlbumResponse) error
}

func RegisterAlbumServiceHandler(s server.Server, hdlr AlbumServiceHandler, opts ...server.HandlerOption) error {
	type albumService interface {
		Create(ctx context.Context, in *Album, out *AlbumResponse) error
		Update(ctx context.Context, in *Album, out *AlbumResponse) error
		Delete(ctx context.Context, in *Album, out *AlbumResponse) error
		Get(ctx context.Context, in *Album, out *AlbumResponse) error
		Search(ctx context.Context, in *AlbumRequest, out *AlbumResponse) error
		List(ctx context.Context, in *AlbumRequest, out *AlbumResponse) error
	}
	type AlbumService struct {
		albumService
	}
	h := &albumServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AlbumService{h}, opts...))
}

type albumServiceHandler struct {
	AlbumServiceHandler
}

func (h *albumServiceHandler) Create(ctx context.Context, in *Album, out *AlbumResponse) error {
	return h.AlbumServiceHandler.Create(ctx, in, out)
}

func (h *albumServiceHandler) Update(ctx context.Context, in *Album, out *AlbumResponse) error {
	return h.AlbumServiceHandler.Update(ctx, in, out)
}

func (h *albumServiceHandler) Delete(ctx context.Context, in *Album, out *AlbumResponse) error {
	return h.AlbumServiceHandler.Delete(ctx, in, out)
}

func (h *albumServiceHandler) Get(ctx context.Context, in *Album, out *AlbumResponse) error {
	return h.AlbumServiceHandler.Get(ctx, in, out)
}

func (h *albumServiceHandler) Search(ctx context.Context, in *AlbumRequest, out *AlbumResponse) error {
	return h.AlbumServiceHandler.Search(ctx, in, out)
}

func (h *albumServiceHandler) List(ctx context.Context, in *AlbumRequest, out *AlbumResponse) error {
	return h.AlbumServiceHandler.List(ctx, in, out)
}
