// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: materialService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 素材
type Material struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                      //ID
	Hash        string       `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash"`                                   //Hash值
	Code        string       `protobuf:"bytes,3,opt,name=code,proto3" json:"code"`                                   //编码
	Name        string       `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`                                   //名称
	Type        string       `protobuf:"bytes,5,opt,name=type,proto3" json:"type"`                                   //类型
	Storage     string       `protobuf:"bytes,6,opt,name=storage,proto3" json:"storage"`                             //存储名
	CatId       int64        `protobuf:"varint,8,opt,name=cat_id,json=catId,proto3" json:"cat_id"`                   //分类
	FileName    string       `protobuf:"bytes,9,opt,name=file_name,json=fileName,proto3" json:"file_name"`           //文件名称
	RawName     string       `protobuf:"bytes,10,opt,name=raw_name,json=rawName,proto3" json:"raw_name"`             //原始名称
	Extension   string       `protobuf:"bytes,11,opt,name=extension,proto3" json:"extension"`                        //文件扩展名
	SavePath    string       `protobuf:"bytes,12,opt,name=save_path,json=savePath,proto3" json:"save_path"`          //相对路径
	Url         string       `protobuf:"bytes,13,opt,name=url,proto3" json:"url"`                                    //完整路径
	MimeType    string       `protobuf:"bytes,14,opt,name=mime_type,json=mimeType,proto3" json:"mime_type"`          //文件类型
	Size        int64        `protobuf:"varint,15,opt,name=size,proto3" json:"size"`                                 //文件大小
	Width       int64        `protobuf:"varint,16,opt,name=width,proto3" json:"width"`                               //宽
	Height      int64        `protobuf:"varint,17,opt,name=height,proto3" json:"height"`                             //高
	Length      int64        `protobuf:"varint,18,opt,name=length,proto3" json:"length"`                             //时长
	Pixel       int32        `protobuf:"varint,19,opt,name=pixel,proto3" json:"pixel"`                               //视频分辨率
	Thumbnail   string       `protobuf:"bytes,20,opt,name=thumbnail,proto3" json:"thumbnail"`                        //缩略图
	Description string       `protobuf:"bytes,21,opt,name=description,proto3" json:"description"`                    //描述
	Sort        int32        `protobuf:"varint,22,opt,name=sort,proto3" json:"sort"`                                 //排序值
	CreatorType string       `protobuf:"bytes,23,opt,name=creator_type,json=creatorType,proto3" json:"creator_type"` //创建者类型
	CreatorId   int64        `protobuf:"varint,24,opt,name=creator_id,json=creatorId,proto3" json:"creator_id"`      //创建者ID
	MediaInfo   *MediaInfo   `protobuf:"bytes,25,opt,name=media_info,json=mediaInfo,proto3" json:"media_info"`       //媒体信息
	CreatedAt   int64        `protobuf:"varint,26,opt,name=created_at,json=createdAt,proto3" json:"created_at"`      //创建时间
	UpdatedAt   int64        `protobuf:"varint,27,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`      //修改时间
	Cat         *MaterialCat `protobuf:"bytes,28,opt,name=cat,proto3" json:"cat"`
}

func (x *Material) Reset() {
	*x = Material{}
	if protoimpl.UnsafeEnabled {
		mi := &file_materialService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Material) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Material) ProtoMessage() {}

func (x *Material) ProtoReflect() protoreflect.Message {
	mi := &file_materialService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Material.ProtoReflect.Descriptor instead.
func (*Material) Descriptor() ([]byte, []int) {
	return file_materialService_proto_rawDescGZIP(), []int{0}
}

func (x *Material) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Material) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Material) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Material) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Material) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Material) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *Material) GetCatId() int64 {
	if x != nil {
		return x.CatId
	}
	return 0
}

func (x *Material) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Material) GetRawName() string {
	if x != nil {
		return x.RawName
	}
	return ""
}

func (x *Material) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *Material) GetSavePath() string {
	if x != nil {
		return x.SavePath
	}
	return ""
}

func (x *Material) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Material) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Material) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Material) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Material) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Material) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Material) GetPixel() int32 {
	if x != nil {
		return x.Pixel
	}
	return 0
}

func (x *Material) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *Material) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Material) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Material) GetCreatorType() string {
	if x != nil {
		return x.CreatorType
	}
	return ""
}

func (x *Material) GetCreatorId() int64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *Material) GetMediaInfo() *MediaInfo {
	if x != nil {
		return x.MediaInfo
	}
	return nil
}

func (x *Material) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Material) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Material) GetCat() *MaterialCat {
	if x != nil {
		return x.Cat
	}
	return nil
}

type CrawlerPic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url"`
	Title    string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	Filename string `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename"`
}

func (x *CrawlerPic) Reset() {
	*x = CrawlerPic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_materialService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlerPic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlerPic) ProtoMessage() {}

func (x *CrawlerPic) ProtoReflect() protoreflect.Message {
	mi := &file_materialService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlerPic.ProtoReflect.Descriptor instead.
func (*CrawlerPic) Descriptor() ([]byte, []int) {
	return file_materialService_proto_rawDescGZIP(), []int{1}
}

func (x *CrawlerPic) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CrawlerPic) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CrawlerPic) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CrawlerPic) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 素材请求参数
type MaterialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top       int32    `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64    `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sort      []string `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort"`
	DateRange []string `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int64  `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	//以下为自定义参数
	Code        string `protobuf:"bytes,11,opt,name=code,proto3" json:"code"`                                  //编码
	CatId       int64  `protobuf:"varint,13,opt,name=cat_id,json=catId,proto3" json:"cat_id"`                  //分类
	Name        string `protobuf:"bytes,14,opt,name=name,proto3" json:"name"`                                  //名称
	Type        string `protobuf:"bytes,15,opt,name=type,proto3" json:"type"`                                  //类型
	MimeType    string `protobuf:"bytes,16,opt,name=mime_type,json=mimeType,proto3" json:"mime_type"`          //文件类型
	CreatorType string `protobuf:"bytes,17,opt,name=creator_type,json=creatorType,proto3" json:"creator_type"` //创建者类型
	CreatorId   int64  `protobuf:"varint,18,opt,name=creator_id,json=creatorId,proto3" json:"creator_id"`      //创建者ID
	Storage     string `protobuf:"bytes,19,opt,name=storage,proto3" json:"storage"`                            //存储名
	Filename    string `protobuf:"bytes,20,opt,name=filename,proto3" json:"filename"`                          //上传专用文件名
	Url         string `protobuf:"bytes,21,opt,name=url,proto3" json:"url"`                                    //URL
}

func (x *MaterialRequest) Reset() {
	*x = MaterialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_materialService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialRequest) ProtoMessage() {}

func (x *MaterialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_materialService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialRequest.ProtoReflect.Descriptor instead.
func (*MaterialRequest) Descriptor() ([]byte, []int) {
	return file_materialService_proto_rawDescGZIP(), []int{2}
}

func (x *MaterialRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *MaterialRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *MaterialRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MaterialRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *MaterialRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *MaterialRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *MaterialRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *MaterialRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MaterialRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MaterialRequest) GetCatId() int64 {
	if x != nil {
		return x.CatId
	}
	return 0
}

func (x *MaterialRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MaterialRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MaterialRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *MaterialRequest) GetCreatorType() string {
	if x != nil {
		return x.CreatorType
	}
	return ""
}

func (x *MaterialRequest) GetCreatorId() int64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *MaterialRequest) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *MaterialRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *MaterialRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type MaterialStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`      //类型
	Size   int64                 `protobuf:"varint,2,opt,name=size,proto3" json:"size"`     //大小
	Number int64                 `protobuf:"varint,3,opt,name=number,proto3" json:"number"` //数量
	Unit   string                `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit"`      //单位
	Data   []*MaterialStatistics `protobuf:"bytes,5,rep,name=data,proto3" json:"data"`      //子项统计
}

func (x *MaterialStatistics) Reset() {
	*x = MaterialStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_materialService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialStatistics) ProtoMessage() {}

func (x *MaterialStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_materialService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialStatistics.ProtoReflect.Descriptor instead.
func (*MaterialStatistics) Descriptor() ([]byte, []int) {
	return file_materialService_proto_rawDescGZIP(), []int{3}
}

func (x *MaterialStatistics) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MaterialStatistics) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MaterialStatistics) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *MaterialStatistics) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *MaterialStatistics) GetData() []*MaterialStatistics {
	if x != nil {
		return x.Data
	}
	return nil
}

// 素材响应数据
type MaterialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg        string              `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg"`
	Pager      *common.Pager       `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Entity     *Material           `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity"`
	Items      []*Material         `protobuf:"bytes,4,rep,name=items,proto3" json:"items"`
	Statistics *MaterialStatistics `protobuf:"bytes,5,opt,name=statistics,proto3" json:"statistics"`
	Token      *UploadTokenInfo    `protobuf:"bytes,6,opt,name=token,proto3" json:"token"`
	Callback   map[string]string   `protobuf:"bytes,7,rep,name=callback,proto3" json:"callback" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Crawler    []*CrawlerPic       `protobuf:"bytes,8,rep,name=Crawler,proto3" json:"Crawler"`
}

func (x *MaterialResponse) Reset() {
	*x = MaterialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_materialService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialResponse) ProtoMessage() {}

func (x *MaterialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_materialService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialResponse.ProtoReflect.Descriptor instead.
func (*MaterialResponse) Descriptor() ([]byte, []int) {
	return file_materialService_proto_rawDescGZIP(), []int{4}
}

func (x *MaterialResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MaterialResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *MaterialResponse) GetEntity() *Material {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *MaterialResponse) GetItems() []*Material {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MaterialResponse) GetStatistics() *MaterialStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *MaterialResponse) GetToken() *UploadTokenInfo {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *MaterialResponse) GetCallback() map[string]string {
	if x != nil {
		return x.Callback
	}
	return nil
}

func (x *MaterialResponse) GetCrawler() []*CrawlerPic {
	if x != nil {
		return x.Crawler
	}
	return nil
}

var File_materialService_proto protoreflect.FileDescriptor

var file_materialService_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x05, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x63, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61,
	0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x69, 0x78, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a,
	0x03, 0x63, 0x61, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x61,
	0x74, 0x52, 0x03, 0x63, 0x61, 0x74, 0x22, 0x60, 0x0a, 0x0a, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x50, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc1, 0x03, 0x0a, 0x0f, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x61, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x9a, 0x01, 0x0a,
	0x12, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc1, 0x03, 0x0a, 0x10, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x2e, 0x0a, 0x07, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x50, 0x69, 0x63, 0x52, 0x07, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xe7, 0x05,
	0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x1a,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x1a, 0x1a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x53, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x07, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_materialService_proto_rawDescOnce sync.Once
	file_materialService_proto_rawDescData = file_materialService_proto_rawDesc
)

func file_materialService_proto_rawDescGZIP() []byte {
	file_materialService_proto_rawDescOnce.Do(func() {
		file_materialService_proto_rawDescData = protoimpl.X.CompressGZIP(file_materialService_proto_rawDescData)
	})
	return file_materialService_proto_rawDescData
}

var file_materialService_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_materialService_proto_goTypes = []interface{}{
	(*Material)(nil),           // 0: services.Material
	(*CrawlerPic)(nil),         // 1: services.CrawlerPic
	(*MaterialRequest)(nil),    // 2: services.MaterialRequest
	(*MaterialStatistics)(nil), // 3: services.MaterialStatistics
	(*MaterialResponse)(nil),   // 4: services.MaterialResponse
	nil,                        // 5: services.MaterialResponse.CallbackEntry
	(*MediaInfo)(nil),          // 6: services.MediaInfo
	(*MaterialCat)(nil),        // 7: services.MaterialCat
	(*common.Pager)(nil),       // 8: common.Pager
	(*UploadTokenInfo)(nil),    // 9: services.UploadTokenInfo
	(*CallbackInfo)(nil),       // 10: services.CallbackInfo
}
var file_materialService_proto_depIdxs = []int32{
	6,  // 0: services.Material.media_info:type_name -> services.MediaInfo
	7,  // 1: services.Material.cat:type_name -> services.MaterialCat
	3,  // 2: services.MaterialStatistics.data:type_name -> services.MaterialStatistics
	8,  // 3: services.MaterialResponse.pager:type_name -> common.Pager
	0,  // 4: services.MaterialResponse.entity:type_name -> services.Material
	0,  // 5: services.MaterialResponse.items:type_name -> services.Material
	3,  // 6: services.MaterialResponse.statistics:type_name -> services.MaterialStatistics
	9,  // 7: services.MaterialResponse.token:type_name -> services.UploadTokenInfo
	5,  // 8: services.MaterialResponse.callback:type_name -> services.MaterialResponse.CallbackEntry
	1,  // 9: services.MaterialResponse.Crawler:type_name -> services.CrawlerPic
	0,  // 10: services.MaterialService.Create:input_type -> services.Material
	0,  // 11: services.MaterialService.Update:input_type -> services.Material
	2,  // 12: services.MaterialService.Delete:input_type -> services.MaterialRequest
	0,  // 13: services.MaterialService.Get:input_type -> services.Material
	2,  // 14: services.MaterialService.Search:input_type -> services.MaterialRequest
	2,  // 15: services.MaterialService.List:input_type -> services.MaterialRequest
	2,  // 16: services.MaterialService.SetCat:input_type -> services.MaterialRequest
	2,  // 17: services.MaterialService.Statistics:input_type -> services.MaterialRequest
	2,  // 18: services.MaterialService.UploadToken:input_type -> services.MaterialRequest
	10, // 19: services.MaterialService.UploadCallback:input_type -> services.CallbackInfo
	2,  // 20: services.MaterialService.Crawler:input_type -> services.MaterialRequest
	4,  // 21: services.MaterialService.Create:output_type -> services.MaterialResponse
	4,  // 22: services.MaterialService.Update:output_type -> services.MaterialResponse
	4,  // 23: services.MaterialService.Delete:output_type -> services.MaterialResponse
	4,  // 24: services.MaterialService.Get:output_type -> services.MaterialResponse
	4,  // 25: services.MaterialService.Search:output_type -> services.MaterialResponse
	4,  // 26: services.MaterialService.List:output_type -> services.MaterialResponse
	4,  // 27: services.MaterialService.SetCat:output_type -> services.MaterialResponse
	4,  // 28: services.MaterialService.Statistics:output_type -> services.MaterialResponse
	4,  // 29: services.MaterialService.UploadToken:output_type -> services.MaterialResponse
	4,  // 30: services.MaterialService.UploadCallback:output_type -> services.MaterialResponse
	4,  // 31: services.MaterialService.Crawler:output_type -> services.MaterialResponse
	21, // [21:32] is the sub-list for method output_type
	10, // [10:21] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_materialService_proto_init() }
func file_materialService_proto_init() {
	if File_materialService_proto != nil {
		return
	}
	file_baseInfoService_proto_init()
	file_materialCatService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_materialService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Material); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_materialService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlerPic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_materialService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_materialService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_materialService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_materialService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_materialService_proto_goTypes,
		DependencyIndexes: file_materialService_proto_depIdxs,
		MessageInfos:      file_materialService_proto_msgTypes,
	}.Build()
	File_materialService_proto = out.File
	file_materialService_proto_rawDesc = nil
	file_materialService_proto_goTypes = nil
	file_materialService_proto_depIdxs = nil
}
