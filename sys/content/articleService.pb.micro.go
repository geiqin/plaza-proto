// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: articleService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ArticleService service

func NewArticleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ArticleService service

type ArticleService interface {
	//文章创建
	Create(ctx context.Context, in *Article, opts ...client.CallOption) (*ArticleResponse, error)
	//文章修改
	Update(ctx context.Context, in *Article, opts ...client.CallOption) (*ArticleResponse, error)
	//文章删除
	Delete(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*ArticleResponse, error)
	//文章获取
	Get(ctx context.Context, in *Article, opts ...client.CallOption) (*ArticleResponse, error)
	//文章详情
	Detail(ctx context.Context, in *Article, opts ...client.CallOption) (*ArticleResponse, error)
	//文章搜索
	Search(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*ArticleResponse, error)
	//文章列表
	List(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*ArticleResponse, error)
}

type articleService struct {
	c    client.Client
	name string
}

func NewArticleService(name string, c client.Client) ArticleService {
	return &articleService{
		c:    c,
		name: name,
	}
}

func (c *articleService) Create(ctx context.Context, in *Article, opts ...client.CallOption) (*ArticleResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleService.Create", in)
	out := new(ArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) Update(ctx context.Context, in *Article, opts ...client.CallOption) (*ArticleResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleService.Update", in)
	out := new(ArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) Delete(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*ArticleResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleService.Delete", in)
	out := new(ArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) Get(ctx context.Context, in *Article, opts ...client.CallOption) (*ArticleResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleService.Get", in)
	out := new(ArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) Detail(ctx context.Context, in *Article, opts ...client.CallOption) (*ArticleResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleService.Detail", in)
	out := new(ArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) Search(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*ArticleResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleService.Search", in)
	out := new(ArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) List(ctx context.Context, in *ArticleRequest, opts ...client.CallOption) (*ArticleResponse, error) {
	req := c.c.NewRequest(c.name, "ArticleService.List", in)
	out := new(ArticleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArticleService service

type ArticleServiceHandler interface {
	//文章创建
	Create(context.Context, *Article, *ArticleResponse) error
	//文章修改
	Update(context.Context, *Article, *ArticleResponse) error
	//文章删除
	Delete(context.Context, *ArticleRequest, *ArticleResponse) error
	//文章获取
	Get(context.Context, *Article, *ArticleResponse) error
	//文章详情
	Detail(context.Context, *Article, *ArticleResponse) error
	//文章搜索
	Search(context.Context, *ArticleRequest, *ArticleResponse) error
	//文章列表
	List(context.Context, *ArticleRequest, *ArticleResponse) error
}

func RegisterArticleServiceHandler(s server.Server, hdlr ArticleServiceHandler, opts ...server.HandlerOption) error {
	type articleService interface {
		Create(ctx context.Context, in *Article, out *ArticleResponse) error
		Update(ctx context.Context, in *Article, out *ArticleResponse) error
		Delete(ctx context.Context, in *ArticleRequest, out *ArticleResponse) error
		Get(ctx context.Context, in *Article, out *ArticleResponse) error
		Detail(ctx context.Context, in *Article, out *ArticleResponse) error
		Search(ctx context.Context, in *ArticleRequest, out *ArticleResponse) error
		List(ctx context.Context, in *ArticleRequest, out *ArticleResponse) error
	}
	type ArticleService struct {
		articleService
	}
	h := &articleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ArticleService{h}, opts...))
}

type articleServiceHandler struct {
	ArticleServiceHandler
}

func (h *articleServiceHandler) Create(ctx context.Context, in *Article, out *ArticleResponse) error {
	return h.ArticleServiceHandler.Create(ctx, in, out)
}

func (h *articleServiceHandler) Update(ctx context.Context, in *Article, out *ArticleResponse) error {
	return h.ArticleServiceHandler.Update(ctx, in, out)
}

func (h *articleServiceHandler) Delete(ctx context.Context, in *ArticleRequest, out *ArticleResponse) error {
	return h.ArticleServiceHandler.Delete(ctx, in, out)
}

func (h *articleServiceHandler) Get(ctx context.Context, in *Article, out *ArticleResponse) error {
	return h.ArticleServiceHandler.Get(ctx, in, out)
}

func (h *articleServiceHandler) Detail(ctx context.Context, in *Article, out *ArticleResponse) error {
	return h.ArticleServiceHandler.Detail(ctx, in, out)
}

func (h *articleServiceHandler) Search(ctx context.Context, in *ArticleRequest, out *ArticleResponse) error {
	return h.ArticleServiceHandler.Search(ctx, in, out)
}

func (h *articleServiceHandler) List(ctx context.Context, in *ArticleRequest, out *ArticleResponse) error {
	return h.ArticleServiceHandler.List(ctx, in, out)
}
