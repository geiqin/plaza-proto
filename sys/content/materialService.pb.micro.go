// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: materialService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MaterialService service

func NewMaterialServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MaterialService service

type MaterialService interface {
	// 素材新增
	Create(ctx context.Context, in *Material, opts ...client.CallOption) (*MaterialResponse, error)
	// 素材修改
	Update(ctx context.Context, in *Material, opts ...client.CallOption) (*MaterialResponse, error)
	// 素材删除
	Delete(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error)
	// 素材获取
	Get(ctx context.Context, in *Material, opts ...client.CallOption) (*MaterialResponse, error)
	// 素材查询
	Search(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error)
	// 素材列表
	List(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error)
	//素材统计
	Statistics(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error)
	//上传凭证生成
	UploadToken(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error)
	//上传回调处理
	UploadCallback(ctx context.Context, in *CallbackInfo, opts ...client.CallOption) (*MaterialResponse, error)
	//爬虫图片
	Crawler(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error)
}

type materialService struct {
	c    client.Client
	name string
}

func NewMaterialService(name string, c client.Client) MaterialService {
	return &materialService{
		c:    c,
		name: name,
	}
}

func (c *materialService) Create(ctx context.Context, in *Material, opts ...client.CallOption) (*MaterialResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialService.Create", in)
	out := new(MaterialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) Update(ctx context.Context, in *Material, opts ...client.CallOption) (*MaterialResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialService.Update", in)
	out := new(MaterialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) Delete(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialService.Delete", in)
	out := new(MaterialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) Get(ctx context.Context, in *Material, opts ...client.CallOption) (*MaterialResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialService.Get", in)
	out := new(MaterialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) Search(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialService.Search", in)
	out := new(MaterialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) List(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialService.List", in)
	out := new(MaterialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) Statistics(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialService.Statistics", in)
	out := new(MaterialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) UploadToken(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialService.UploadToken", in)
	out := new(MaterialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) UploadCallback(ctx context.Context, in *CallbackInfo, opts ...client.CallOption) (*MaterialResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialService.UploadCallback", in)
	out := new(MaterialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialService) Crawler(ctx context.Context, in *MaterialRequest, opts ...client.CallOption) (*MaterialResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialService.Crawler", in)
	out := new(MaterialResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MaterialService service

type MaterialServiceHandler interface {
	// 素材新增
	Create(context.Context, *Material, *MaterialResponse) error
	// 素材修改
	Update(context.Context, *Material, *MaterialResponse) error
	// 素材删除
	Delete(context.Context, *MaterialRequest, *MaterialResponse) error
	// 素材获取
	Get(context.Context, *Material, *MaterialResponse) error
	// 素材查询
	Search(context.Context, *MaterialRequest, *MaterialResponse) error
	// 素材列表
	List(context.Context, *MaterialRequest, *MaterialResponse) error
	//素材统计
	Statistics(context.Context, *MaterialRequest, *MaterialResponse) error
	//上传凭证生成
	UploadToken(context.Context, *MaterialRequest, *MaterialResponse) error
	//上传回调处理
	UploadCallback(context.Context, *CallbackInfo, *MaterialResponse) error
	//爬虫图片
	Crawler(context.Context, *MaterialRequest, *MaterialResponse) error
}

func RegisterMaterialServiceHandler(s server.Server, hdlr MaterialServiceHandler, opts ...server.HandlerOption) error {
	type materialService interface {
		Create(ctx context.Context, in *Material, out *MaterialResponse) error
		Update(ctx context.Context, in *Material, out *MaterialResponse) error
		Delete(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error
		Get(ctx context.Context, in *Material, out *MaterialResponse) error
		Search(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error
		List(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error
		Statistics(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error
		UploadToken(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error
		UploadCallback(ctx context.Context, in *CallbackInfo, out *MaterialResponse) error
		Crawler(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error
	}
	type MaterialService struct {
		materialService
	}
	h := &materialServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MaterialService{h}, opts...))
}

type materialServiceHandler struct {
	MaterialServiceHandler
}

func (h *materialServiceHandler) Create(ctx context.Context, in *Material, out *MaterialResponse) error {
	return h.MaterialServiceHandler.Create(ctx, in, out)
}

func (h *materialServiceHandler) Update(ctx context.Context, in *Material, out *MaterialResponse) error {
	return h.MaterialServiceHandler.Update(ctx, in, out)
}

func (h *materialServiceHandler) Delete(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error {
	return h.MaterialServiceHandler.Delete(ctx, in, out)
}

func (h *materialServiceHandler) Get(ctx context.Context, in *Material, out *MaterialResponse) error {
	return h.MaterialServiceHandler.Get(ctx, in, out)
}

func (h *materialServiceHandler) Search(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error {
	return h.MaterialServiceHandler.Search(ctx, in, out)
}

func (h *materialServiceHandler) List(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error {
	return h.MaterialServiceHandler.List(ctx, in, out)
}

func (h *materialServiceHandler) Statistics(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error {
	return h.MaterialServiceHandler.Statistics(ctx, in, out)
}

func (h *materialServiceHandler) UploadToken(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error {
	return h.MaterialServiceHandler.UploadToken(ctx, in, out)
}

func (h *materialServiceHandler) UploadCallback(ctx context.Context, in *CallbackInfo, out *MaterialResponse) error {
	return h.MaterialServiceHandler.UploadCallback(ctx, in, out)
}

func (h *materialServiceHandler) Crawler(ctx context.Context, in *MaterialRequest, out *MaterialResponse) error {
	return h.MaterialServiceHandler.Crawler(ctx, in, out)
}
