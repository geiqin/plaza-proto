// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: catService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CatService service

func NewCatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CatService service

type CatService interface {
	// 分类新增
	Create(ctx context.Context, in *Cat, opts ...client.CallOption) (*CatResponse, error)
	// 分类修改
	Update(ctx context.Context, in *Cat, opts ...client.CallOption) (*CatResponse, error)
	// 分类删除
	Delete(ctx context.Context, in *Cat, opts ...client.CallOption) (*CatResponse, error)
	// 分类获取
	Get(ctx context.Context, in *Cat, opts ...client.CallOption) (*CatResponse, error)
	// 分类查询
	Search(ctx context.Context, in *CatRequest, opts ...client.CallOption) (*CatResponse, error)
	// 分类列表
	List(ctx context.Context, in *CatRequest, opts ...client.CallOption) (*CatResponse, error)
	// 分类列表树
	ListTree(ctx context.Context, in *CatRequest, opts ...client.CallOption) (*CatResponse, error)
	// 分类选择树
	SelectTree(ctx context.Context, in *CatRequest, opts ...client.CallOption) (*CatResponse, error)
}

type catService struct {
	c    client.Client
	name string
}

func NewCatService(name string, c client.Client) CatService {
	return &catService{
		c:    c,
		name: name,
	}
}

func (c *catService) Create(ctx context.Context, in *Cat, opts ...client.CallOption) (*CatResponse, error) {
	req := c.c.NewRequest(c.name, "CatService.Create", in)
	out := new(CatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catService) Update(ctx context.Context, in *Cat, opts ...client.CallOption) (*CatResponse, error) {
	req := c.c.NewRequest(c.name, "CatService.Update", in)
	out := new(CatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catService) Delete(ctx context.Context, in *Cat, opts ...client.CallOption) (*CatResponse, error) {
	req := c.c.NewRequest(c.name, "CatService.Delete", in)
	out := new(CatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catService) Get(ctx context.Context, in *Cat, opts ...client.CallOption) (*CatResponse, error) {
	req := c.c.NewRequest(c.name, "CatService.Get", in)
	out := new(CatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catService) Search(ctx context.Context, in *CatRequest, opts ...client.CallOption) (*CatResponse, error) {
	req := c.c.NewRequest(c.name, "CatService.Search", in)
	out := new(CatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catService) List(ctx context.Context, in *CatRequest, opts ...client.CallOption) (*CatResponse, error) {
	req := c.c.NewRequest(c.name, "CatService.List", in)
	out := new(CatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catService) ListTree(ctx context.Context, in *CatRequest, opts ...client.CallOption) (*CatResponse, error) {
	req := c.c.NewRequest(c.name, "CatService.ListTree", in)
	out := new(CatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catService) SelectTree(ctx context.Context, in *CatRequest, opts ...client.CallOption) (*CatResponse, error) {
	req := c.c.NewRequest(c.name, "CatService.SelectTree", in)
	out := new(CatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CatService service

type CatServiceHandler interface {
	// 分类新增
	Create(context.Context, *Cat, *CatResponse) error
	// 分类修改
	Update(context.Context, *Cat, *CatResponse) error
	// 分类删除
	Delete(context.Context, *Cat, *CatResponse) error
	// 分类获取
	Get(context.Context, *Cat, *CatResponse) error
	// 分类查询
	Search(context.Context, *CatRequest, *CatResponse) error
	// 分类列表
	List(context.Context, *CatRequest, *CatResponse) error
	// 分类列表树
	ListTree(context.Context, *CatRequest, *CatResponse) error
	// 分类选择树
	SelectTree(context.Context, *CatRequest, *CatResponse) error
}

func RegisterCatServiceHandler(s server.Server, hdlr CatServiceHandler, opts ...server.HandlerOption) error {
	type catService interface {
		Create(ctx context.Context, in *Cat, out *CatResponse) error
		Update(ctx context.Context, in *Cat, out *CatResponse) error
		Delete(ctx context.Context, in *Cat, out *CatResponse) error
		Get(ctx context.Context, in *Cat, out *CatResponse) error
		Search(ctx context.Context, in *CatRequest, out *CatResponse) error
		List(ctx context.Context, in *CatRequest, out *CatResponse) error
		ListTree(ctx context.Context, in *CatRequest, out *CatResponse) error
		SelectTree(ctx context.Context, in *CatRequest, out *CatResponse) error
	}
	type CatService struct {
		catService
	}
	h := &catServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CatService{h}, opts...))
}

type catServiceHandler struct {
	CatServiceHandler
}

func (h *catServiceHandler) Create(ctx context.Context, in *Cat, out *CatResponse) error {
	return h.CatServiceHandler.Create(ctx, in, out)
}

func (h *catServiceHandler) Update(ctx context.Context, in *Cat, out *CatResponse) error {
	return h.CatServiceHandler.Update(ctx, in, out)
}

func (h *catServiceHandler) Delete(ctx context.Context, in *Cat, out *CatResponse) error {
	return h.CatServiceHandler.Delete(ctx, in, out)
}

func (h *catServiceHandler) Get(ctx context.Context, in *Cat, out *CatResponse) error {
	return h.CatServiceHandler.Get(ctx, in, out)
}

func (h *catServiceHandler) Search(ctx context.Context, in *CatRequest, out *CatResponse) error {
	return h.CatServiceHandler.Search(ctx, in, out)
}

func (h *catServiceHandler) List(ctx context.Context, in *CatRequest, out *CatResponse) error {
	return h.CatServiceHandler.List(ctx, in, out)
}

func (h *catServiceHandler) ListTree(ctx context.Context, in *CatRequest, out *CatResponse) error {
	return h.CatServiceHandler.ListTree(ctx, in, out)
}

func (h *catServiceHandler) SelectTree(ctx context.Context, in *CatRequest, out *CatResponse) error {
	return h.CatServiceHandler.SelectTree(ctx, in, out)
}
