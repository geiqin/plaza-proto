// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: callbackService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CallbackService service

func NewCallbackServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CallbackService service

type CallbackService interface {
	// 素材上传通知
	MaterialUploadNotify(ctx context.Context, in *CallbackReq, opts ...client.CallOption) (*CallbackResponse, error)
	// 附件上传通知
	AttachmentUploadNotify(ctx context.Context, in *CallbackReq, opts ...client.CallOption) (*CallbackResponse, error)
}

type callbackService struct {
	c    client.Client
	name string
}

func NewCallbackService(name string, c client.Client) CallbackService {
	return &callbackService{
		c:    c,
		name: name,
	}
}

func (c *callbackService) MaterialUploadNotify(ctx context.Context, in *CallbackReq, opts ...client.CallOption) (*CallbackResponse, error) {
	req := c.c.NewRequest(c.name, "CallbackService.MaterialUploadNotify", in)
	out := new(CallbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackService) AttachmentUploadNotify(ctx context.Context, in *CallbackReq, opts ...client.CallOption) (*CallbackResponse, error) {
	req := c.c.NewRequest(c.name, "CallbackService.AttachmentUploadNotify", in)
	out := new(CallbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CallbackService service

type CallbackServiceHandler interface {
	// 素材上传通知
	MaterialUploadNotify(context.Context, *CallbackReq, *CallbackResponse) error
	// 附件上传通知
	AttachmentUploadNotify(context.Context, *CallbackReq, *CallbackResponse) error
}

func RegisterCallbackServiceHandler(s server.Server, hdlr CallbackServiceHandler, opts ...server.HandlerOption) error {
	type callbackService interface {
		MaterialUploadNotify(ctx context.Context, in *CallbackReq, out *CallbackResponse) error
		AttachmentUploadNotify(ctx context.Context, in *CallbackReq, out *CallbackResponse) error
	}
	type CallbackService struct {
		callbackService
	}
	h := &callbackServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CallbackService{h}, opts...))
}

type callbackServiceHandler struct {
	CallbackServiceHandler
}

func (h *callbackServiceHandler) MaterialUploadNotify(ctx context.Context, in *CallbackReq, out *CallbackResponse) error {
	return h.CallbackServiceHandler.MaterialUploadNotify(ctx, in, out)
}

func (h *callbackServiceHandler) AttachmentUploadNotify(ctx context.Context, in *CallbackReq, out *CallbackResponse) error {
	return h.CallbackServiceHandler.AttachmentUploadNotify(ctx, in, out)
}
