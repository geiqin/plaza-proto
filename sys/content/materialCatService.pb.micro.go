// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: materialCatService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MaterialCatService service

func NewMaterialCatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MaterialCatService service

type MaterialCatService interface {
	// 素材分类新增
	Create(ctx context.Context, in *MaterialCat, opts ...client.CallOption) (*MaterialCatResponse, error)
	// 素材分类修改
	Update(ctx context.Context, in *MaterialCat, opts ...client.CallOption) (*MaterialCatResponse, error)
	// 素材分类删除
	Delete(ctx context.Context, in *MaterialCat, opts ...client.CallOption) (*MaterialCatResponse, error)
	// 素材分类获取
	Get(ctx context.Context, in *MaterialCat, opts ...client.CallOption) (*MaterialCatResponse, error)
	// 素材分类查询
	Search(ctx context.Context, in *MaterialCatRequest, opts ...client.CallOption) (*MaterialCatResponse, error)
	// 素材分类列表
	List(ctx context.Context, in *MaterialCatRequest, opts ...client.CallOption) (*MaterialCatResponse, error)
	// 素材分类列表树
	ListTree(ctx context.Context, in *MaterialCatRequest, opts ...client.CallOption) (*MaterialCatResponse, error)
	// 素材分类选择树
	SelectTree(ctx context.Context, in *MaterialCatRequest, opts ...client.CallOption) (*MaterialCatResponse, error)
}

type materialCatService struct {
	c    client.Client
	name string
}

func NewMaterialCatService(name string, c client.Client) MaterialCatService {
	return &materialCatService{
		c:    c,
		name: name,
	}
}

func (c *materialCatService) Create(ctx context.Context, in *MaterialCat, opts ...client.CallOption) (*MaterialCatResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialCatService.Create", in)
	out := new(MaterialCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialCatService) Update(ctx context.Context, in *MaterialCat, opts ...client.CallOption) (*MaterialCatResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialCatService.Update", in)
	out := new(MaterialCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialCatService) Delete(ctx context.Context, in *MaterialCat, opts ...client.CallOption) (*MaterialCatResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialCatService.Delete", in)
	out := new(MaterialCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialCatService) Get(ctx context.Context, in *MaterialCat, opts ...client.CallOption) (*MaterialCatResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialCatService.Get", in)
	out := new(MaterialCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialCatService) Search(ctx context.Context, in *MaterialCatRequest, opts ...client.CallOption) (*MaterialCatResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialCatService.Search", in)
	out := new(MaterialCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialCatService) List(ctx context.Context, in *MaterialCatRequest, opts ...client.CallOption) (*MaterialCatResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialCatService.List", in)
	out := new(MaterialCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialCatService) ListTree(ctx context.Context, in *MaterialCatRequest, opts ...client.CallOption) (*MaterialCatResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialCatService.ListTree", in)
	out := new(MaterialCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialCatService) SelectTree(ctx context.Context, in *MaterialCatRequest, opts ...client.CallOption) (*MaterialCatResponse, error) {
	req := c.c.NewRequest(c.name, "MaterialCatService.SelectTree", in)
	out := new(MaterialCatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MaterialCatService service

type MaterialCatServiceHandler interface {
	// 素材分类新增
	Create(context.Context, *MaterialCat, *MaterialCatResponse) error
	// 素材分类修改
	Update(context.Context, *MaterialCat, *MaterialCatResponse) error
	// 素材分类删除
	Delete(context.Context, *MaterialCat, *MaterialCatResponse) error
	// 素材分类获取
	Get(context.Context, *MaterialCat, *MaterialCatResponse) error
	// 素材分类查询
	Search(context.Context, *MaterialCatRequest, *MaterialCatResponse) error
	// 素材分类列表
	List(context.Context, *MaterialCatRequest, *MaterialCatResponse) error
	// 素材分类列表树
	ListTree(context.Context, *MaterialCatRequest, *MaterialCatResponse) error
	// 素材分类选择树
	SelectTree(context.Context, *MaterialCatRequest, *MaterialCatResponse) error
}

func RegisterMaterialCatServiceHandler(s server.Server, hdlr MaterialCatServiceHandler, opts ...server.HandlerOption) error {
	type materialCatService interface {
		Create(ctx context.Context, in *MaterialCat, out *MaterialCatResponse) error
		Update(ctx context.Context, in *MaterialCat, out *MaterialCatResponse) error
		Delete(ctx context.Context, in *MaterialCat, out *MaterialCatResponse) error
		Get(ctx context.Context, in *MaterialCat, out *MaterialCatResponse) error
		Search(ctx context.Context, in *MaterialCatRequest, out *MaterialCatResponse) error
		List(ctx context.Context, in *MaterialCatRequest, out *MaterialCatResponse) error
		ListTree(ctx context.Context, in *MaterialCatRequest, out *MaterialCatResponse) error
		SelectTree(ctx context.Context, in *MaterialCatRequest, out *MaterialCatResponse) error
	}
	type MaterialCatService struct {
		materialCatService
	}
	h := &materialCatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MaterialCatService{h}, opts...))
}

type materialCatServiceHandler struct {
	MaterialCatServiceHandler
}

func (h *materialCatServiceHandler) Create(ctx context.Context, in *MaterialCat, out *MaterialCatResponse) error {
	return h.MaterialCatServiceHandler.Create(ctx, in, out)
}

func (h *materialCatServiceHandler) Update(ctx context.Context, in *MaterialCat, out *MaterialCatResponse) error {
	return h.MaterialCatServiceHandler.Update(ctx, in, out)
}

func (h *materialCatServiceHandler) Delete(ctx context.Context, in *MaterialCat, out *MaterialCatResponse) error {
	return h.MaterialCatServiceHandler.Delete(ctx, in, out)
}

func (h *materialCatServiceHandler) Get(ctx context.Context, in *MaterialCat, out *MaterialCatResponse) error {
	return h.MaterialCatServiceHandler.Get(ctx, in, out)
}

func (h *materialCatServiceHandler) Search(ctx context.Context, in *MaterialCatRequest, out *MaterialCatResponse) error {
	return h.MaterialCatServiceHandler.Search(ctx, in, out)
}

func (h *materialCatServiceHandler) List(ctx context.Context, in *MaterialCatRequest, out *MaterialCatResponse) error {
	return h.MaterialCatServiceHandler.List(ctx, in, out)
}

func (h *materialCatServiceHandler) ListTree(ctx context.Context, in *MaterialCatRequest, out *MaterialCatResponse) error {
	return h.MaterialCatServiceHandler.ListTree(ctx, in, out)
}

func (h *materialCatServiceHandler) SelectTree(ctx context.Context, in *MaterialCatRequest, out *MaterialCatResponse) error {
	return h.MaterialCatServiceHandler.SelectTree(ctx, in, out)
}
