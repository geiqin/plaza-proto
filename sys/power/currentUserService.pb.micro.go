// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: currentUserService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CurrentUserService service

func NewCurrentUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CurrentUserService service

type CurrentUserService interface {
	Info(ctx context.Context, in *CurrentUserRequest, opts ...client.CallOption) (*CurrentUserResponse, error)
	UserInfo(ctx context.Context, in *CurrentUserRequest, opts ...client.CallOption) (*CurrentUserResponse, error)
	PermissionInfo(ctx context.Context, in *CurrentUserRequest, opts ...client.CallOption) (*CurrentUserResponse, error)
	ModifyMobile(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	ModifyAvatar(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	ModifyPwd(ctx context.Context, in *CurrentUserRequest, opts ...client.CallOption) (*UserResponse, error)
}

type currentUserService struct {
	c    client.Client
	name string
}

func NewCurrentUserService(name string, c client.Client) CurrentUserService {
	return &currentUserService{
		c:    c,
		name: name,
	}
}

func (c *currentUserService) Info(ctx context.Context, in *CurrentUserRequest, opts ...client.CallOption) (*CurrentUserResponse, error) {
	req := c.c.NewRequest(c.name, "CurrentUserService.Info", in)
	out := new(CurrentUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserService) UserInfo(ctx context.Context, in *CurrentUserRequest, opts ...client.CallOption) (*CurrentUserResponse, error) {
	req := c.c.NewRequest(c.name, "CurrentUserService.UserInfo", in)
	out := new(CurrentUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserService) PermissionInfo(ctx context.Context, in *CurrentUserRequest, opts ...client.CallOption) (*CurrentUserResponse, error) {
	req := c.c.NewRequest(c.name, "CurrentUserService.PermissionInfo", in)
	out := new(CurrentUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserService) ModifyMobile(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "CurrentUserService.ModifyMobile", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserService) ModifyAvatar(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "CurrentUserService.ModifyAvatar", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentUserService) ModifyPwd(ctx context.Context, in *CurrentUserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "CurrentUserService.ModifyPwd", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CurrentUserService service

type CurrentUserServiceHandler interface {
	Info(context.Context, *CurrentUserRequest, *CurrentUserResponse) error
	UserInfo(context.Context, *CurrentUserRequest, *CurrentUserResponse) error
	PermissionInfo(context.Context, *CurrentUserRequest, *CurrentUserResponse) error
	ModifyMobile(context.Context, *User, *UserResponse) error
	ModifyAvatar(context.Context, *User, *UserResponse) error
	ModifyPwd(context.Context, *CurrentUserRequest, *UserResponse) error
}

func RegisterCurrentUserServiceHandler(s server.Server, hdlr CurrentUserServiceHandler, opts ...server.HandlerOption) error {
	type currentUserService interface {
		Info(ctx context.Context, in *CurrentUserRequest, out *CurrentUserResponse) error
		UserInfo(ctx context.Context, in *CurrentUserRequest, out *CurrentUserResponse) error
		PermissionInfo(ctx context.Context, in *CurrentUserRequest, out *CurrentUserResponse) error
		ModifyMobile(ctx context.Context, in *User, out *UserResponse) error
		ModifyAvatar(ctx context.Context, in *User, out *UserResponse) error
		ModifyPwd(ctx context.Context, in *CurrentUserRequest, out *UserResponse) error
	}
	type CurrentUserService struct {
		currentUserService
	}
	h := &currentUserServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CurrentUserService{h}, opts...))
}

type currentUserServiceHandler struct {
	CurrentUserServiceHandler
}

func (h *currentUserServiceHandler) Info(ctx context.Context, in *CurrentUserRequest, out *CurrentUserResponse) error {
	return h.CurrentUserServiceHandler.Info(ctx, in, out)
}

func (h *currentUserServiceHandler) UserInfo(ctx context.Context, in *CurrentUserRequest, out *CurrentUserResponse) error {
	return h.CurrentUserServiceHandler.UserInfo(ctx, in, out)
}

func (h *currentUserServiceHandler) PermissionInfo(ctx context.Context, in *CurrentUserRequest, out *CurrentUserResponse) error {
	return h.CurrentUserServiceHandler.PermissionInfo(ctx, in, out)
}

func (h *currentUserServiceHandler) ModifyMobile(ctx context.Context, in *User, out *UserResponse) error {
	return h.CurrentUserServiceHandler.ModifyMobile(ctx, in, out)
}

func (h *currentUserServiceHandler) ModifyAvatar(ctx context.Context, in *User, out *UserResponse) error {
	return h.CurrentUserServiceHandler.ModifyAvatar(ctx, in, out)
}

func (h *currentUserServiceHandler) ModifyPwd(ctx context.Context, in *CurrentUserRequest, out *UserResponse) error {
	return h.CurrentUserServiceHandler.ModifyPwd(ctx, in, out)
}
