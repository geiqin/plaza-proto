// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pluginService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PluginService service

func NewPluginServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PluginService service

type PluginService interface {
	//安装插件
	Install(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error)
	//升级插件
	Upgrade(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error)
	//移除插件
	Remove(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error)
	//插件详情
	Detail(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error)
	//获取插件配置信息
	GetPluginData(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error)
	//保存插件配置信息
	SavePluginData(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error)
	//插件查询
	Search(ctx context.Context, in *PluginRequest, opts ...client.CallOption) (*PluginResponse, error)
	//应用商店
	AppStore(ctx context.Context, in *PluginRequest, opts ...client.CallOption) (*PluginResponse, error)
}

type pluginService struct {
	c    client.Client
	name string
}

func NewPluginService(name string, c client.Client) PluginService {
	return &pluginService{
		c:    c,
		name: name,
	}
}

func (c *pluginService) Install(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error) {
	req := c.c.NewRequest(c.name, "PluginService.Install", in)
	out := new(PluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginService) Upgrade(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error) {
	req := c.c.NewRequest(c.name, "PluginService.Upgrade", in)
	out := new(PluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginService) Remove(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error) {
	req := c.c.NewRequest(c.name, "PluginService.Remove", in)
	out := new(PluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginService) Detail(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error) {
	req := c.c.NewRequest(c.name, "PluginService.Detail", in)
	out := new(PluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginService) GetPluginData(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error) {
	req := c.c.NewRequest(c.name, "PluginService.GetPluginData", in)
	out := new(PluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginService) SavePluginData(ctx context.Context, in *Plugin, opts ...client.CallOption) (*PluginResponse, error) {
	req := c.c.NewRequest(c.name, "PluginService.SavePluginData", in)
	out := new(PluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginService) Search(ctx context.Context, in *PluginRequest, opts ...client.CallOption) (*PluginResponse, error) {
	req := c.c.NewRequest(c.name, "PluginService.Search", in)
	out := new(PluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginService) AppStore(ctx context.Context, in *PluginRequest, opts ...client.CallOption) (*PluginResponse, error) {
	req := c.c.NewRequest(c.name, "PluginService.AppStore", in)
	out := new(PluginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PluginService service

type PluginServiceHandler interface {
	//安装插件
	Install(context.Context, *Plugin, *PluginResponse) error
	//升级插件
	Upgrade(context.Context, *Plugin, *PluginResponse) error
	//移除插件
	Remove(context.Context, *Plugin, *PluginResponse) error
	//插件详情
	Detail(context.Context, *Plugin, *PluginResponse) error
	//获取插件配置信息
	GetPluginData(context.Context, *Plugin, *PluginResponse) error
	//保存插件配置信息
	SavePluginData(context.Context, *Plugin, *PluginResponse) error
	//插件查询
	Search(context.Context, *PluginRequest, *PluginResponse) error
	//应用商店
	AppStore(context.Context, *PluginRequest, *PluginResponse) error
}

func RegisterPluginServiceHandler(s server.Server, hdlr PluginServiceHandler, opts ...server.HandlerOption) error {
	type pluginService interface {
		Install(ctx context.Context, in *Plugin, out *PluginResponse) error
		Upgrade(ctx context.Context, in *Plugin, out *PluginResponse) error
		Remove(ctx context.Context, in *Plugin, out *PluginResponse) error
		Detail(ctx context.Context, in *Plugin, out *PluginResponse) error
		GetPluginData(ctx context.Context, in *Plugin, out *PluginResponse) error
		SavePluginData(ctx context.Context, in *Plugin, out *PluginResponse) error
		Search(ctx context.Context, in *PluginRequest, out *PluginResponse) error
		AppStore(ctx context.Context, in *PluginRequest, out *PluginResponse) error
	}
	type PluginService struct {
		pluginService
	}
	h := &pluginServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PluginService{h}, opts...))
}

type pluginServiceHandler struct {
	PluginServiceHandler
}

func (h *pluginServiceHandler) Install(ctx context.Context, in *Plugin, out *PluginResponse) error {
	return h.PluginServiceHandler.Install(ctx, in, out)
}

func (h *pluginServiceHandler) Upgrade(ctx context.Context, in *Plugin, out *PluginResponse) error {
	return h.PluginServiceHandler.Upgrade(ctx, in, out)
}

func (h *pluginServiceHandler) Remove(ctx context.Context, in *Plugin, out *PluginResponse) error {
	return h.PluginServiceHandler.Remove(ctx, in, out)
}

func (h *pluginServiceHandler) Detail(ctx context.Context, in *Plugin, out *PluginResponse) error {
	return h.PluginServiceHandler.Detail(ctx, in, out)
}

func (h *pluginServiceHandler) GetPluginData(ctx context.Context, in *Plugin, out *PluginResponse) error {
	return h.PluginServiceHandler.GetPluginData(ctx, in, out)
}

func (h *pluginServiceHandler) SavePluginData(ctx context.Context, in *Plugin, out *PluginResponse) error {
	return h.PluginServiceHandler.SavePluginData(ctx, in, out)
}

func (h *pluginServiceHandler) Search(ctx context.Context, in *PluginRequest, out *PluginResponse) error {
	return h.PluginServiceHandler.Search(ctx, in, out)
}

func (h *pluginServiceHandler) AppStore(ctx context.Context, in *PluginRequest, out *PluginResponse) error {
	return h.PluginServiceHandler.AppStore(ctx, in, out)
}
