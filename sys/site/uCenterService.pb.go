// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: uCenterService.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UCenterIndexData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpenMember       bool            `protobuf:"varint,1,opt,name=is_open_member,json=isOpenMember,proto3" json:"is_open_member"`
	Address            string          `protobuf:"bytes,2,opt,name=address,proto3" json:"address"` //addres
	Adminid            bool            `protobuf:"varint,3,opt,name=adminid,proto3" json:"adminid"`
	AgentApplyOpen     bool            `protobuf:"varint,4,opt,name=agent_apply_open,json=agentApplyOpen,proto3" json:"agent_apply_open"`
	AgentId            int64           `protobuf:"varint,5,opt,name=agent_id,json=agentId,proto3" json:"agent_id"`
	AgentLevel         int32           `protobuf:"varint,6,opt,name=agent_level,json=agentLevel,proto3" json:"agent_level"`
	AgentLevelName     string          `protobuf:"bytes,7,opt,name=agent_level_name,json=agentLevelName,proto3" json:"agent_level_name"`
	Avatar             string          `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar"`
	BalanceFuncStatus  bool            `protobuf:"varint,9,opt,name=balance_func_status,json=balanceFuncStatus,proto3" json:"balance_func_status"`
	Birthday           string          `protobuf:"bytes,10,opt,name=birthday,proto3" json:"birthday"`
	BrokenCommission   int64           `protobuf:"varint,11,opt,name=broken_commission,json=brokenCommission,proto3" json:"broken_commission"`
	BrokenDay          int32           `protobuf:"varint,13,opt,name=broken_day,json=brokenDay,proto3" json:"broken_day"`
	BrokeragePrice     string          `protobuf:"bytes,14,opt,name=brokerage_price,json=brokeragePrice,proto3" json:"brokerage_price"`
	CardId             string          `protobuf:"bytes,15,opt,name=card_id,json=cardId,proto3" json:"card_id"`
	CollectCount       int64           `protobuf:"varint,16,opt,name=collect_count,json=collectCount,proto3" json:"collect_count"`
	CommissionCount    int64           `protobuf:"varint,17,opt,name=commission_count,json=commissionCount,proto3" json:"commission_count"`
	CouponCount        int64           `protobuf:"varint,18,opt,name=coupon_count,json=couponCount,proto3" json:"coupon_count"`
	Integral           int64           `protobuf:"varint,19,opt,name=integral,proto3" json:"integral"` //积分
	Surplus            int64           `protobuf:"varint,20,opt,name=surplus,proto3" json:"surplus"`   //余额
	DivisionChangeTime string          `protobuf:"bytes,21,opt,name=division_change_time,json=divisionChangeTime,proto3" json:"division_change_time"`
	DivisionEndTime    string          `protobuf:"bytes,23,opt,name=division_end_time,json=divisionEndTime,proto3" json:"division_end_time"`
	DivisionId         int64           `protobuf:"varint,24,opt,name=division_id,json=divisionId,proto3" json:"division_id"`
	DivisionInvite     int64           `protobuf:"varint,25,opt,name=division_invite,json=divisionInvite,proto3" json:"division_invite"`
	DivisionName       string          `protobuf:"bytes,26,opt,name=division_name,json=divisionName,proto3" json:"division_name"`
	DivisionOpen       bool            `protobuf:"varint,27,opt,name=division_open,json=divisionOpen,proto3" json:"division_open"`
	DivisionPercent    int64           `protobuf:"varint,28,opt,name=division_percent,json=divisionPercent,proto3" json:"division_percent"`
	DivisionStatus     string          `protobuf:"bytes,29,opt,name=division_status,json=divisionStatus,proto3" json:"division_status"`
	DivisionType       string          `protobuf:"bytes,30,opt,name=division_type,json=divisionType,proto3" json:"division_type"`
	Exp                string          `protobuf:"bytes,31,opt,name=exp,proto3" json:"exp"`
	ExtractPrice       int64           `protobuf:"varint,32,opt,name=extract_price,json=extractPrice,proto3" json:"extract_price"`                  //extractPrice
	ExtractTotalPrice  int64           `protobuf:"varint,33,opt,name=extract_total_price,json=extractTotalPrice,proto3" json:"extract_total_price"` //extractTotalPrice
	ExtractType        []string        `protobuf:"bytes,34,rep,name=extract_type,json=extractType,proto3" json:"extract_type"`                      // ["0", "1", "2"]
	OrderStatusNum     *OrderStatusNum `protobuf:"bytes,35,opt,name=orderStatusNum,proto3" json:"orderStatusNum"`
	Uid                int64           `protobuf:"varint,36,opt,name=uid,proto3" json:"uid"`
	Uniqid             string          `protobuf:"bytes,37,opt,name=uniqid,proto3" json:"uniqid"`
	UserType           string          `protobuf:"bytes,38,opt,name=user_type,json=userType,proto3" json:"user_type"`
	Vip                bool            `protobuf:"varint,39,opt,name=vip,proto3" json:"vip"`
	VipStatus          string          `protobuf:"bytes,40,opt,name=vip_status,json=vipStatus,proto3" json:"vip_status"`
	YesterDay          int32           `protobuf:"varint,41,opt,name=yesterDay,proto3" json:"yesterDay"`
	MemberFuncStatus   bool            `protobuf:"varint,70,opt,name=member_func_status,json=memberFuncStatus,proto3" json:"member_func_status"`
	MemberStyle        string          `protobuf:"bytes,71,opt,name=member_style,json=memberStyle,proto3" json:"member_style"`
	Nickname           string          `protobuf:"bytes,72,opt,name=nickname,proto3" json:"nickname"`
	Notice             int32           `protobuf:"varint,73,opt,name=notice,proto3" json:"notice"`
	NowMoney           string          `protobuf:"bytes,74,opt,name=now_money,json=nowMoney,proto3" json:"now_money"`
	OrderStatusSum     string          `protobuf:"bytes,42,opt,name=orderStatusSum,proto3" json:"orderStatusSum"`               //金额
	OverdueTime        int64           `protobuf:"varint,43,opt,name=overdue_time,json=overdueTime,proto3" json:"overdue_time"` // 1741662776
	PartnerId          int64           `protobuf:"varint,44,opt,name=partner_id,json=partnerId,proto3" json:"partner_id"`
	PayCount           int64           `protobuf:"varint,45,opt,name=pay_count,json=payCount,proto3" json:"pay_count"`
	PayVipStatus       bool            `protobuf:"varint,46,opt,name=pay_vip_status,json=payVipStatus,proto3" json:"pay_vip_status"`
	Phone              string          `protobuf:"bytes,47,opt,name=phone,proto3" json:"phone"`
	RealName           string          `protobuf:"bytes,48,opt,name=real_name,json=realName,proto3" json:"real_name"`
	Recharge           int64           `protobuf:"varint,49,opt,name=recharge,proto3" json:"recharge"`
	RechargeSwitch     bool            `protobuf:"varint,50,opt,name=recharge_switch,json=rechargeSwitch,proto3" json:"recharge_switch"`
	RecordPhone        string          `protobuf:"bytes,51,opt,name=record_phone,json=recordPhone,proto3" json:"record_phone"`
	ServiceNum         int64           `protobuf:"varint,52,opt,name=service_num,json=serviceNum,proto3" json:"service_num"`
	SignNum            int64           `protobuf:"varint,53,opt,name=sign_num,json=signNum,proto3" json:"sign_num"`
	SignRemind         int64           `protobuf:"varint,54,opt,name=sign_remind,json=signRemind,proto3" json:"sign_remind"`
	SpecialInvoice     bool            `protobuf:"varint,55,opt,name=special_invoice,json=specialInvoice,proto3" json:"special_invoice"`
	SpreadCount        int64           `protobuf:"varint,56,opt,name=spread_count,json=spreadCount,proto3" json:"spread_count"`
	SpreadLevelCount   int64           `protobuf:"varint,57,opt,name=spread_level_count,json=spreadLevelCount,proto3" json:"spread_level_count"`
	SpreadOpen         bool            `protobuf:"varint,58,opt,name=spread_open,json=spreadOpen,proto3" json:"spread_open"`
	SpreadStatus       bool            `protobuf:"varint,59,opt,name=spread_status,json=spreadStatus,proto3" json:"spread_status"`
	SpreadTime         int64           `protobuf:"varint,60,opt,name=spread_time,json=spreadTime,proto3" json:"spread_time"`
	SpreadUid          int64           `protobuf:"varint,61,opt,name=spread_uid,json=spreadUid,proto3" json:"spread_uid"`
	StaffId            int64           `protobuf:"varint,62,opt,name=staff_id,json=staffId,proto3" json:"staff_id"`
	Statu              bool            `protobuf:"varint,63,opt,name=statu,proto3" json:"statu"`
	Status             string          `protobuf:"bytes,64,opt,name=status,proto3" json:"status"`
	SvipOpen           bool            `protobuf:"varint,65,opt,name=svip_open,json=svipOpen,proto3" json:"svip_open"`
}

func (x *UCenterIndexData) Reset() {
	*x = UCenterIndexData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uCenterService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UCenterIndexData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UCenterIndexData) ProtoMessage() {}

func (x *UCenterIndexData) ProtoReflect() protoreflect.Message {
	mi := &file_uCenterService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UCenterIndexData.ProtoReflect.Descriptor instead.
func (*UCenterIndexData) Descriptor() ([]byte, []int) {
	return file_uCenterService_proto_rawDescGZIP(), []int{0}
}

func (x *UCenterIndexData) GetIsOpenMember() bool {
	if x != nil {
		return x.IsOpenMember
	}
	return false
}

func (x *UCenterIndexData) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UCenterIndexData) GetAdminid() bool {
	if x != nil {
		return x.Adminid
	}
	return false
}

func (x *UCenterIndexData) GetAgentApplyOpen() bool {
	if x != nil {
		return x.AgentApplyOpen
	}
	return false
}

func (x *UCenterIndexData) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *UCenterIndexData) GetAgentLevel() int32 {
	if x != nil {
		return x.AgentLevel
	}
	return 0
}

func (x *UCenterIndexData) GetAgentLevelName() string {
	if x != nil {
		return x.AgentLevelName
	}
	return ""
}

func (x *UCenterIndexData) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UCenterIndexData) GetBalanceFuncStatus() bool {
	if x != nil {
		return x.BalanceFuncStatus
	}
	return false
}

func (x *UCenterIndexData) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *UCenterIndexData) GetBrokenCommission() int64 {
	if x != nil {
		return x.BrokenCommission
	}
	return 0
}

func (x *UCenterIndexData) GetBrokenDay() int32 {
	if x != nil {
		return x.BrokenDay
	}
	return 0
}

func (x *UCenterIndexData) GetBrokeragePrice() string {
	if x != nil {
		return x.BrokeragePrice
	}
	return ""
}

func (x *UCenterIndexData) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *UCenterIndexData) GetCollectCount() int64 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *UCenterIndexData) GetCommissionCount() int64 {
	if x != nil {
		return x.CommissionCount
	}
	return 0
}

func (x *UCenterIndexData) GetCouponCount() int64 {
	if x != nil {
		return x.CouponCount
	}
	return 0
}

func (x *UCenterIndexData) GetIntegral() int64 {
	if x != nil {
		return x.Integral
	}
	return 0
}

func (x *UCenterIndexData) GetSurplus() int64 {
	if x != nil {
		return x.Surplus
	}
	return 0
}

func (x *UCenterIndexData) GetDivisionChangeTime() string {
	if x != nil {
		return x.DivisionChangeTime
	}
	return ""
}

func (x *UCenterIndexData) GetDivisionEndTime() string {
	if x != nil {
		return x.DivisionEndTime
	}
	return ""
}

func (x *UCenterIndexData) GetDivisionId() int64 {
	if x != nil {
		return x.DivisionId
	}
	return 0
}

func (x *UCenterIndexData) GetDivisionInvite() int64 {
	if x != nil {
		return x.DivisionInvite
	}
	return 0
}

func (x *UCenterIndexData) GetDivisionName() string {
	if x != nil {
		return x.DivisionName
	}
	return ""
}

func (x *UCenterIndexData) GetDivisionOpen() bool {
	if x != nil {
		return x.DivisionOpen
	}
	return false
}

func (x *UCenterIndexData) GetDivisionPercent() int64 {
	if x != nil {
		return x.DivisionPercent
	}
	return 0
}

func (x *UCenterIndexData) GetDivisionStatus() string {
	if x != nil {
		return x.DivisionStatus
	}
	return ""
}

func (x *UCenterIndexData) GetDivisionType() string {
	if x != nil {
		return x.DivisionType
	}
	return ""
}

func (x *UCenterIndexData) GetExp() string {
	if x != nil {
		return x.Exp
	}
	return ""
}

func (x *UCenterIndexData) GetExtractPrice() int64 {
	if x != nil {
		return x.ExtractPrice
	}
	return 0
}

func (x *UCenterIndexData) GetExtractTotalPrice() int64 {
	if x != nil {
		return x.ExtractTotalPrice
	}
	return 0
}

func (x *UCenterIndexData) GetExtractType() []string {
	if x != nil {
		return x.ExtractType
	}
	return nil
}

func (x *UCenterIndexData) GetOrderStatusNum() *OrderStatusNum {
	if x != nil {
		return x.OrderStatusNum
	}
	return nil
}

func (x *UCenterIndexData) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UCenterIndexData) GetUniqid() string {
	if x != nil {
		return x.Uniqid
	}
	return ""
}

func (x *UCenterIndexData) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *UCenterIndexData) GetVip() bool {
	if x != nil {
		return x.Vip
	}
	return false
}

func (x *UCenterIndexData) GetVipStatus() string {
	if x != nil {
		return x.VipStatus
	}
	return ""
}

func (x *UCenterIndexData) GetYesterDay() int32 {
	if x != nil {
		return x.YesterDay
	}
	return 0
}

func (x *UCenterIndexData) GetMemberFuncStatus() bool {
	if x != nil {
		return x.MemberFuncStatus
	}
	return false
}

func (x *UCenterIndexData) GetMemberStyle() string {
	if x != nil {
		return x.MemberStyle
	}
	return ""
}

func (x *UCenterIndexData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UCenterIndexData) GetNotice() int32 {
	if x != nil {
		return x.Notice
	}
	return 0
}

func (x *UCenterIndexData) GetNowMoney() string {
	if x != nil {
		return x.NowMoney
	}
	return ""
}

func (x *UCenterIndexData) GetOrderStatusSum() string {
	if x != nil {
		return x.OrderStatusSum
	}
	return ""
}

func (x *UCenterIndexData) GetOverdueTime() int64 {
	if x != nil {
		return x.OverdueTime
	}
	return 0
}

func (x *UCenterIndexData) GetPartnerId() int64 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *UCenterIndexData) GetPayCount() int64 {
	if x != nil {
		return x.PayCount
	}
	return 0
}

func (x *UCenterIndexData) GetPayVipStatus() bool {
	if x != nil {
		return x.PayVipStatus
	}
	return false
}

func (x *UCenterIndexData) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UCenterIndexData) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UCenterIndexData) GetRecharge() int64 {
	if x != nil {
		return x.Recharge
	}
	return 0
}

func (x *UCenterIndexData) GetRechargeSwitch() bool {
	if x != nil {
		return x.RechargeSwitch
	}
	return false
}

func (x *UCenterIndexData) GetRecordPhone() string {
	if x != nil {
		return x.RecordPhone
	}
	return ""
}

func (x *UCenterIndexData) GetServiceNum() int64 {
	if x != nil {
		return x.ServiceNum
	}
	return 0
}

func (x *UCenterIndexData) GetSignNum() int64 {
	if x != nil {
		return x.SignNum
	}
	return 0
}

func (x *UCenterIndexData) GetSignRemind() int64 {
	if x != nil {
		return x.SignRemind
	}
	return 0
}

func (x *UCenterIndexData) GetSpecialInvoice() bool {
	if x != nil {
		return x.SpecialInvoice
	}
	return false
}

func (x *UCenterIndexData) GetSpreadCount() int64 {
	if x != nil {
		return x.SpreadCount
	}
	return 0
}

func (x *UCenterIndexData) GetSpreadLevelCount() int64 {
	if x != nil {
		return x.SpreadLevelCount
	}
	return 0
}

func (x *UCenterIndexData) GetSpreadOpen() bool {
	if x != nil {
		return x.SpreadOpen
	}
	return false
}

func (x *UCenterIndexData) GetSpreadStatus() bool {
	if x != nil {
		return x.SpreadStatus
	}
	return false
}

func (x *UCenterIndexData) GetSpreadTime() int64 {
	if x != nil {
		return x.SpreadTime
	}
	return 0
}

func (x *UCenterIndexData) GetSpreadUid() int64 {
	if x != nil {
		return x.SpreadUid
	}
	return 0
}

func (x *UCenterIndexData) GetStaffId() int64 {
	if x != nil {
		return x.StaffId
	}
	return 0
}

func (x *UCenterIndexData) GetStatu() bool {
	if x != nil {
		return x.Statu
	}
	return false
}

func (x *UCenterIndexData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UCenterIndexData) GetSvipOpen() bool {
	if x != nil {
		return x.SvipOpen
	}
	return false
}

type UCenterMenuData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiyData             *UCenterMenuDataDiy `protobuf:"bytes,1,opt,name=diy_data,json=diyData,proto3" json:"diy_data"`
	RoutineContactType  string              `protobuf:"bytes,2,opt,name=routine_contact_type,json=routineContactType,proto3" json:"routine_contact_type"`
	RoutineMyMenus      []*PicLinkInfo      `protobuf:"bytes,3,rep,name=routine_my_menus,json=routineMyMenus,proto3" json:"routine_my_menus"`
	RoutineMyBanner     []*PicLinkInfo      `protobuf:"bytes,4,rep,name=routine_my_banner,json=routineMyBanner,proto3" json:"routine_my_banner"`
	RoutineSpreadBanner []*PicLinkInfo      `protobuf:"bytes,5,rep,name=routine_spread_banner,json=routineSpreadBanner,proto3" json:"routine_spread_banner"`
}

func (x *UCenterMenuData) Reset() {
	*x = UCenterMenuData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uCenterService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UCenterMenuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UCenterMenuData) ProtoMessage() {}

func (x *UCenterMenuData) ProtoReflect() protoreflect.Message {
	mi := &file_uCenterService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UCenterMenuData.ProtoReflect.Descriptor instead.
func (*UCenterMenuData) Descriptor() ([]byte, []int) {
	return file_uCenterService_proto_rawDescGZIP(), []int{1}
}

func (x *UCenterMenuData) GetDiyData() *UCenterMenuDataDiy {
	if x != nil {
		return x.DiyData
	}
	return nil
}

func (x *UCenterMenuData) GetRoutineContactType() string {
	if x != nil {
		return x.RoutineContactType
	}
	return ""
}

func (x *UCenterMenuData) GetRoutineMyMenus() []*PicLinkInfo {
	if x != nil {
		return x.RoutineMyMenus
	}
	return nil
}

func (x *UCenterMenuData) GetRoutineMyBanner() []*PicLinkInfo {
	if x != nil {
		return x.RoutineMyBanner
	}
	return nil
}

func (x *UCenterMenuData) GetRoutineSpreadBanner() []*PicLinkInfo {
	if x != nil {
		return x.RoutineSpreadBanner
	}
	return nil
}

type UCenterMenuDataDiy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value          int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value"`
	OrderStatus    int32 `protobuf:"varint,2,opt,name=order_status,json=orderStatus,proto3" json:"order_status"`
	MyBannerStatus bool  `protobuf:"varint,3,opt,name=my_banner_status,json=myBannerStatus,proto3" json:"my_banner_status"`
	MyMenusStatus  int32 `protobuf:"varint,4,opt,name=my_menus_status,json=myMenusStatus,proto3" json:"my_menus_status"`
	BusinessStatus int32 `protobuf:"varint,5,opt,name=business_status,json=businessStatus,proto3" json:"business_status"`
}

func (x *UCenterMenuDataDiy) Reset() {
	*x = UCenterMenuDataDiy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uCenterService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UCenterMenuDataDiy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UCenterMenuDataDiy) ProtoMessage() {}

func (x *UCenterMenuDataDiy) ProtoReflect() protoreflect.Message {
	mi := &file_uCenterService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UCenterMenuDataDiy.ProtoReflect.Descriptor instead.
func (*UCenterMenuDataDiy) Descriptor() ([]byte, []int) {
	return file_uCenterService_proto_rawDescGZIP(), []int{2}
}

func (x *UCenterMenuDataDiy) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UCenterMenuDataDiy) GetOrderStatus() int32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *UCenterMenuDataDiy) GetMyBannerStatus() bool {
	if x != nil {
		return x.MyBannerStatus
	}
	return false
}

func (x *UCenterMenuDataDiy) GetMyMenusStatus() int32 {
	if x != nil {
		return x.MyMenusStatus
	}
	return 0
}

func (x *UCenterMenuDataDiy) GetBusinessStatus() int32 {
	if x != nil {
		return x.BusinessStatus
	}
	return 0
}

// 订单状态统计
type OrderStatusNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AliPayStatus     bool   `protobuf:"varint,1,opt,name=ali_pay_status,json=aliPayStatus,proto3" json:"ali_pay_status"`
	CompleteCount    int64  `protobuf:"varint,2,opt,name=complete_count,json=completeCount,proto3" json:"complete_count"`
	EvaluatedCount   int64  `protobuf:"varint,3,opt,name=evaluated_count,json=evaluatedCount,proto3" json:"evaluated_count"`
	FriendPayStatus  bool   `protobuf:"varint,4,opt,name=friend_pay_status,json=friendPayStatus,proto3" json:"friend_pay_status"`
	NoRefundCount    int64  `protobuf:"varint,5,opt,name=no_refund_count,json=noRefundCount,proto3" json:"no_refund_count"`
	OrderCount       int64  `protobuf:"varint,6,opt,name=order_count,json=orderCount,proto3" json:"order_count"`
	PayWeixinOpen    bool   `protobuf:"varint,7,opt,name=pay_weixin_open,json=payWeixinOpen,proto3" json:"pay_weixin_open"`
	PcOrderCount     int64  `protobuf:"varint,8,opt,name=pc_order_count,json=pcOrderCount,proto3" json:"pc_order_count"`
	ReceivedCount    int64  `protobuf:"varint,9,opt,name=received_count,json=receivedCount,proto3" json:"received_count"`
	RefundCount      int64  `protobuf:"varint,10,opt,name=refund_count,json=refundCount,proto3" json:"refund_count"`
	RefundedCount    int64  `protobuf:"varint,11,opt,name=refunded_count,json=refundedCount,proto3" json:"refunded_count"`
	RefundingCount   int64  `protobuf:"varint,12,opt,name=refunding_count,json=refundingCount,proto3" json:"refunding_count"`
	SumPrice         int64  `protobuf:"varint,13,opt,name=sum_price,json=sumPrice,proto3" json:"sum_price"`
	UnpaidCount      int64  `protobuf:"varint,14,opt,name=unpaid_count,json=unpaidCount,proto3" json:"unpaid_count"`
	UnshippedCount   int64  `protobuf:"varint,15,opt,name=unshipped_count,json=unshippedCount,proto3" json:"unshipped_count"`
	SurplusPayStatus string `protobuf:"bytes,16,opt,name=surplus_pay_status,json=surplusPayStatus,proto3" json:"surplus_pay_status"` //yue_pay_status
}

func (x *OrderStatusNum) Reset() {
	*x = OrderStatusNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uCenterService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusNum) ProtoMessage() {}

func (x *OrderStatusNum) ProtoReflect() protoreflect.Message {
	mi := &file_uCenterService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusNum.ProtoReflect.Descriptor instead.
func (*OrderStatusNum) Descriptor() ([]byte, []int) {
	return file_uCenterService_proto_rawDescGZIP(), []int{3}
}

func (x *OrderStatusNum) GetAliPayStatus() bool {
	if x != nil {
		return x.AliPayStatus
	}
	return false
}

func (x *OrderStatusNum) GetCompleteCount() int64 {
	if x != nil {
		return x.CompleteCount
	}
	return 0
}

func (x *OrderStatusNum) GetEvaluatedCount() int64 {
	if x != nil {
		return x.EvaluatedCount
	}
	return 0
}

func (x *OrderStatusNum) GetFriendPayStatus() bool {
	if x != nil {
		return x.FriendPayStatus
	}
	return false
}

func (x *OrderStatusNum) GetNoRefundCount() int64 {
	if x != nil {
		return x.NoRefundCount
	}
	return 0
}

func (x *OrderStatusNum) GetOrderCount() int64 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *OrderStatusNum) GetPayWeixinOpen() bool {
	if x != nil {
		return x.PayWeixinOpen
	}
	return false
}

func (x *OrderStatusNum) GetPcOrderCount() int64 {
	if x != nil {
		return x.PcOrderCount
	}
	return 0
}

func (x *OrderStatusNum) GetReceivedCount() int64 {
	if x != nil {
		return x.ReceivedCount
	}
	return 0
}

func (x *OrderStatusNum) GetRefundCount() int64 {
	if x != nil {
		return x.RefundCount
	}
	return 0
}

func (x *OrderStatusNum) GetRefundedCount() int64 {
	if x != nil {
		return x.RefundedCount
	}
	return 0
}

func (x *OrderStatusNum) GetRefundingCount() int64 {
	if x != nil {
		return x.RefundingCount
	}
	return 0
}

func (x *OrderStatusNum) GetSumPrice() int64 {
	if x != nil {
		return x.SumPrice
	}
	return 0
}

func (x *OrderStatusNum) GetUnpaidCount() int64 {
	if x != nil {
		return x.UnpaidCount
	}
	return 0
}

func (x *OrderStatusNum) GetUnshippedCount() int64 {
	if x != nil {
		return x.UnshippedCount
	}
	return 0
}

func (x *OrderStatusNum) GetSurplusPayStatus() string {
	if x != nil {
		return x.SurplusPayStatus
	}
	return ""
}

type SwitchUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SwitchUserInfo) Reset() {
	*x = SwitchUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uCenterService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchUserInfo) ProtoMessage() {}

func (x *SwitchUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_uCenterService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchUserInfo.ProtoReflect.Descriptor instead.
func (*SwitchUserInfo) Descriptor() ([]byte, []int) {
	return file_uCenterService_proto_rawDescGZIP(), []int{4}
}

type UCenterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top       int32    `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64    `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sort      []string `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort"`
	DateRange []string `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int64  `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	//以下为自定义参数
	Type      string `protobuf:"bytes,11,opt,name=type,proto3" json:"type"`                            //类型
	Name      string `protobuf:"bytes,12,opt,name=name,proto3" json:"name"`                            //名称
	EventType string `protobuf:"bytes,13,opt,name=event_type,json=eventType,proto3" json:"event_type"` //事件类型
	Status    string `protobuf:"bytes,14,opt,name=status,proto3" json:"status"`                        //状态
	Platform  string `protobuf:"bytes,15,opt,name=platform,proto3" json:"platform"`
}

func (x *UCenterRequest) Reset() {
	*x = UCenterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uCenterService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UCenterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UCenterRequest) ProtoMessage() {}

func (x *UCenterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_uCenterService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UCenterRequest.ProtoReflect.Descriptor instead.
func (*UCenterRequest) Descriptor() ([]byte, []int) {
	return file_uCenterService_proto_rawDescGZIP(), []int{5}
}

func (x *UCenterRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *UCenterRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *UCenterRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UCenterRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *UCenterRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *UCenterRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *UCenterRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UCenterRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UCenterRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UCenterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UCenterRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *UCenterRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UCenterRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type UCenterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg   string            `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg"`
	Index *UCenterIndexData `protobuf:"bytes,2,opt,name=index,proto3" json:"index"`
	Menu  *UCenterMenuData  `protobuf:"bytes,3,opt,name=menu,proto3" json:"menu"`
}

func (x *UCenterResponse) Reset() {
	*x = UCenterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_uCenterService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UCenterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UCenterResponse) ProtoMessage() {}

func (x *UCenterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_uCenterService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UCenterResponse.ProtoReflect.Descriptor instead.
func (*UCenterResponse) Descriptor() ([]byte, []int) {
	return file_uCenterService_proto_rawDescGZIP(), []int{6}
}

func (x *UCenterResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UCenterResponse) GetIndex() *UCenterIndexData {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *UCenterResponse) GetMenu() *UCenterMenuData {
	if x != nil {
		return x.Menu
	}
	return nil
}

var File_uCenterService_proto protoreflect.FileDescriptor

var file_uCenterService_proto_rawDesc = []byte{
	0x0a, 0x14, 0x75, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x12, 0x0a, 0x10, 0x55, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x70, 0x6c,
	0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x78, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e,
	0x69, 0x71, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x76, 0x69,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x79, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x77, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x75, 0x6d, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72,
	0x64, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x5f, 0x76,
	0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x70, 0x61, 0x79, 0x56, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x69, 0x67,
	0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x75, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x76, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x76, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xcb, 0x02, 0x0a, 0x0f,
	0x55, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x08, 0x64, 0x69, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x79, 0x52,
	0x07, 0x64, 0x69, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x79, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x50, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x4d, 0x79, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x50, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x4d, 0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x49,
	0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x55, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x79, 0x5f,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x79, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x79,
	0x4d, 0x65, 0x6e, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xfa, 0x04, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x69, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x61, 0x6c, 0x69, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x5f,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6e,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x57, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x63,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x70, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x70, 0x61, 0x69,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75,
	0x6e, 0x70, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x70,
	0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x10, 0x0a, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xc1, 0x02, 0x0a, 0x0e, 0x55, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x55, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x6e, 0x75, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x32, 0xd2,
	0x01, 0x0a, 0x0e, 0x55, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x55, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x04, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x74, 0x12, 0x18, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x55, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_uCenterService_proto_rawDescOnce sync.Once
	file_uCenterService_proto_rawDescData = file_uCenterService_proto_rawDesc
)

func file_uCenterService_proto_rawDescGZIP() []byte {
	file_uCenterService_proto_rawDescOnce.Do(func() {
		file_uCenterService_proto_rawDescData = protoimpl.X.CompressGZIP(file_uCenterService_proto_rawDescData)
	})
	return file_uCenterService_proto_rawDescData
}

var file_uCenterService_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_uCenterService_proto_goTypes = []interface{}{
	(*UCenterIndexData)(nil),   // 0: services.UCenterIndexData
	(*UCenterMenuData)(nil),    // 1: services.UCenterMenuData
	(*UCenterMenuDataDiy)(nil), // 2: services.UCenterMenuDataDiy
	(*OrderStatusNum)(nil),     // 3: services.OrderStatusNum
	(*SwitchUserInfo)(nil),     // 4: services.switchUserInfo
	(*UCenterRequest)(nil),     // 5: services.UCenterRequest
	(*UCenterResponse)(nil),    // 6: services.UCenterResponse
	(*PicLinkInfo)(nil),        // 7: services.PicLinkInfo
}
var file_uCenterService_proto_depIdxs = []int32{
	3,  // 0: services.UCenterIndexData.orderStatusNum:type_name -> services.OrderStatusNum
	2,  // 1: services.UCenterMenuData.diy_data:type_name -> services.UCenterMenuDataDiy
	7,  // 2: services.UCenterMenuData.routine_my_menus:type_name -> services.PicLinkInfo
	7,  // 3: services.UCenterMenuData.routine_my_banner:type_name -> services.PicLinkInfo
	7,  // 4: services.UCenterMenuData.routine_spread_banner:type_name -> services.PicLinkInfo
	0,  // 5: services.UCenterResponse.index:type_name -> services.UCenterIndexData
	1,  // 6: services.UCenterResponse.menu:type_name -> services.UCenterMenuData
	5,  // 7: services.UCenterService.Index:input_type -> services.UCenterRequest
	5,  // 8: services.UCenterService.Menu:input_type -> services.UCenterRequest
	5,  // 9: services.UCenterService.SetVisit:input_type -> services.UCenterRequest
	6,  // 10: services.UCenterService.Index:output_type -> services.UCenterResponse
	6,  // 11: services.UCenterService.Menu:output_type -> services.UCenterResponse
	6,  // 12: services.UCenterService.SetVisit:output_type -> services.UCenterResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_uCenterService_proto_init() }
func file_uCenterService_proto_init() {
	if File_uCenterService_proto != nil {
		return
	}
	file_baseInfoService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_uCenterService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UCenterIndexData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uCenterService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UCenterMenuData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uCenterService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UCenterMenuDataDiy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uCenterService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uCenterService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uCenterService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UCenterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_uCenterService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UCenterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_uCenterService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_uCenterService_proto_goTypes,
		DependencyIndexes: file_uCenterService_proto_depIdxs,
		MessageInfos:      file_uCenterService_proto_msgTypes,
	}.Build()
	File_uCenterService_proto = out.File
	file_uCenterService_proto_rawDesc = nil
	file_uCenterService_proto_goTypes = nil
	file_uCenterService_proto_depIdxs = nil
}
