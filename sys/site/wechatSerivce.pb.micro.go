// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: wechatSerivce.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WechatService service

func NewWechatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WechatService service

type WechatService interface {
	//获取微信sdk配置
	Config(ctx context.Context, in *WechatRequest, opts ...client.CallOption) (*WechatResponse, error)
	//获取订阅消息id
	TempIds(ctx context.Context, in *WechatRequest, opts ...client.CallOption) (*WechatResponse, error)
	//获取直播列表
	Live(ctx context.Context, in *WechatRequest, opts ...client.CallOption) (*WechatResponse, error)
	//获取公众号关注
	Follow(ctx context.Context, in *WechatRequest, opts ...client.CallOption) (*WechatResponse, error)
}

type wechatService struct {
	c    client.Client
	name string
}

func NewWechatService(name string, c client.Client) WechatService {
	return &wechatService{
		c:    c,
		name: name,
	}
}

func (c *wechatService) Config(ctx context.Context, in *WechatRequest, opts ...client.CallOption) (*WechatResponse, error) {
	req := c.c.NewRequest(c.name, "WechatService.Config", in)
	out := new(WechatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatService) TempIds(ctx context.Context, in *WechatRequest, opts ...client.CallOption) (*WechatResponse, error) {
	req := c.c.NewRequest(c.name, "WechatService.TempIds", in)
	out := new(WechatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatService) Live(ctx context.Context, in *WechatRequest, opts ...client.CallOption) (*WechatResponse, error) {
	req := c.c.NewRequest(c.name, "WechatService.Live", in)
	out := new(WechatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatService) Follow(ctx context.Context, in *WechatRequest, opts ...client.CallOption) (*WechatResponse, error) {
	req := c.c.NewRequest(c.name, "WechatService.Follow", in)
	out := new(WechatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WechatService service

type WechatServiceHandler interface {
	//获取微信sdk配置
	Config(context.Context, *WechatRequest, *WechatResponse) error
	//获取订阅消息id
	TempIds(context.Context, *WechatRequest, *WechatResponse) error
	//获取直播列表
	Live(context.Context, *WechatRequest, *WechatResponse) error
	//获取公众号关注
	Follow(context.Context, *WechatRequest, *WechatResponse) error
}

func RegisterWechatServiceHandler(s server.Server, hdlr WechatServiceHandler, opts ...server.HandlerOption) error {
	type wechatService interface {
		Config(ctx context.Context, in *WechatRequest, out *WechatResponse) error
		TempIds(ctx context.Context, in *WechatRequest, out *WechatResponse) error
		Live(ctx context.Context, in *WechatRequest, out *WechatResponse) error
		Follow(ctx context.Context, in *WechatRequest, out *WechatResponse) error
	}
	type WechatService struct {
		wechatService
	}
	h := &wechatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WechatService{h}, opts...))
}

type wechatServiceHandler struct {
	WechatServiceHandler
}

func (h *wechatServiceHandler) Config(ctx context.Context, in *WechatRequest, out *WechatResponse) error {
	return h.WechatServiceHandler.Config(ctx, in, out)
}

func (h *wechatServiceHandler) TempIds(ctx context.Context, in *WechatRequest, out *WechatResponse) error {
	return h.WechatServiceHandler.TempIds(ctx, in, out)
}

func (h *wechatServiceHandler) Live(ctx context.Context, in *WechatRequest, out *WechatResponse) error {
	return h.WechatServiceHandler.Live(ctx, in, out)
}

func (h *wechatServiceHandler) Follow(ctx context.Context, in *WechatRequest, out *WechatResponse) error {
	return h.WechatServiceHandler.Follow(ctx, in, out)
}
