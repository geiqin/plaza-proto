// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: frontendService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FrontendService service

func NewFrontendServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FrontendService service

type FrontendService interface {
	//前端初始化
	Init(ctx context.Context, in *FrontendRequest, opts ...client.CallOption) (*FrontendResponse, error)
	//首页数据
	Home(ctx context.Context, in *FrontendRequest, opts ...client.CallOption) (*FrontendResponse, error)
	//个人中心数据
	UserCenter(ctx context.Context, in *FrontendRequest, opts ...client.CallOption) (*FrontendResponse, error)
	//搜索页数据
	SearchPage(ctx context.Context, in *FrontendRequest, opts ...client.CallOption) (*FrontendResponse, error)
}

type frontendService struct {
	c    client.Client
	name string
}

func NewFrontendService(name string, c client.Client) FrontendService {
	return &frontendService{
		c:    c,
		name: name,
	}
}

func (c *frontendService) Init(ctx context.Context, in *FrontendRequest, opts ...client.CallOption) (*FrontendResponse, error) {
	req := c.c.NewRequest(c.name, "FrontendService.Init", in)
	out := new(FrontendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendService) Home(ctx context.Context, in *FrontendRequest, opts ...client.CallOption) (*FrontendResponse, error) {
	req := c.c.NewRequest(c.name, "FrontendService.Home", in)
	out := new(FrontendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendService) UserCenter(ctx context.Context, in *FrontendRequest, opts ...client.CallOption) (*FrontendResponse, error) {
	req := c.c.NewRequest(c.name, "FrontendService.UserCenter", in)
	out := new(FrontendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendService) SearchPage(ctx context.Context, in *FrontendRequest, opts ...client.CallOption) (*FrontendResponse, error) {
	req := c.c.NewRequest(c.name, "FrontendService.SearchPage", in)
	out := new(FrontendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrontendService service

type FrontendServiceHandler interface {
	//前端初始化
	Init(context.Context, *FrontendRequest, *FrontendResponse) error
	//首页数据
	Home(context.Context, *FrontendRequest, *FrontendResponse) error
	//个人中心数据
	UserCenter(context.Context, *FrontendRequest, *FrontendResponse) error
	//搜索页数据
	SearchPage(context.Context, *FrontendRequest, *FrontendResponse) error
}

func RegisterFrontendServiceHandler(s server.Server, hdlr FrontendServiceHandler, opts ...server.HandlerOption) error {
	type frontendService interface {
		Init(ctx context.Context, in *FrontendRequest, out *FrontendResponse) error
		Home(ctx context.Context, in *FrontendRequest, out *FrontendResponse) error
		UserCenter(ctx context.Context, in *FrontendRequest, out *FrontendResponse) error
		SearchPage(ctx context.Context, in *FrontendRequest, out *FrontendResponse) error
	}
	type FrontendService struct {
		frontendService
	}
	h := &frontendServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FrontendService{h}, opts...))
}

type frontendServiceHandler struct {
	FrontendServiceHandler
}

func (h *frontendServiceHandler) Init(ctx context.Context, in *FrontendRequest, out *FrontendResponse) error {
	return h.FrontendServiceHandler.Init(ctx, in, out)
}

func (h *frontendServiceHandler) Home(ctx context.Context, in *FrontendRequest, out *FrontendResponse) error {
	return h.FrontendServiceHandler.Home(ctx, in, out)
}

func (h *frontendServiceHandler) UserCenter(ctx context.Context, in *FrontendRequest, out *FrontendResponse) error {
	return h.FrontendServiceHandler.UserCenter(ctx, in, out)
}

func (h *frontendServiceHandler) SearchPage(ctx context.Context, in *FrontendRequest, out *FrontendResponse) error {
	return h.FrontendServiceHandler.SearchPage(ctx, in, out)
}
