// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: uCenter.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UCenterService service

func NewUCenterServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UCenterService service

type UCenterService interface {
	//个人中心首页
	Index(ctx context.Context, in *UCenterRequest, opts ...client.CallOption) (*UCenterResponse, error)
	//导航菜单
	Menu(ctx context.Context, in *UCenterRequest, opts ...client.CallOption) (*UCenterResponse, error)
	//设置访问
	SetVisit(ctx context.Context, in *UCenterRequest, opts ...client.CallOption) (*UCenterResponse, error)
}

type uCenterService struct {
	c    client.Client
	name string
}

func NewUCenterService(name string, c client.Client) UCenterService {
	return &uCenterService{
		c:    c,
		name: name,
	}
}

func (c *uCenterService) Index(ctx context.Context, in *UCenterRequest, opts ...client.CallOption) (*UCenterResponse, error) {
	req := c.c.NewRequest(c.name, "UCenterService.Index", in)
	out := new(UCenterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uCenterService) Menu(ctx context.Context, in *UCenterRequest, opts ...client.CallOption) (*UCenterResponse, error) {
	req := c.c.NewRequest(c.name, "UCenterService.Menu", in)
	out := new(UCenterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uCenterService) SetVisit(ctx context.Context, in *UCenterRequest, opts ...client.CallOption) (*UCenterResponse, error) {
	req := c.c.NewRequest(c.name, "UCenterService.SetVisit", in)
	out := new(UCenterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UCenterService service

type UCenterServiceHandler interface {
	//个人中心首页
	Index(context.Context, *UCenterRequest, *UCenterResponse) error
	//导航菜单
	Menu(context.Context, *UCenterRequest, *UCenterResponse) error
	//设置访问
	SetVisit(context.Context, *UCenterRequest, *UCenterResponse) error
}

func RegisterUCenterServiceHandler(s server.Server, hdlr UCenterServiceHandler, opts ...server.HandlerOption) error {
	type uCenterService interface {
		Index(ctx context.Context, in *UCenterRequest, out *UCenterResponse) error
		Menu(ctx context.Context, in *UCenterRequest, out *UCenterResponse) error
		SetVisit(ctx context.Context, in *UCenterRequest, out *UCenterResponse) error
	}
	type UCenterService struct {
		uCenterService
	}
	h := &uCenterServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UCenterService{h}, opts...))
}

type uCenterServiceHandler struct {
	UCenterServiceHandler
}

func (h *uCenterServiceHandler) Index(ctx context.Context, in *UCenterRequest, out *UCenterResponse) error {
	return h.UCenterServiceHandler.Index(ctx, in, out)
}

func (h *uCenterServiceHandler) Menu(ctx context.Context, in *UCenterRequest, out *UCenterResponse) error {
	return h.UCenterServiceHandler.Menu(ctx, in, out)
}

func (h *uCenterServiceHandler) SetVisit(ctx context.Context, in *UCenterRequest, out *UCenterResponse) error {
	return h.UCenterServiceHandler.SetVisit(ctx, in, out)
}
