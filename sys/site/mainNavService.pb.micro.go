// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mainNavService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MainNavService service

func NewMainNavServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MainNavService service

type MainNavService interface {
	Create(ctx context.Context, in *MainNav, opts ...client.CallOption) (*MainNavResponse, error)
	Update(ctx context.Context, in *MainNav, opts ...client.CallOption) (*MainNavResponse, error)
	Delete(ctx context.Context, in *MainNav, opts ...client.CallOption) (*MainNavResponse, error)
	Get(ctx context.Context, in *MainNav, opts ...client.CallOption) (*MainNavResponse, error)
	Search(ctx context.Context, in *MainNavRequest, opts ...client.CallOption) (*MainNavResponse, error)
	List(ctx context.Context, in *MainNavRequest, opts ...client.CallOption) (*MainNavResponse, error)
}

type mainNavService struct {
	c    client.Client
	name string
}

func NewMainNavService(name string, c client.Client) MainNavService {
	return &mainNavService{
		c:    c,
		name: name,
	}
}

func (c *mainNavService) Create(ctx context.Context, in *MainNav, opts ...client.CallOption) (*MainNavResponse, error) {
	req := c.c.NewRequest(c.name, "MainNavService.Create", in)
	out := new(MainNavResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainNavService) Update(ctx context.Context, in *MainNav, opts ...client.CallOption) (*MainNavResponse, error) {
	req := c.c.NewRequest(c.name, "MainNavService.Update", in)
	out := new(MainNavResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainNavService) Delete(ctx context.Context, in *MainNav, opts ...client.CallOption) (*MainNavResponse, error) {
	req := c.c.NewRequest(c.name, "MainNavService.Delete", in)
	out := new(MainNavResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainNavService) Get(ctx context.Context, in *MainNav, opts ...client.CallOption) (*MainNavResponse, error) {
	req := c.c.NewRequest(c.name, "MainNavService.Get", in)
	out := new(MainNavResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainNavService) Search(ctx context.Context, in *MainNavRequest, opts ...client.CallOption) (*MainNavResponse, error) {
	req := c.c.NewRequest(c.name, "MainNavService.Search", in)
	out := new(MainNavResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainNavService) List(ctx context.Context, in *MainNavRequest, opts ...client.CallOption) (*MainNavResponse, error) {
	req := c.c.NewRequest(c.name, "MainNavService.List", in)
	out := new(MainNavResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MainNavService service

type MainNavServiceHandler interface {
	Create(context.Context, *MainNav, *MainNavResponse) error
	Update(context.Context, *MainNav, *MainNavResponse) error
	Delete(context.Context, *MainNav, *MainNavResponse) error
	Get(context.Context, *MainNav, *MainNavResponse) error
	Search(context.Context, *MainNavRequest, *MainNavResponse) error
	List(context.Context, *MainNavRequest, *MainNavResponse) error
}

func RegisterMainNavServiceHandler(s server.Server, hdlr MainNavServiceHandler, opts ...server.HandlerOption) error {
	type mainNavService interface {
		Create(ctx context.Context, in *MainNav, out *MainNavResponse) error
		Update(ctx context.Context, in *MainNav, out *MainNavResponse) error
		Delete(ctx context.Context, in *MainNav, out *MainNavResponse) error
		Get(ctx context.Context, in *MainNav, out *MainNavResponse) error
		Search(ctx context.Context, in *MainNavRequest, out *MainNavResponse) error
		List(ctx context.Context, in *MainNavRequest, out *MainNavResponse) error
	}
	type MainNavService struct {
		mainNavService
	}
	h := &mainNavServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MainNavService{h}, opts...))
}

type mainNavServiceHandler struct {
	MainNavServiceHandler
}

func (h *mainNavServiceHandler) Create(ctx context.Context, in *MainNav, out *MainNavResponse) error {
	return h.MainNavServiceHandler.Create(ctx, in, out)
}

func (h *mainNavServiceHandler) Update(ctx context.Context, in *MainNav, out *MainNavResponse) error {
	return h.MainNavServiceHandler.Update(ctx, in, out)
}

func (h *mainNavServiceHandler) Delete(ctx context.Context, in *MainNav, out *MainNavResponse) error {
	return h.MainNavServiceHandler.Delete(ctx, in, out)
}

func (h *mainNavServiceHandler) Get(ctx context.Context, in *MainNav, out *MainNavResponse) error {
	return h.MainNavServiceHandler.Get(ctx, in, out)
}

func (h *mainNavServiceHandler) Search(ctx context.Context, in *MainNavRequest, out *MainNavResponse) error {
	return h.MainNavServiceHandler.Search(ctx, in, out)
}

func (h *mainNavServiceHandler) List(ctx context.Context, in *MainNavRequest, out *MainNavResponse) error {
	return h.MainNavServiceHandler.List(ctx, in, out)
}
