// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: templateService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TemplateService service

func NewTemplateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TemplateService service

type TemplateService interface {
	// 装修模版新增
	Create(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error)
	// 装修模版修改
	Update(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error)
	// 装修模版删除
	Delete(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error)
	// 装修模版复制
	Copy(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error)
	// 装修模版详情
	Detail(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error)
	// 装修模版预览
	Preview(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error)
	// 装修模版查询
	Search(ctx context.Context, in *TemplateRequest, opts ...client.CallOption) (*TemplateResponse, error)
}

type templateService struct {
	c    client.Client
	name string
}

func NewTemplateService(name string, c client.Client) TemplateService {
	return &templateService{
		c:    c,
		name: name,
	}
}

func (c *templateService) Create(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error) {
	req := c.c.NewRequest(c.name, "TemplateService.Create", in)
	out := new(TemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateService) Update(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error) {
	req := c.c.NewRequest(c.name, "TemplateService.Update", in)
	out := new(TemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateService) Delete(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error) {
	req := c.c.NewRequest(c.name, "TemplateService.Delete", in)
	out := new(TemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateService) Copy(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error) {
	req := c.c.NewRequest(c.name, "TemplateService.Copy", in)
	out := new(TemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateService) Detail(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error) {
	req := c.c.NewRequest(c.name, "TemplateService.Detail", in)
	out := new(TemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateService) Preview(ctx context.Context, in *Template, opts ...client.CallOption) (*TemplateResponse, error) {
	req := c.c.NewRequest(c.name, "TemplateService.Preview", in)
	out := new(TemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateService) Search(ctx context.Context, in *TemplateRequest, opts ...client.CallOption) (*TemplateResponse, error) {
	req := c.c.NewRequest(c.name, "TemplateService.Search", in)
	out := new(TemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TemplateService service

type TemplateServiceHandler interface {
	// 装修模版新增
	Create(context.Context, *Template, *TemplateResponse) error
	// 装修模版修改
	Update(context.Context, *Template, *TemplateResponse) error
	// 装修模版删除
	Delete(context.Context, *Template, *TemplateResponse) error
	// 装修模版复制
	Copy(context.Context, *Template, *TemplateResponse) error
	// 装修模版详情
	Detail(context.Context, *Template, *TemplateResponse) error
	// 装修模版预览
	Preview(context.Context, *Template, *TemplateResponse) error
	// 装修模版查询
	Search(context.Context, *TemplateRequest, *TemplateResponse) error
}

func RegisterTemplateServiceHandler(s server.Server, hdlr TemplateServiceHandler, opts ...server.HandlerOption) error {
	type templateService interface {
		Create(ctx context.Context, in *Template, out *TemplateResponse) error
		Update(ctx context.Context, in *Template, out *TemplateResponse) error
		Delete(ctx context.Context, in *Template, out *TemplateResponse) error
		Copy(ctx context.Context, in *Template, out *TemplateResponse) error
		Detail(ctx context.Context, in *Template, out *TemplateResponse) error
		Preview(ctx context.Context, in *Template, out *TemplateResponse) error
		Search(ctx context.Context, in *TemplateRequest, out *TemplateResponse) error
	}
	type TemplateService struct {
		templateService
	}
	h := &templateServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TemplateService{h}, opts...))
}

type templateServiceHandler struct {
	TemplateServiceHandler
}

func (h *templateServiceHandler) Create(ctx context.Context, in *Template, out *TemplateResponse) error {
	return h.TemplateServiceHandler.Create(ctx, in, out)
}

func (h *templateServiceHandler) Update(ctx context.Context, in *Template, out *TemplateResponse) error {
	return h.TemplateServiceHandler.Update(ctx, in, out)
}

func (h *templateServiceHandler) Delete(ctx context.Context, in *Template, out *TemplateResponse) error {
	return h.TemplateServiceHandler.Delete(ctx, in, out)
}

func (h *templateServiceHandler) Copy(ctx context.Context, in *Template, out *TemplateResponse) error {
	return h.TemplateServiceHandler.Copy(ctx, in, out)
}

func (h *templateServiceHandler) Detail(ctx context.Context, in *Template, out *TemplateResponse) error {
	return h.TemplateServiceHandler.Detail(ctx, in, out)
}

func (h *templateServiceHandler) Preview(ctx context.Context, in *Template, out *TemplateResponse) error {
	return h.TemplateServiceHandler.Preview(ctx, in, out)
}

func (h *templateServiceHandler) Search(ctx context.Context, in *TemplateRequest, out *TemplateResponse) error {
	return h.TemplateServiceHandler.Search(ctx, in, out)
}
