// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: publicService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PublicService service

func NewPublicServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PublicService service

type PublicService interface {
	WorkerManUrl(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error)
	BasicConfig(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error)
	SiteConfig(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error)
	Copyright(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error)
	GetOpenAdv(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error)
	Navigation(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error)
	Share(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error)
	LangVersion(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error)
	GetLangJson(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error)
}

type publicService struct {
	c    client.Client
	name string
}

func NewPublicService(name string, c client.Client) PublicService {
	return &publicService{
		c:    c,
		name: name,
	}
}

func (c *publicService) WorkerManUrl(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error) {
	req := c.c.NewRequest(c.name, "PublicService.WorkerManUrl", in)
	out := new(PublicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicService) BasicConfig(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error) {
	req := c.c.NewRequest(c.name, "PublicService.BasicConfig", in)
	out := new(PublicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicService) SiteConfig(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error) {
	req := c.c.NewRequest(c.name, "PublicService.SiteConfig", in)
	out := new(PublicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicService) Copyright(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error) {
	req := c.c.NewRequest(c.name, "PublicService.Copyright", in)
	out := new(PublicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicService) GetOpenAdv(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error) {
	req := c.c.NewRequest(c.name, "PublicService.GetOpenAdv", in)
	out := new(PublicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicService) Navigation(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error) {
	req := c.c.NewRequest(c.name, "PublicService.Navigation", in)
	out := new(PublicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicService) Share(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error) {
	req := c.c.NewRequest(c.name, "PublicService.Share", in)
	out := new(PublicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicService) LangVersion(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error) {
	req := c.c.NewRequest(c.name, "PublicService.LangVersion", in)
	out := new(PublicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicService) GetLangJson(ctx context.Context, in *PublicRequest, opts ...client.CallOption) (*PublicResponse, error) {
	req := c.c.NewRequest(c.name, "PublicService.GetLangJson", in)
	out := new(PublicResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PublicService service

type PublicServiceHandler interface {
	WorkerManUrl(context.Context, *PublicRequest, *PublicResponse) error
	BasicConfig(context.Context, *PublicRequest, *PublicResponse) error
	SiteConfig(context.Context, *PublicRequest, *PublicResponse) error
	Copyright(context.Context, *PublicRequest, *PublicResponse) error
	GetOpenAdv(context.Context, *PublicRequest, *PublicResponse) error
	Navigation(context.Context, *PublicRequest, *PublicResponse) error
	Share(context.Context, *PublicRequest, *PublicResponse) error
	LangVersion(context.Context, *PublicRequest, *PublicResponse) error
	GetLangJson(context.Context, *PublicRequest, *PublicResponse) error
}

func RegisterPublicServiceHandler(s server.Server, hdlr PublicServiceHandler, opts ...server.HandlerOption) error {
	type publicService interface {
		WorkerManUrl(ctx context.Context, in *PublicRequest, out *PublicResponse) error
		BasicConfig(ctx context.Context, in *PublicRequest, out *PublicResponse) error
		SiteConfig(ctx context.Context, in *PublicRequest, out *PublicResponse) error
		Copyright(ctx context.Context, in *PublicRequest, out *PublicResponse) error
		GetOpenAdv(ctx context.Context, in *PublicRequest, out *PublicResponse) error
		Navigation(ctx context.Context, in *PublicRequest, out *PublicResponse) error
		Share(ctx context.Context, in *PublicRequest, out *PublicResponse) error
		LangVersion(ctx context.Context, in *PublicRequest, out *PublicResponse) error
		GetLangJson(ctx context.Context, in *PublicRequest, out *PublicResponse) error
	}
	type PublicService struct {
		publicService
	}
	h := &publicServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PublicService{h}, opts...))
}

type publicServiceHandler struct {
	PublicServiceHandler
}

func (h *publicServiceHandler) WorkerManUrl(ctx context.Context, in *PublicRequest, out *PublicResponse) error {
	return h.PublicServiceHandler.WorkerManUrl(ctx, in, out)
}

func (h *publicServiceHandler) BasicConfig(ctx context.Context, in *PublicRequest, out *PublicResponse) error {
	return h.PublicServiceHandler.BasicConfig(ctx, in, out)
}

func (h *publicServiceHandler) SiteConfig(ctx context.Context, in *PublicRequest, out *PublicResponse) error {
	return h.PublicServiceHandler.SiteConfig(ctx, in, out)
}

func (h *publicServiceHandler) Copyright(ctx context.Context, in *PublicRequest, out *PublicResponse) error {
	return h.PublicServiceHandler.Copyright(ctx, in, out)
}

func (h *publicServiceHandler) GetOpenAdv(ctx context.Context, in *PublicRequest, out *PublicResponse) error {
	return h.PublicServiceHandler.GetOpenAdv(ctx, in, out)
}

func (h *publicServiceHandler) Navigation(ctx context.Context, in *PublicRequest, out *PublicResponse) error {
	return h.PublicServiceHandler.Navigation(ctx, in, out)
}

func (h *publicServiceHandler) Share(ctx context.Context, in *PublicRequest, out *PublicResponse) error {
	return h.PublicServiceHandler.Share(ctx, in, out)
}

func (h *publicServiceHandler) LangVersion(ctx context.Context, in *PublicRequest, out *PublicResponse) error {
	return h.PublicServiceHandler.LangVersion(ctx, in, out)
}

func (h *publicServiceHandler) GetLangJson(ctx context.Context, in *PublicRequest, out *PublicResponse) error {
	return h.PublicServiceHandler.GetLangJson(ctx, in, out)
}
