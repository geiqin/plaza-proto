// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: diyService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DiyService service

func NewDiyServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DiyService service

type DiyService interface {
	// DIY新增
	Create(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error)
	// DIY修改
	Update(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error)
	// DIY删除
	Delete(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error)
	// DIY默认
	Default(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error)
	// DIY获取
	Get(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error)
	// DIY查询
	Search(ctx context.Context, in *DiyRequest, opts ...client.CallOption) (*DiyResponse, error)
	//获取版本
	GetVersion(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error)
	ColorChange(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error)
}

type diyService struct {
	c    client.Client
	name string
}

func NewDiyService(name string, c client.Client) DiyService {
	return &diyService{
		c:    c,
		name: name,
	}
}

func (c *diyService) Create(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error) {
	req := c.c.NewRequest(c.name, "DiyService.Create", in)
	out := new(DiyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyService) Update(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error) {
	req := c.c.NewRequest(c.name, "DiyService.Update", in)
	out := new(DiyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyService) Delete(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error) {
	req := c.c.NewRequest(c.name, "DiyService.Delete", in)
	out := new(DiyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyService) Default(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error) {
	req := c.c.NewRequest(c.name, "DiyService.Default", in)
	out := new(DiyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyService) Get(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error) {
	req := c.c.NewRequest(c.name, "DiyService.Get", in)
	out := new(DiyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyService) Search(ctx context.Context, in *DiyRequest, opts ...client.CallOption) (*DiyResponse, error) {
	req := c.c.NewRequest(c.name, "DiyService.Search", in)
	out := new(DiyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyService) GetVersion(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error) {
	req := c.c.NewRequest(c.name, "DiyService.GetVersion", in)
	out := new(DiyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyService) ColorChange(ctx context.Context, in *Diy, opts ...client.CallOption) (*DiyResponse, error) {
	req := c.c.NewRequest(c.name, "DiyService.ColorChange", in)
	out := new(DiyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiyService service

type DiyServiceHandler interface {
	// DIY新增
	Create(context.Context, *Diy, *DiyResponse) error
	// DIY修改
	Update(context.Context, *Diy, *DiyResponse) error
	// DIY删除
	Delete(context.Context, *Diy, *DiyResponse) error
	// DIY默认
	Default(context.Context, *Diy, *DiyResponse) error
	// DIY获取
	Get(context.Context, *Diy, *DiyResponse) error
	// DIY查询
	Search(context.Context, *DiyRequest, *DiyResponse) error
	//获取版本
	GetVersion(context.Context, *Diy, *DiyResponse) error
	ColorChange(context.Context, *Diy, *DiyResponse) error
}

func RegisterDiyServiceHandler(s server.Server, hdlr DiyServiceHandler, opts ...server.HandlerOption) error {
	type diyService interface {
		Create(ctx context.Context, in *Diy, out *DiyResponse) error
		Update(ctx context.Context, in *Diy, out *DiyResponse) error
		Delete(ctx context.Context, in *Diy, out *DiyResponse) error
		Default(ctx context.Context, in *Diy, out *DiyResponse) error
		Get(ctx context.Context, in *Diy, out *DiyResponse) error
		Search(ctx context.Context, in *DiyRequest, out *DiyResponse) error
		GetVersion(ctx context.Context, in *Diy, out *DiyResponse) error
		ColorChange(ctx context.Context, in *Diy, out *DiyResponse) error
	}
	type DiyService struct {
		diyService
	}
	h := &diyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DiyService{h}, opts...))
}

type diyServiceHandler struct {
	DiyServiceHandler
}

func (h *diyServiceHandler) Create(ctx context.Context, in *Diy, out *DiyResponse) error {
	return h.DiyServiceHandler.Create(ctx, in, out)
}

func (h *diyServiceHandler) Update(ctx context.Context, in *Diy, out *DiyResponse) error {
	return h.DiyServiceHandler.Update(ctx, in, out)
}

func (h *diyServiceHandler) Delete(ctx context.Context, in *Diy, out *DiyResponse) error {
	return h.DiyServiceHandler.Delete(ctx, in, out)
}

func (h *diyServiceHandler) Default(ctx context.Context, in *Diy, out *DiyResponse) error {
	return h.DiyServiceHandler.Default(ctx, in, out)
}

func (h *diyServiceHandler) Get(ctx context.Context, in *Diy, out *DiyResponse) error {
	return h.DiyServiceHandler.Get(ctx, in, out)
}

func (h *diyServiceHandler) Search(ctx context.Context, in *DiyRequest, out *DiyResponse) error {
	return h.DiyServiceHandler.Search(ctx, in, out)
}

func (h *diyServiceHandler) GetVersion(ctx context.Context, in *Diy, out *DiyResponse) error {
	return h.DiyServiceHandler.GetVersion(ctx, in, out)
}

func (h *diyServiceHandler) ColorChange(ctx context.Context, in *Diy, out *DiyResponse) error {
	return h.DiyServiceHandler.ColorChange(ctx, in, out)
}
