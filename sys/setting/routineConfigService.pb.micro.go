// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: routineConfigService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoutineConfigService service

func NewRoutineConfigServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoutineConfigService service

type RoutineConfigService interface {
	// 销售渠道配置新增
	Create(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error)
	// 销售渠道配置修改
	Update(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error)
	// 销售渠道配置删除
	Delete(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error)
	// 销售渠道配置获取
	Get(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error)
	// 销售渠道配置查询
	Search(ctx context.Context, in *RoutineConfigRequest, opts ...client.CallOption) (*RoutineConfigResponse, error)
	// 销售渠道配置列表
	List(ctx context.Context, in *RoutineConfigRequest, opts ...client.CallOption) (*RoutineConfigResponse, error)
	// 销售渠道列表
	RoutineList(ctx context.Context, in *RoutineConfigRequest, opts ...client.CallOption) (*RoutineListResponse, error)
	// 获取微信小程序配置
	GetMPWexinConfig(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error)
	// 获取支付宝小程序配置
	GetMPAlipayConfig(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error)
	// 获取抖音小程序配置
	GetMPDouYinConfig(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error)
}

type routineConfigService struct {
	c    client.Client
	name string
}

func NewRoutineConfigService(name string, c client.Client) RoutineConfigService {
	return &routineConfigService{
		c:    c,
		name: name,
	}
}

func (c *routineConfigService) Create(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineConfigService.Create", in)
	out := new(RoutineConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineConfigService) Update(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineConfigService.Update", in)
	out := new(RoutineConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineConfigService) Delete(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineConfigService.Delete", in)
	out := new(RoutineConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineConfigService) Get(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineConfigService.Get", in)
	out := new(RoutineConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineConfigService) Search(ctx context.Context, in *RoutineConfigRequest, opts ...client.CallOption) (*RoutineConfigResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineConfigService.Search", in)
	out := new(RoutineConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineConfigService) List(ctx context.Context, in *RoutineConfigRequest, opts ...client.CallOption) (*RoutineConfigResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineConfigService.List", in)
	out := new(RoutineConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineConfigService) RoutineList(ctx context.Context, in *RoutineConfigRequest, opts ...client.CallOption) (*RoutineListResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineConfigService.RoutineList", in)
	out := new(RoutineListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineConfigService) GetMPWexinConfig(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineConfigService.GetMPWexinConfig", in)
	out := new(RoutineConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineConfigService) GetMPAlipayConfig(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineConfigService.GetMPAlipayConfig", in)
	out := new(RoutineConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineConfigService) GetMPDouYinConfig(ctx context.Context, in *RoutineConfig, opts ...client.CallOption) (*RoutineConfigResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineConfigService.GetMPDouYinConfig", in)
	out := new(RoutineConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoutineConfigService service

type RoutineConfigServiceHandler interface {
	// 销售渠道配置新增
	Create(context.Context, *RoutineConfig, *RoutineConfigResponse) error
	// 销售渠道配置修改
	Update(context.Context, *RoutineConfig, *RoutineConfigResponse) error
	// 销售渠道配置删除
	Delete(context.Context, *RoutineConfig, *RoutineConfigResponse) error
	// 销售渠道配置获取
	Get(context.Context, *RoutineConfig, *RoutineConfigResponse) error
	// 销售渠道配置查询
	Search(context.Context, *RoutineConfigRequest, *RoutineConfigResponse) error
	// 销售渠道配置列表
	List(context.Context, *RoutineConfigRequest, *RoutineConfigResponse) error
	// 销售渠道列表
	RoutineList(context.Context, *RoutineConfigRequest, *RoutineListResponse) error
	// 获取微信小程序配置
	GetMPWexinConfig(context.Context, *RoutineConfig, *RoutineConfigResponse) error
	// 获取支付宝小程序配置
	GetMPAlipayConfig(context.Context, *RoutineConfig, *RoutineConfigResponse) error
	// 获取抖音小程序配置
	GetMPDouYinConfig(context.Context, *RoutineConfig, *RoutineConfigResponse) error
}

func RegisterRoutineConfigServiceHandler(s server.Server, hdlr RoutineConfigServiceHandler, opts ...server.HandlerOption) error {
	type routineConfigService interface {
		Create(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error
		Update(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error
		Delete(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error
		Get(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error
		Search(ctx context.Context, in *RoutineConfigRequest, out *RoutineConfigResponse) error
		List(ctx context.Context, in *RoutineConfigRequest, out *RoutineConfigResponse) error
		RoutineList(ctx context.Context, in *RoutineConfigRequest, out *RoutineListResponse) error
		GetMPWexinConfig(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error
		GetMPAlipayConfig(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error
		GetMPDouYinConfig(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error
	}
	type RoutineConfigService struct {
		routineConfigService
	}
	h := &routineConfigServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoutineConfigService{h}, opts...))
}

type routineConfigServiceHandler struct {
	RoutineConfigServiceHandler
}

func (h *routineConfigServiceHandler) Create(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error {
	return h.RoutineConfigServiceHandler.Create(ctx, in, out)
}

func (h *routineConfigServiceHandler) Update(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error {
	return h.RoutineConfigServiceHandler.Update(ctx, in, out)
}

func (h *routineConfigServiceHandler) Delete(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error {
	return h.RoutineConfigServiceHandler.Delete(ctx, in, out)
}

func (h *routineConfigServiceHandler) Get(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error {
	return h.RoutineConfigServiceHandler.Get(ctx, in, out)
}

func (h *routineConfigServiceHandler) Search(ctx context.Context, in *RoutineConfigRequest, out *RoutineConfigResponse) error {
	return h.RoutineConfigServiceHandler.Search(ctx, in, out)
}

func (h *routineConfigServiceHandler) List(ctx context.Context, in *RoutineConfigRequest, out *RoutineConfigResponse) error {
	return h.RoutineConfigServiceHandler.List(ctx, in, out)
}

func (h *routineConfigServiceHandler) RoutineList(ctx context.Context, in *RoutineConfigRequest, out *RoutineListResponse) error {
	return h.RoutineConfigServiceHandler.RoutineList(ctx, in, out)
}

func (h *routineConfigServiceHandler) GetMPWexinConfig(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error {
	return h.RoutineConfigServiceHandler.GetMPWexinConfig(ctx, in, out)
}

func (h *routineConfigServiceHandler) GetMPAlipayConfig(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error {
	return h.RoutineConfigServiceHandler.GetMPAlipayConfig(ctx, in, out)
}

func (h *routineConfigServiceHandler) GetMPDouYinConfig(ctx context.Context, in *RoutineConfig, out *RoutineConfigResponse) error {
	return h.RoutineConfigServiceHandler.GetMPDouYinConfig(ctx, in, out)
}
