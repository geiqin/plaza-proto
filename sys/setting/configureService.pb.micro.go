// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: configureService.proto

package services

import (
	_ "github.com/geiqin/micro-kit/protobuf/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ConfigureService service

func NewConfigureServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ConfigureService service

type ConfigureService interface {
	//店铺配置
	SetStore(ctx context.Context, in *StoreConfig, opts ...client.CallOption) (*ConfigureResponse, error)
	GetStore(ctx context.Context, in *StoreConfig, opts ...client.CallOption) (*ConfigureResponse, error)
	//网站相关配置
	SetWebsite(ctx context.Context, in *WebsiteConfig, opts ...client.CallOption) (*ConfigureResponse, error)
	GetWebsite(ctx context.Context, in *WebsiteConfig, opts ...client.CallOption) (*ConfigureResponse, error)
	//手机APP配置
	SetMobile(ctx context.Context, in *MobileConfig, opts ...client.CallOption) (*ConfigureResponse, error)
	GetMobile(ctx context.Context, in *MobileConfig, opts ...client.CallOption) (*ConfigureResponse, error)
	//支付配置
	SetPayment(ctx context.Context, in *PaymentConfig, opts ...client.CallOption) (*ConfigureResponse, error)
	GetPayment(ctx context.Context, in *PaymentConfig, opts ...client.CallOption) (*ConfigureResponse, error)
}

type configureService struct {
	c    client.Client
	name string
}

func NewConfigureService(name string, c client.Client) ConfigureService {
	return &configureService{
		c:    c,
		name: name,
	}
}

func (c *configureService) SetStore(ctx context.Context, in *StoreConfig, opts ...client.CallOption) (*ConfigureResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigureService.SetStore", in)
	out := new(ConfigureResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureService) GetStore(ctx context.Context, in *StoreConfig, opts ...client.CallOption) (*ConfigureResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigureService.GetStore", in)
	out := new(ConfigureResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureService) SetWebsite(ctx context.Context, in *WebsiteConfig, opts ...client.CallOption) (*ConfigureResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigureService.SetWebsite", in)
	out := new(ConfigureResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureService) GetWebsite(ctx context.Context, in *WebsiteConfig, opts ...client.CallOption) (*ConfigureResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigureService.GetWebsite", in)
	out := new(ConfigureResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureService) SetMobile(ctx context.Context, in *MobileConfig, opts ...client.CallOption) (*ConfigureResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigureService.SetMobile", in)
	out := new(ConfigureResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureService) GetMobile(ctx context.Context, in *MobileConfig, opts ...client.CallOption) (*ConfigureResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigureService.GetMobile", in)
	out := new(ConfigureResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureService) SetPayment(ctx context.Context, in *PaymentConfig, opts ...client.CallOption) (*ConfigureResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigureService.SetPayment", in)
	out := new(ConfigureResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureService) GetPayment(ctx context.Context, in *PaymentConfig, opts ...client.CallOption) (*ConfigureResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigureService.GetPayment", in)
	out := new(ConfigureResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigureService service

type ConfigureServiceHandler interface {
	//店铺配置
	SetStore(context.Context, *StoreConfig, *ConfigureResponse) error
	GetStore(context.Context, *StoreConfig, *ConfigureResponse) error
	//网站相关配置
	SetWebsite(context.Context, *WebsiteConfig, *ConfigureResponse) error
	GetWebsite(context.Context, *WebsiteConfig, *ConfigureResponse) error
	//手机APP配置
	SetMobile(context.Context, *MobileConfig, *ConfigureResponse) error
	GetMobile(context.Context, *MobileConfig, *ConfigureResponse) error
	//支付配置
	SetPayment(context.Context, *PaymentConfig, *ConfigureResponse) error
	GetPayment(context.Context, *PaymentConfig, *ConfigureResponse) error
}

func RegisterConfigureServiceHandler(s server.Server, hdlr ConfigureServiceHandler, opts ...server.HandlerOption) error {
	type configureService interface {
		SetStore(ctx context.Context, in *StoreConfig, out *ConfigureResponse) error
		GetStore(ctx context.Context, in *StoreConfig, out *ConfigureResponse) error
		SetWebsite(ctx context.Context, in *WebsiteConfig, out *ConfigureResponse) error
		GetWebsite(ctx context.Context, in *WebsiteConfig, out *ConfigureResponse) error
		SetMobile(ctx context.Context, in *MobileConfig, out *ConfigureResponse) error
		GetMobile(ctx context.Context, in *MobileConfig, out *ConfigureResponse) error
		SetPayment(ctx context.Context, in *PaymentConfig, out *ConfigureResponse) error
		GetPayment(ctx context.Context, in *PaymentConfig, out *ConfigureResponse) error
	}
	type ConfigureService struct {
		configureService
	}
	h := &configureServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ConfigureService{h}, opts...))
}

type configureServiceHandler struct {
	ConfigureServiceHandler
}

func (h *configureServiceHandler) SetStore(ctx context.Context, in *StoreConfig, out *ConfigureResponse) error {
	return h.ConfigureServiceHandler.SetStore(ctx, in, out)
}

func (h *configureServiceHandler) GetStore(ctx context.Context, in *StoreConfig, out *ConfigureResponse) error {
	return h.ConfigureServiceHandler.GetStore(ctx, in, out)
}

func (h *configureServiceHandler) SetWebsite(ctx context.Context, in *WebsiteConfig, out *ConfigureResponse) error {
	return h.ConfigureServiceHandler.SetWebsite(ctx, in, out)
}

func (h *configureServiceHandler) GetWebsite(ctx context.Context, in *WebsiteConfig, out *ConfigureResponse) error {
	return h.ConfigureServiceHandler.GetWebsite(ctx, in, out)
}

func (h *configureServiceHandler) SetMobile(ctx context.Context, in *MobileConfig, out *ConfigureResponse) error {
	return h.ConfigureServiceHandler.SetMobile(ctx, in, out)
}

func (h *configureServiceHandler) GetMobile(ctx context.Context, in *MobileConfig, out *ConfigureResponse) error {
	return h.ConfigureServiceHandler.GetMobile(ctx, in, out)
}

func (h *configureServiceHandler) SetPayment(ctx context.Context, in *PaymentConfig, out *ConfigureResponse) error {
	return h.ConfigureServiceHandler.SetPayment(ctx, in, out)
}

func (h *configureServiceHandler) GetPayment(ctx context.Context, in *PaymentConfig, out *ConfigureResponse) error {
	return h.ConfigureServiceHandler.GetPayment(ctx, in, out)
}
