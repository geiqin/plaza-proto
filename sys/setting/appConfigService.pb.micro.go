// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: appConfigService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppConfigService service

func NewAppConfigServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppConfigService service

type AppConfigService interface {
	//获取通用APP
	Get(ctx context.Context, in *AppConfigRequest, opts ...client.CallOption) (*AppConfigResponse, error)
	//保存通用APP
	Save(ctx context.Context, in *AppConfigRequest, opts ...client.CallOption) (*AppConfigResponse, error)
}

type appConfigService struct {
	c    client.Client
	name string
}

func NewAppConfigService(name string, c client.Client) AppConfigService {
	return &appConfigService{
		c:    c,
		name: name,
	}
}

func (c *appConfigService) Get(ctx context.Context, in *AppConfigRequest, opts ...client.CallOption) (*AppConfigResponse, error) {
	req := c.c.NewRequest(c.name, "AppConfigService.Get", in)
	out := new(AppConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appConfigService) Save(ctx context.Context, in *AppConfigRequest, opts ...client.CallOption) (*AppConfigResponse, error) {
	req := c.c.NewRequest(c.name, "AppConfigService.Save", in)
	out := new(AppConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppConfigService service

type AppConfigServiceHandler interface {
	//获取通用APP
	Get(context.Context, *AppConfigRequest, *AppConfigResponse) error
	//保存通用APP
	Save(context.Context, *AppConfigRequest, *AppConfigResponse) error
}

func RegisterAppConfigServiceHandler(s server.Server, hdlr AppConfigServiceHandler, opts ...server.HandlerOption) error {
	type appConfigService interface {
		Get(ctx context.Context, in *AppConfigRequest, out *AppConfigResponse) error
		Save(ctx context.Context, in *AppConfigRequest, out *AppConfigResponse) error
	}
	type AppConfigService struct {
		appConfigService
	}
	h := &appConfigServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AppConfigService{h}, opts...))
}

type appConfigServiceHandler struct {
	AppConfigServiceHandler
}

func (h *appConfigServiceHandler) Get(ctx context.Context, in *AppConfigRequest, out *AppConfigResponse) error {
	return h.AppConfigServiceHandler.Get(ctx, in, out)
}

func (h *appConfigServiceHandler) Save(ctx context.Context, in *AppConfigRequest, out *AppConfigResponse) error {
	return h.AppConfigServiceHandler.Save(ctx, in, out)
}
