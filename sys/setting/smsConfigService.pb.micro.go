// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: smsConfigService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SmsConfigService service

func NewSmsConfigServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SmsConfigService service

type SmsConfigService interface {
	Set(ctx context.Context, in *SmsConfig, opts ...client.CallOption) (*SmsConfigResponse, error)
	Get(ctx context.Context, in *SmsConfig, opts ...client.CallOption) (*SmsConfigResponse, error)
}

type smsConfigService struct {
	c    client.Client
	name string
}

func NewSmsConfigService(name string, c client.Client) SmsConfigService {
	return &smsConfigService{
		c:    c,
		name: name,
	}
}

func (c *smsConfigService) Set(ctx context.Context, in *SmsConfig, opts ...client.CallOption) (*SmsConfigResponse, error) {
	req := c.c.NewRequest(c.name, "SmsConfigService.Set", in)
	out := new(SmsConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsConfigService) Get(ctx context.Context, in *SmsConfig, opts ...client.CallOption) (*SmsConfigResponse, error) {
	req := c.c.NewRequest(c.name, "SmsConfigService.Get", in)
	out := new(SmsConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SmsConfigService service

type SmsConfigServiceHandler interface {
	Set(context.Context, *SmsConfig, *SmsConfigResponse) error
	Get(context.Context, *SmsConfig, *SmsConfigResponse) error
}

func RegisterSmsConfigServiceHandler(s server.Server, hdlr SmsConfigServiceHandler, opts ...server.HandlerOption) error {
	type smsConfigService interface {
		Set(ctx context.Context, in *SmsConfig, out *SmsConfigResponse) error
		Get(ctx context.Context, in *SmsConfig, out *SmsConfigResponse) error
	}
	type SmsConfigService struct {
		smsConfigService
	}
	h := &smsConfigServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SmsConfigService{h}, opts...))
}

type smsConfigServiceHandler struct {
	SmsConfigServiceHandler
}

func (h *smsConfigServiceHandler) Set(ctx context.Context, in *SmsConfig, out *SmsConfigResponse) error {
	return h.SmsConfigServiceHandler.Set(ctx, in, out)
}

func (h *smsConfigServiceHandler) Get(ctx context.Context, in *SmsConfig, out *SmsConfigResponse) error {
	return h.SmsConfigServiceHandler.Get(ctx, in, out)
}
