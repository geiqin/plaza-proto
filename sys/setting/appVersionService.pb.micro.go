// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: appVersionService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppVersionService service

func NewAppVersionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppVersionService service

type AppVersionService interface {
	// APP版本新增
	Create(ctx context.Context, in *AppVersion, opts ...client.CallOption) (*AppVersionResponse, error)
	// APP版本修改
	Update(ctx context.Context, in *AppVersion, opts ...client.CallOption) (*AppVersionResponse, error)
	// APP版本删除
	Delete(ctx context.Context, in *AppVersion, opts ...client.CallOption) (*AppVersionResponse, error)
	// APP版本获取
	Get(ctx context.Context, in *AppVersion, opts ...client.CallOption) (*AppVersionResponse, error)
	// APP版本查询
	Search(ctx context.Context, in *AppVersionRequest, opts ...client.CallOption) (*AppVersionResponse, error)
	// APP版本获取最新
	GetLatest(ctx context.Context, in *AppVersionRequest, opts ...client.CallOption) (*AppVersionResponse, error)
}

type appVersionService struct {
	c    client.Client
	name string
}

func NewAppVersionService(name string, c client.Client) AppVersionService {
	return &appVersionService{
		c:    c,
		name: name,
	}
}

func (c *appVersionService) Create(ctx context.Context, in *AppVersion, opts ...client.CallOption) (*AppVersionResponse, error) {
	req := c.c.NewRequest(c.name, "AppVersionService.Create", in)
	out := new(AppVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionService) Update(ctx context.Context, in *AppVersion, opts ...client.CallOption) (*AppVersionResponse, error) {
	req := c.c.NewRequest(c.name, "AppVersionService.Update", in)
	out := new(AppVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionService) Delete(ctx context.Context, in *AppVersion, opts ...client.CallOption) (*AppVersionResponse, error) {
	req := c.c.NewRequest(c.name, "AppVersionService.Delete", in)
	out := new(AppVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionService) Get(ctx context.Context, in *AppVersion, opts ...client.CallOption) (*AppVersionResponse, error) {
	req := c.c.NewRequest(c.name, "AppVersionService.Get", in)
	out := new(AppVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionService) Search(ctx context.Context, in *AppVersionRequest, opts ...client.CallOption) (*AppVersionResponse, error) {
	req := c.c.NewRequest(c.name, "AppVersionService.Search", in)
	out := new(AppVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appVersionService) GetLatest(ctx context.Context, in *AppVersionRequest, opts ...client.CallOption) (*AppVersionResponse, error) {
	req := c.c.NewRequest(c.name, "AppVersionService.GetLatest", in)
	out := new(AppVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppVersionService service

type AppVersionServiceHandler interface {
	// APP版本新增
	Create(context.Context, *AppVersion, *AppVersionResponse) error
	// APP版本修改
	Update(context.Context, *AppVersion, *AppVersionResponse) error
	// APP版本删除
	Delete(context.Context, *AppVersion, *AppVersionResponse) error
	// APP版本获取
	Get(context.Context, *AppVersion, *AppVersionResponse) error
	// APP版本查询
	Search(context.Context, *AppVersionRequest, *AppVersionResponse) error
	// APP版本获取最新
	GetLatest(context.Context, *AppVersionRequest, *AppVersionResponse) error
}

func RegisterAppVersionServiceHandler(s server.Server, hdlr AppVersionServiceHandler, opts ...server.HandlerOption) error {
	type appVersionService interface {
		Create(ctx context.Context, in *AppVersion, out *AppVersionResponse) error
		Update(ctx context.Context, in *AppVersion, out *AppVersionResponse) error
		Delete(ctx context.Context, in *AppVersion, out *AppVersionResponse) error
		Get(ctx context.Context, in *AppVersion, out *AppVersionResponse) error
		Search(ctx context.Context, in *AppVersionRequest, out *AppVersionResponse) error
		GetLatest(ctx context.Context, in *AppVersionRequest, out *AppVersionResponse) error
	}
	type AppVersionService struct {
		appVersionService
	}
	h := &appVersionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AppVersionService{h}, opts...))
}

type appVersionServiceHandler struct {
	AppVersionServiceHandler
}

func (h *appVersionServiceHandler) Create(ctx context.Context, in *AppVersion, out *AppVersionResponse) error {
	return h.AppVersionServiceHandler.Create(ctx, in, out)
}

func (h *appVersionServiceHandler) Update(ctx context.Context, in *AppVersion, out *AppVersionResponse) error {
	return h.AppVersionServiceHandler.Update(ctx, in, out)
}

func (h *appVersionServiceHandler) Delete(ctx context.Context, in *AppVersion, out *AppVersionResponse) error {
	return h.AppVersionServiceHandler.Delete(ctx, in, out)
}

func (h *appVersionServiceHandler) Get(ctx context.Context, in *AppVersion, out *AppVersionResponse) error {
	return h.AppVersionServiceHandler.Get(ctx, in, out)
}

func (h *appVersionServiceHandler) Search(ctx context.Context, in *AppVersionRequest, out *AppVersionResponse) error {
	return h.AppVersionServiceHandler.Search(ctx, in, out)
}

func (h *appVersionServiceHandler) GetLatest(ctx context.Context, in *AppVersionRequest, out *AppVersionResponse) error {
	return h.AppVersionServiceHandler.GetLatest(ctx, in, out)
}
