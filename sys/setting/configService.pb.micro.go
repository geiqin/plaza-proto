// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: configService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ConfigService service

func NewConfigServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ConfigService service

type ConfigService interface {
	//获取通用配置
	GetCommonConfig(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	//保存通用配置
	SaveCommonConfig(ctx context.Context, in *CommonConfigData, opts ...client.CallOption) (*ConfigResponse, error)
	//获取小票配置
	GetPrintingConfig(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	//保存小票配置
	SavePrintingConfig(ctx context.Context, in *PrintingConfig, opts ...client.CallOption) (*ConfigResponse, error)
}

type configService struct {
	c    client.Client
	name string
}

func NewConfigService(name string, c client.Client) ConfigService {
	return &configService{
		c:    c,
		name: name,
	}
}

func (c *configService) GetCommonConfig(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.GetCommonConfig", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) SaveCommonConfig(ctx context.Context, in *CommonConfigData, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.SaveCommonConfig", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) GetPrintingConfig(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.GetPrintingConfig", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) SavePrintingConfig(ctx context.Context, in *PrintingConfig, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.SavePrintingConfig", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigService service

type ConfigServiceHandler interface {
	//获取通用配置
	GetCommonConfig(context.Context, *ConfigRequest, *ConfigResponse) error
	//保存通用配置
	SaveCommonConfig(context.Context, *CommonConfigData, *ConfigResponse) error
	//获取小票配置
	GetPrintingConfig(context.Context, *ConfigRequest, *ConfigResponse) error
	//保存小票配置
	SavePrintingConfig(context.Context, *PrintingConfig, *ConfigResponse) error
}

func RegisterConfigServiceHandler(s server.Server, hdlr ConfigServiceHandler, opts ...server.HandlerOption) error {
	type configService interface {
		GetCommonConfig(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		SaveCommonConfig(ctx context.Context, in *CommonConfigData, out *ConfigResponse) error
		GetPrintingConfig(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		SavePrintingConfig(ctx context.Context, in *PrintingConfig, out *ConfigResponse) error
	}
	type ConfigService struct {
		configService
	}
	h := &configServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ConfigService{h}, opts...))
}

type configServiceHandler struct {
	ConfigServiceHandler
}

func (h *configServiceHandler) GetCommonConfig(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigServiceHandler.GetCommonConfig(ctx, in, out)
}

func (h *configServiceHandler) SaveCommonConfig(ctx context.Context, in *CommonConfigData, out *ConfigResponse) error {
	return h.ConfigServiceHandler.SaveCommonConfig(ctx, in, out)
}

func (h *configServiceHandler) GetPrintingConfig(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ConfigServiceHandler.GetPrintingConfig(ctx, in, out)
}

func (h *configServiceHandler) SavePrintingConfig(ctx context.Context, in *PrintingConfig, out *ConfigResponse) error {
	return h.ConfigServiceHandler.SavePrintingConfig(ctx, in, out)
}
