// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: emailService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EmailService service

func NewEmailServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EmailService service

type EmailService interface {
	//邮件发送
	SendMsg(ctx context.Context, in *Email, opts ...client.CallOption) (*EmailResponse, error)
	//邮件获取
	Get(ctx context.Context, in *Email, opts ...client.CallOption) (*EmailResponse, error)
	//邮件查询
	Search(ctx context.Context, in *Email, opts ...client.CallOption) (*EmailResponse, error)
}

type emailService struct {
	c    client.Client
	name string
}

func NewEmailService(name string, c client.Client) EmailService {
	return &emailService{
		c:    c,
		name: name,
	}
}

func (c *emailService) SendMsg(ctx context.Context, in *Email, opts ...client.CallOption) (*EmailResponse, error) {
	req := c.c.NewRequest(c.name, "EmailService.SendMsg", in)
	out := new(EmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailService) Get(ctx context.Context, in *Email, opts ...client.CallOption) (*EmailResponse, error) {
	req := c.c.NewRequest(c.name, "EmailService.Get", in)
	out := new(EmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailService) Search(ctx context.Context, in *Email, opts ...client.CallOption) (*EmailResponse, error) {
	req := c.c.NewRequest(c.name, "EmailService.Search", in)
	out := new(EmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmailService service

type EmailServiceHandler interface {
	//邮件发送
	SendMsg(context.Context, *Email, *EmailResponse) error
	//邮件获取
	Get(context.Context, *Email, *EmailResponse) error
	//邮件查询
	Search(context.Context, *Email, *EmailResponse) error
}

func RegisterEmailServiceHandler(s server.Server, hdlr EmailServiceHandler, opts ...server.HandlerOption) error {
	type emailService interface {
		SendMsg(ctx context.Context, in *Email, out *EmailResponse) error
		Get(ctx context.Context, in *Email, out *EmailResponse) error
		Search(ctx context.Context, in *Email, out *EmailResponse) error
	}
	type EmailService struct {
		emailService
	}
	h := &emailServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EmailService{h}, opts...))
}

type emailServiceHandler struct {
	EmailServiceHandler
}

func (h *emailServiceHandler) SendMsg(ctx context.Context, in *Email, out *EmailResponse) error {
	return h.EmailServiceHandler.SendMsg(ctx, in, out)
}

func (h *emailServiceHandler) Get(ctx context.Context, in *Email, out *EmailResponse) error {
	return h.EmailServiceHandler.Get(ctx, in, out)
}

func (h *emailServiceHandler) Search(ctx context.Context, in *Email, out *EmailResponse) error {
	return h.EmailServiceHandler.Search(ctx, in, out)
}
