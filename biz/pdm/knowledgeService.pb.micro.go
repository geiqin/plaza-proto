// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: knowledgeService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/microkit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for KnowledgeService service

func NewKnowledgeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for KnowledgeService service

type KnowledgeService interface {
	Create(ctx context.Context, in *Item, opts ...client.CallOption) (*KnowledgeResponse, error)
	Update(ctx context.Context, in *Item, opts ...client.CallOption) (*KnowledgeResponse, error)
	Delete(ctx context.Context, in *Item, opts ...client.CallOption) (*KnowledgeResponse, error)
	Get(ctx context.Context, in *Item, opts ...client.CallOption) (*KnowledgeResponse, error)
	Display(ctx context.Context, in *Item, opts ...client.CallOption) (*KnowledgeResponse, error)
	Search(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error)
	FrontSearch(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error)
}

type knowledgeService struct {
	c    client.Client
	name string
}

func NewKnowledgeService(name string, c client.Client) KnowledgeService {
	return &knowledgeService{
		c:    c,
		name: name,
	}
}

func (c *knowledgeService) Create(ctx context.Context, in *Item, opts ...client.CallOption) (*KnowledgeResponse, error) {
	req := c.c.NewRequest(c.name, "KnowledgeService.Create", in)
	out := new(KnowledgeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeService) Update(ctx context.Context, in *Item, opts ...client.CallOption) (*KnowledgeResponse, error) {
	req := c.c.NewRequest(c.name, "KnowledgeService.Update", in)
	out := new(KnowledgeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeService) Delete(ctx context.Context, in *Item, opts ...client.CallOption) (*KnowledgeResponse, error) {
	req := c.c.NewRequest(c.name, "KnowledgeService.Delete", in)
	out := new(KnowledgeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeService) Get(ctx context.Context, in *Item, opts ...client.CallOption) (*KnowledgeResponse, error) {
	req := c.c.NewRequest(c.name, "KnowledgeService.Get", in)
	out := new(KnowledgeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeService) Display(ctx context.Context, in *Item, opts ...client.CallOption) (*KnowledgeResponse, error) {
	req := c.c.NewRequest(c.name, "KnowledgeService.Display", in)
	out := new(KnowledgeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeService) Search(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "KnowledgeService.Search", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeService) FrontSearch(ctx context.Context, in *KnowledgeRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "KnowledgeService.FrontSearch", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KnowledgeService service

type KnowledgeServiceHandler interface {
	Create(context.Context, *Item, *KnowledgeResponse) error
	Update(context.Context, *Item, *KnowledgeResponse) error
	Delete(context.Context, *Item, *KnowledgeResponse) error
	Get(context.Context, *Item, *KnowledgeResponse) error
	Display(context.Context, *Item, *KnowledgeResponse) error
	Search(context.Context, *KnowledgeRequest, *ItemResponse) error
	FrontSearch(context.Context, *KnowledgeRequest, *ItemResponse) error
}

func RegisterKnowledgeServiceHandler(s server.Server, hdlr KnowledgeServiceHandler, opts ...server.HandlerOption) error {
	type knowledgeService interface {
		Create(ctx context.Context, in *Item, out *KnowledgeResponse) error
		Update(ctx context.Context, in *Item, out *KnowledgeResponse) error
		Delete(ctx context.Context, in *Item, out *KnowledgeResponse) error
		Get(ctx context.Context, in *Item, out *KnowledgeResponse) error
		Display(ctx context.Context, in *Item, out *KnowledgeResponse) error
		Search(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error
		FrontSearch(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error
	}
	type KnowledgeService struct {
		knowledgeService
	}
	h := &knowledgeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&KnowledgeService{h}, opts...))
}

type knowledgeServiceHandler struct {
	KnowledgeServiceHandler
}

func (h *knowledgeServiceHandler) Create(ctx context.Context, in *Item, out *KnowledgeResponse) error {
	return h.KnowledgeServiceHandler.Create(ctx, in, out)
}

func (h *knowledgeServiceHandler) Update(ctx context.Context, in *Item, out *KnowledgeResponse) error {
	return h.KnowledgeServiceHandler.Update(ctx, in, out)
}

func (h *knowledgeServiceHandler) Delete(ctx context.Context, in *Item, out *KnowledgeResponse) error {
	return h.KnowledgeServiceHandler.Delete(ctx, in, out)
}

func (h *knowledgeServiceHandler) Get(ctx context.Context, in *Item, out *KnowledgeResponse) error {
	return h.KnowledgeServiceHandler.Get(ctx, in, out)
}

func (h *knowledgeServiceHandler) Display(ctx context.Context, in *Item, out *KnowledgeResponse) error {
	return h.KnowledgeServiceHandler.Display(ctx, in, out)
}

func (h *knowledgeServiceHandler) Search(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error {
	return h.KnowledgeServiceHandler.Search(ctx, in, out)
}

func (h *knowledgeServiceHandler) FrontSearch(ctx context.Context, in *KnowledgeRequest, out *ItemResponse) error {
	return h.KnowledgeServiceHandler.FrontSearch(ctx, in, out)
}
