// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: applicationVersionService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ApplicationVersionService service

func NewApplicationVersionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ApplicationVersionService service

type ApplicationVersionService interface {
	// 应用版本新增
	Create(ctx context.Context, in *ApplicationVersion, opts ...client.CallOption) (*ApplicationVersionResponse, error)
	// 应用版本修改
	Update(ctx context.Context, in *ApplicationVersion, opts ...client.CallOption) (*ApplicationVersionResponse, error)
	// 应用版本删除
	Delete(ctx context.Context, in *ApplicationVersion, opts ...client.CallOption) (*ApplicationVersionResponse, error)
	// 应用版本获取
	Get(ctx context.Context, in *ApplicationVersion, opts ...client.CallOption) (*ApplicationVersionResponse, error)
	// 应用版本查询
	Search(ctx context.Context, in *ApplicationVersionRequest, opts ...client.CallOption) (*ApplicationVersionResponse, error)
	// 应用版本列表
	List(ctx context.Context, in *ApplicationVersionRequest, opts ...client.CallOption) (*ApplicationVersionResponse, error)
}

type applicationVersionService struct {
	c    client.Client
	name string
}

func NewApplicationVersionService(name string, c client.Client) ApplicationVersionService {
	return &applicationVersionService{
		c:    c,
		name: name,
	}
}

func (c *applicationVersionService) Create(ctx context.Context, in *ApplicationVersion, opts ...client.CallOption) (*ApplicationVersionResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationVersionService.Create", in)
	out := new(ApplicationVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationVersionService) Update(ctx context.Context, in *ApplicationVersion, opts ...client.CallOption) (*ApplicationVersionResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationVersionService.Update", in)
	out := new(ApplicationVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationVersionService) Delete(ctx context.Context, in *ApplicationVersion, opts ...client.CallOption) (*ApplicationVersionResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationVersionService.Delete", in)
	out := new(ApplicationVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationVersionService) Get(ctx context.Context, in *ApplicationVersion, opts ...client.CallOption) (*ApplicationVersionResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationVersionService.Get", in)
	out := new(ApplicationVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationVersionService) Search(ctx context.Context, in *ApplicationVersionRequest, opts ...client.CallOption) (*ApplicationVersionResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationVersionService.Search", in)
	out := new(ApplicationVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationVersionService) List(ctx context.Context, in *ApplicationVersionRequest, opts ...client.CallOption) (*ApplicationVersionResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationVersionService.List", in)
	out := new(ApplicationVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationVersionService service

type ApplicationVersionServiceHandler interface {
	// 应用版本新增
	Create(context.Context, *ApplicationVersion, *ApplicationVersionResponse) error
	// 应用版本修改
	Update(context.Context, *ApplicationVersion, *ApplicationVersionResponse) error
	// 应用版本删除
	Delete(context.Context, *ApplicationVersion, *ApplicationVersionResponse) error
	// 应用版本获取
	Get(context.Context, *ApplicationVersion, *ApplicationVersionResponse) error
	// 应用版本查询
	Search(context.Context, *ApplicationVersionRequest, *ApplicationVersionResponse) error
	// 应用版本列表
	List(context.Context, *ApplicationVersionRequest, *ApplicationVersionResponse) error
}

func RegisterApplicationVersionServiceHandler(s server.Server, hdlr ApplicationVersionServiceHandler, opts ...server.HandlerOption) error {
	type applicationVersionService interface {
		Create(ctx context.Context, in *ApplicationVersion, out *ApplicationVersionResponse) error
		Update(ctx context.Context, in *ApplicationVersion, out *ApplicationVersionResponse) error
		Delete(ctx context.Context, in *ApplicationVersion, out *ApplicationVersionResponse) error
		Get(ctx context.Context, in *ApplicationVersion, out *ApplicationVersionResponse) error
		Search(ctx context.Context, in *ApplicationVersionRequest, out *ApplicationVersionResponse) error
		List(ctx context.Context, in *ApplicationVersionRequest, out *ApplicationVersionResponse) error
	}
	type ApplicationVersionService struct {
		applicationVersionService
	}
	h := &applicationVersionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ApplicationVersionService{h}, opts...))
}

type applicationVersionServiceHandler struct {
	ApplicationVersionServiceHandler
}

func (h *applicationVersionServiceHandler) Create(ctx context.Context, in *ApplicationVersion, out *ApplicationVersionResponse) error {
	return h.ApplicationVersionServiceHandler.Create(ctx, in, out)
}

func (h *applicationVersionServiceHandler) Update(ctx context.Context, in *ApplicationVersion, out *ApplicationVersionResponse) error {
	return h.ApplicationVersionServiceHandler.Update(ctx, in, out)
}

func (h *applicationVersionServiceHandler) Delete(ctx context.Context, in *ApplicationVersion, out *ApplicationVersionResponse) error {
	return h.ApplicationVersionServiceHandler.Delete(ctx, in, out)
}

func (h *applicationVersionServiceHandler) Get(ctx context.Context, in *ApplicationVersion, out *ApplicationVersionResponse) error {
	return h.ApplicationVersionServiceHandler.Get(ctx, in, out)
}

func (h *applicationVersionServiceHandler) Search(ctx context.Context, in *ApplicationVersionRequest, out *ApplicationVersionResponse) error {
	return h.ApplicationVersionServiceHandler.Search(ctx, in, out)
}

func (h *applicationVersionServiceHandler) List(ctx context.Context, in *ApplicationVersionRequest, out *ApplicationVersionResponse) error {
	return h.ApplicationVersionServiceHandler.List(ctx, in, out)
}
