// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: superMenuService.proto

package services

import (
	_ "../common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SuperMenuService service

func NewSuperMenuServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SuperMenuService service

type SuperMenuService interface {
	Get(ctx context.Context, in *SuperMenu, opts ...client.CallOption) (*SuperMenuResponse, error)
	Create(ctx context.Context, in *SuperMenu, opts ...client.CallOption) (*SuperMenuResponse, error)
	Update(ctx context.Context, in *SuperMenu, opts ...client.CallOption) (*SuperMenuResponse, error)
	UpdateHide(ctx context.Context, in *SuperMenu, opts ...client.CallOption) (*SuperMenuResponse, error)
	Delete(ctx context.Context, in *SuperMenu, opts ...client.CallOption) (*SuperMenuResponse, error)
	Search(ctx context.Context, in *SuperMenuRequest, opts ...client.CallOption) (*SuperMenuResponse, error)
	List(ctx context.Context, in *SuperMenuRequest, opts ...client.CallOption) (*SuperMenuResponse, error)
	Tree(ctx context.Context, in *SuperMenuRequest, opts ...client.CallOption) (*SuperMenuResponse, error)
	Routes(ctx context.Context, in *SuperMenuRequest, opts ...client.CallOption) (*SuperMenuResponse, error)
}

type superMenuService struct {
	c    client.Client
	name string
}

func NewSuperMenuService(name string, c client.Client) SuperMenuService {
	return &superMenuService{
		c:    c,
		name: name,
	}
}

func (c *superMenuService) Get(ctx context.Context, in *SuperMenu, opts ...client.CallOption) (*SuperMenuResponse, error) {
	req := c.c.NewRequest(c.name, "SuperMenuService.Get", in)
	out := new(SuperMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superMenuService) Create(ctx context.Context, in *SuperMenu, opts ...client.CallOption) (*SuperMenuResponse, error) {
	req := c.c.NewRequest(c.name, "SuperMenuService.Create", in)
	out := new(SuperMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superMenuService) Update(ctx context.Context, in *SuperMenu, opts ...client.CallOption) (*SuperMenuResponse, error) {
	req := c.c.NewRequest(c.name, "SuperMenuService.Update", in)
	out := new(SuperMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superMenuService) UpdateHide(ctx context.Context, in *SuperMenu, opts ...client.CallOption) (*SuperMenuResponse, error) {
	req := c.c.NewRequest(c.name, "SuperMenuService.UpdateHide", in)
	out := new(SuperMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superMenuService) Delete(ctx context.Context, in *SuperMenu, opts ...client.CallOption) (*SuperMenuResponse, error) {
	req := c.c.NewRequest(c.name, "SuperMenuService.Delete", in)
	out := new(SuperMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superMenuService) Search(ctx context.Context, in *SuperMenuRequest, opts ...client.CallOption) (*SuperMenuResponse, error) {
	req := c.c.NewRequest(c.name, "SuperMenuService.Search", in)
	out := new(SuperMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superMenuService) List(ctx context.Context, in *SuperMenuRequest, opts ...client.CallOption) (*SuperMenuResponse, error) {
	req := c.c.NewRequest(c.name, "SuperMenuService.List", in)
	out := new(SuperMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superMenuService) Tree(ctx context.Context, in *SuperMenuRequest, opts ...client.CallOption) (*SuperMenuResponse, error) {
	req := c.c.NewRequest(c.name, "SuperMenuService.Tree", in)
	out := new(SuperMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superMenuService) Routes(ctx context.Context, in *SuperMenuRequest, opts ...client.CallOption) (*SuperMenuResponse, error) {
	req := c.c.NewRequest(c.name, "SuperMenuService.Routes", in)
	out := new(SuperMenuResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SuperMenuService service

type SuperMenuServiceHandler interface {
	Get(context.Context, *SuperMenu, *SuperMenuResponse) error
	Create(context.Context, *SuperMenu, *SuperMenuResponse) error
	Update(context.Context, *SuperMenu, *SuperMenuResponse) error
	UpdateHide(context.Context, *SuperMenu, *SuperMenuResponse) error
	Delete(context.Context, *SuperMenu, *SuperMenuResponse) error
	Search(context.Context, *SuperMenuRequest, *SuperMenuResponse) error
	List(context.Context, *SuperMenuRequest, *SuperMenuResponse) error
	Tree(context.Context, *SuperMenuRequest, *SuperMenuResponse) error
	Routes(context.Context, *SuperMenuRequest, *SuperMenuResponse) error
}

func RegisterSuperMenuServiceHandler(s server.Server, hdlr SuperMenuServiceHandler, opts ...server.HandlerOption) error {
	type superMenuService interface {
		Get(ctx context.Context, in *SuperMenu, out *SuperMenuResponse) error
		Create(ctx context.Context, in *SuperMenu, out *SuperMenuResponse) error
		Update(ctx context.Context, in *SuperMenu, out *SuperMenuResponse) error
		UpdateHide(ctx context.Context, in *SuperMenu, out *SuperMenuResponse) error
		Delete(ctx context.Context, in *SuperMenu, out *SuperMenuResponse) error
		Search(ctx context.Context, in *SuperMenuRequest, out *SuperMenuResponse) error
		List(ctx context.Context, in *SuperMenuRequest, out *SuperMenuResponse) error
		Tree(ctx context.Context, in *SuperMenuRequest, out *SuperMenuResponse) error
		Routes(ctx context.Context, in *SuperMenuRequest, out *SuperMenuResponse) error
	}
	type SuperMenuService struct {
		superMenuService
	}
	h := &superMenuServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SuperMenuService{h}, opts...))
}

type superMenuServiceHandler struct {
	SuperMenuServiceHandler
}

func (h *superMenuServiceHandler) Get(ctx context.Context, in *SuperMenu, out *SuperMenuResponse) error {
	return h.SuperMenuServiceHandler.Get(ctx, in, out)
}

func (h *superMenuServiceHandler) Create(ctx context.Context, in *SuperMenu, out *SuperMenuResponse) error {
	return h.SuperMenuServiceHandler.Create(ctx, in, out)
}

func (h *superMenuServiceHandler) Update(ctx context.Context, in *SuperMenu, out *SuperMenuResponse) error {
	return h.SuperMenuServiceHandler.Update(ctx, in, out)
}

func (h *superMenuServiceHandler) UpdateHide(ctx context.Context, in *SuperMenu, out *SuperMenuResponse) error {
	return h.SuperMenuServiceHandler.UpdateHide(ctx, in, out)
}

func (h *superMenuServiceHandler) Delete(ctx context.Context, in *SuperMenu, out *SuperMenuResponse) error {
	return h.SuperMenuServiceHandler.Delete(ctx, in, out)
}

func (h *superMenuServiceHandler) Search(ctx context.Context, in *SuperMenuRequest, out *SuperMenuResponse) error {
	return h.SuperMenuServiceHandler.Search(ctx, in, out)
}

func (h *superMenuServiceHandler) List(ctx context.Context, in *SuperMenuRequest, out *SuperMenuResponse) error {
	return h.SuperMenuServiceHandler.List(ctx, in, out)
}

func (h *superMenuServiceHandler) Tree(ctx context.Context, in *SuperMenuRequest, out *SuperMenuResponse) error {
	return h.SuperMenuServiceHandler.Tree(ctx, in, out)
}

func (h *superMenuServiceHandler) Routes(ctx context.Context, in *SuperMenuRequest, out *SuperMenuResponse) error {
	return h.SuperMenuServiceHandler.Routes(ctx, in, out)
}
