// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: currentStoreService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CurrentStoreService service

func NewCurrentStoreServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CurrentStoreService service

type CurrentStoreService interface {
	//获取当前店铺(简单信息)
	Info(ctx context.Context, in *CurrentStoreRequest, opts ...client.CallOption) (*CurrentStoreResponse, error)
	//获取当前店铺(详细信息)
	Detail(ctx context.Context, in *CurrentStoreRequest, opts ...client.CallOption) (*CurrentStoreResponse, error)
}

type currentStoreService struct {
	c    client.Client
	name string
}

func NewCurrentStoreService(name string, c client.Client) CurrentStoreService {
	return &currentStoreService{
		c:    c,
		name: name,
	}
}

func (c *currentStoreService) Info(ctx context.Context, in *CurrentStoreRequest, opts ...client.CallOption) (*CurrentStoreResponse, error) {
	req := c.c.NewRequest(c.name, "CurrentStoreService.Info", in)
	out := new(CurrentStoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currentStoreService) Detail(ctx context.Context, in *CurrentStoreRequest, opts ...client.CallOption) (*CurrentStoreResponse, error) {
	req := c.c.NewRequest(c.name, "CurrentStoreService.Detail", in)
	out := new(CurrentStoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CurrentStoreService service

type CurrentStoreServiceHandler interface {
	//获取当前店铺(简单信息)
	Info(context.Context, *CurrentStoreRequest, *CurrentStoreResponse) error
	//获取当前店铺(详细信息)
	Detail(context.Context, *CurrentStoreRequest, *CurrentStoreResponse) error
}

func RegisterCurrentStoreServiceHandler(s server.Server, hdlr CurrentStoreServiceHandler, opts ...server.HandlerOption) error {
	type currentStoreService interface {
		Info(ctx context.Context, in *CurrentStoreRequest, out *CurrentStoreResponse) error
		Detail(ctx context.Context, in *CurrentStoreRequest, out *CurrentStoreResponse) error
	}
	type CurrentStoreService struct {
		currentStoreService
	}
	h := &currentStoreServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CurrentStoreService{h}, opts...))
}

type currentStoreServiceHandler struct {
	CurrentStoreServiceHandler
}

func (h *currentStoreServiceHandler) Info(ctx context.Context, in *CurrentStoreRequest, out *CurrentStoreResponse) error {
	return h.CurrentStoreServiceHandler.Info(ctx, in, out)
}

func (h *currentStoreServiceHandler) Detail(ctx context.Context, in *CurrentStoreRequest, out *CurrentStoreResponse) error {
	return h.CurrentStoreServiceHandler.Detail(ctx, in, out)
}
