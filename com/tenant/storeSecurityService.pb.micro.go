// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: storeSecurityService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for StoreSecurityService service

func NewStoreSecurityServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for StoreSecurityService service

type StoreSecurityService interface {
	// 店铺安全修改
	Update(ctx context.Context, in *StoreSecurity, opts ...client.CallOption) (*StoreSecurityResponse, error)
	// 店铺安全获取
	Get(ctx context.Context, in *StoreSecurity, opts ...client.CallOption) (*StoreSecurityResponse, error)
}

type storeSecurityService struct {
	c    client.Client
	name string
}

func NewStoreSecurityService(name string, c client.Client) StoreSecurityService {
	return &storeSecurityService{
		c:    c,
		name: name,
	}
}

func (c *storeSecurityService) Update(ctx context.Context, in *StoreSecurity, opts ...client.CallOption) (*StoreSecurityResponse, error) {
	req := c.c.NewRequest(c.name, "StoreSecurityService.Update", in)
	out := new(StoreSecurityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeSecurityService) Get(ctx context.Context, in *StoreSecurity, opts ...client.CallOption) (*StoreSecurityResponse, error) {
	req := c.c.NewRequest(c.name, "StoreSecurityService.Get", in)
	out := new(StoreSecurityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StoreSecurityService service

type StoreSecurityServiceHandler interface {
	// 店铺安全修改
	Update(context.Context, *StoreSecurity, *StoreSecurityResponse) error
	// 店铺安全获取
	Get(context.Context, *StoreSecurity, *StoreSecurityResponse) error
}

func RegisterStoreSecurityServiceHandler(s server.Server, hdlr StoreSecurityServiceHandler, opts ...server.HandlerOption) error {
	type storeSecurityService interface {
		Update(ctx context.Context, in *StoreSecurity, out *StoreSecurityResponse) error
		Get(ctx context.Context, in *StoreSecurity, out *StoreSecurityResponse) error
	}
	type StoreSecurityService struct {
		storeSecurityService
	}
	h := &storeSecurityServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StoreSecurityService{h}, opts...))
}

type storeSecurityServiceHandler struct {
	StoreSecurityServiceHandler
}

func (h *storeSecurityServiceHandler) Update(ctx context.Context, in *StoreSecurity, out *StoreSecurityResponse) error {
	return h.StoreSecurityServiceHandler.Update(ctx, in, out)
}

func (h *storeSecurityServiceHandler) Get(ctx context.Context, in *StoreSecurity, out *StoreSecurityResponse) error {
	return h.StoreSecurityServiceHandler.Get(ctx, in, out)
}
