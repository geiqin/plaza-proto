// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: applicationOptionService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ApplicationOptionService service

func NewApplicationOptionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ApplicationOptionService service

type ApplicationOptionService interface {
	// 保存配置
	Save(ctx context.Context, in *ApplicationOptionRequest, opts ...client.CallOption) (*ApplicationOptionResponse, error)
	// 获取配置
	Get(ctx context.Context, in *ApplicationOptionRequest, opts ...client.CallOption) (*ApplicationOptionResponse, error)
}

type applicationOptionService struct {
	c    client.Client
	name string
}

func NewApplicationOptionService(name string, c client.Client) ApplicationOptionService {
	return &applicationOptionService{
		c:    c,
		name: name,
	}
}

func (c *applicationOptionService) Save(ctx context.Context, in *ApplicationOptionRequest, opts ...client.CallOption) (*ApplicationOptionResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationOptionService.Save", in)
	out := new(ApplicationOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationOptionService) Get(ctx context.Context, in *ApplicationOptionRequest, opts ...client.CallOption) (*ApplicationOptionResponse, error) {
	req := c.c.NewRequest(c.name, "ApplicationOptionService.Get", in)
	out := new(ApplicationOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApplicationOptionService service

type ApplicationOptionServiceHandler interface {
	// 保存配置
	Save(context.Context, *ApplicationOptionRequest, *ApplicationOptionResponse) error
	// 获取配置
	Get(context.Context, *ApplicationOptionRequest, *ApplicationOptionResponse) error
}

func RegisterApplicationOptionServiceHandler(s server.Server, hdlr ApplicationOptionServiceHandler, opts ...server.HandlerOption) error {
	type applicationOptionService interface {
		Save(ctx context.Context, in *ApplicationOptionRequest, out *ApplicationOptionResponse) error
		Get(ctx context.Context, in *ApplicationOptionRequest, out *ApplicationOptionResponse) error
	}
	type ApplicationOptionService struct {
		applicationOptionService
	}
	h := &applicationOptionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ApplicationOptionService{h}, opts...))
}

type applicationOptionServiceHandler struct {
	ApplicationOptionServiceHandler
}

func (h *applicationOptionServiceHandler) Save(ctx context.Context, in *ApplicationOptionRequest, out *ApplicationOptionResponse) error {
	return h.ApplicationOptionServiceHandler.Save(ctx, in, out)
}

func (h *applicationOptionServiceHandler) Get(ctx context.Context, in *ApplicationOptionRequest, out *ApplicationOptionResponse) error {
	return h.ApplicationOptionServiceHandler.Get(ctx, in, out)
}
