// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pageCategoryService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PageCategoryService service

func NewPageCategoryServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PageCategoryService service

type PageCategoryService interface {
	// 页面分类新增
	Create(ctx context.Context, in *PageCategory, opts ...client.CallOption) (*PageCategoryResponse, error)
	// 页面分类修改
	Update(ctx context.Context, in *PageCategory, opts ...client.CallOption) (*PageCategoryResponse, error)
	// 页面分类删除
	Delete(ctx context.Context, in *PageCategory, opts ...client.CallOption) (*PageCategoryResponse, error)
	// 页面分类获取
	Get(ctx context.Context, in *PageCategory, opts ...client.CallOption) (*PageCategoryResponse, error)
	// 页面分类查询
	Search(ctx context.Context, in *PageCategoryRequest, opts ...client.CallOption) (*PageCategoryResponse, error)
	// 页面分类列表
	List(ctx context.Context, in *PageCategoryRequest, opts ...client.CallOption) (*PageCategoryResponse, error)
}

type pageCategoryService struct {
	c    client.Client
	name string
}

func NewPageCategoryService(name string, c client.Client) PageCategoryService {
	return &pageCategoryService{
		c:    c,
		name: name,
	}
}

func (c *pageCategoryService) Create(ctx context.Context, in *PageCategory, opts ...client.CallOption) (*PageCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "PageCategoryService.Create", in)
	out := new(PageCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageCategoryService) Update(ctx context.Context, in *PageCategory, opts ...client.CallOption) (*PageCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "PageCategoryService.Update", in)
	out := new(PageCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageCategoryService) Delete(ctx context.Context, in *PageCategory, opts ...client.CallOption) (*PageCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "PageCategoryService.Delete", in)
	out := new(PageCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageCategoryService) Get(ctx context.Context, in *PageCategory, opts ...client.CallOption) (*PageCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "PageCategoryService.Get", in)
	out := new(PageCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageCategoryService) Search(ctx context.Context, in *PageCategoryRequest, opts ...client.CallOption) (*PageCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "PageCategoryService.Search", in)
	out := new(PageCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageCategoryService) List(ctx context.Context, in *PageCategoryRequest, opts ...client.CallOption) (*PageCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "PageCategoryService.List", in)
	out := new(PageCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PageCategoryService service

type PageCategoryServiceHandler interface {
	// 页面分类新增
	Create(context.Context, *PageCategory, *PageCategoryResponse) error
	// 页面分类修改
	Update(context.Context, *PageCategory, *PageCategoryResponse) error
	// 页面分类删除
	Delete(context.Context, *PageCategory, *PageCategoryResponse) error
	// 页面分类获取
	Get(context.Context, *PageCategory, *PageCategoryResponse) error
	// 页面分类查询
	Search(context.Context, *PageCategoryRequest, *PageCategoryResponse) error
	// 页面分类列表
	List(context.Context, *PageCategoryRequest, *PageCategoryResponse) error
}

func RegisterPageCategoryServiceHandler(s server.Server, hdlr PageCategoryServiceHandler, opts ...server.HandlerOption) error {
	type pageCategoryService interface {
		Create(ctx context.Context, in *PageCategory, out *PageCategoryResponse) error
		Update(ctx context.Context, in *PageCategory, out *PageCategoryResponse) error
		Delete(ctx context.Context, in *PageCategory, out *PageCategoryResponse) error
		Get(ctx context.Context, in *PageCategory, out *PageCategoryResponse) error
		Search(ctx context.Context, in *PageCategoryRequest, out *PageCategoryResponse) error
		List(ctx context.Context, in *PageCategoryRequest, out *PageCategoryResponse) error
	}
	type PageCategoryService struct {
		pageCategoryService
	}
	h := &pageCategoryServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PageCategoryService{h}, opts...))
}

type pageCategoryServiceHandler struct {
	PageCategoryServiceHandler
}

func (h *pageCategoryServiceHandler) Create(ctx context.Context, in *PageCategory, out *PageCategoryResponse) error {
	return h.PageCategoryServiceHandler.Create(ctx, in, out)
}

func (h *pageCategoryServiceHandler) Update(ctx context.Context, in *PageCategory, out *PageCategoryResponse) error {
	return h.PageCategoryServiceHandler.Update(ctx, in, out)
}

func (h *pageCategoryServiceHandler) Delete(ctx context.Context, in *PageCategory, out *PageCategoryResponse) error {
	return h.PageCategoryServiceHandler.Delete(ctx, in, out)
}

func (h *pageCategoryServiceHandler) Get(ctx context.Context, in *PageCategory, out *PageCategoryResponse) error {
	return h.PageCategoryServiceHandler.Get(ctx, in, out)
}

func (h *pageCategoryServiceHandler) Search(ctx context.Context, in *PageCategoryRequest, out *PageCategoryResponse) error {
	return h.PageCategoryServiceHandler.Search(ctx, in, out)
}

func (h *pageCategoryServiceHandler) List(ctx context.Context, in *PageCategoryRequest, out *PageCategoryResponse) error {
	return h.PageCategoryServiceHandler.List(ctx, in, out)
}
