// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: dataService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DataService service

func NewDataServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DataService service

type DataService interface {
	// 初始数据新增
	Create(ctx context.Context, in *Data, opts ...client.CallOption) (*DataResponse, error)
	// 初始数据修改
	Update(ctx context.Context, in *Data, opts ...client.CallOption) (*DataResponse, error)
	// 初始数据删除
	Delete(ctx context.Context, in *Data, opts ...client.CallOption) (*DataResponse, error)
	// 初始数据获取
	Get(ctx context.Context, in *Data, opts ...client.CallOption) (*DataResponse, error)
	// 初始数据查询
	Search(ctx context.Context, in *DataRequest, opts ...client.CallOption) (*DataResponse, error)
	// 初始数据列表
	List(ctx context.Context, in *DataRequest, opts ...client.CallOption) (*DataResponse, error)
}

type dataService struct {
	c    client.Client
	name string
}

func NewDataService(name string, c client.Client) DataService {
	return &dataService{
		c:    c,
		name: name,
	}
}

func (c *dataService) Create(ctx context.Context, in *Data, opts ...client.CallOption) (*DataResponse, error) {
	req := c.c.NewRequest(c.name, "DataService.Create", in)
	out := new(DataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataService) Update(ctx context.Context, in *Data, opts ...client.CallOption) (*DataResponse, error) {
	req := c.c.NewRequest(c.name, "DataService.Update", in)
	out := new(DataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataService) Delete(ctx context.Context, in *Data, opts ...client.CallOption) (*DataResponse, error) {
	req := c.c.NewRequest(c.name, "DataService.Delete", in)
	out := new(DataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataService) Get(ctx context.Context, in *Data, opts ...client.CallOption) (*DataResponse, error) {
	req := c.c.NewRequest(c.name, "DataService.Get", in)
	out := new(DataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataService) Search(ctx context.Context, in *DataRequest, opts ...client.CallOption) (*DataResponse, error) {
	req := c.c.NewRequest(c.name, "DataService.Search", in)
	out := new(DataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataService) List(ctx context.Context, in *DataRequest, opts ...client.CallOption) (*DataResponse, error) {
	req := c.c.NewRequest(c.name, "DataService.List", in)
	out := new(DataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataService service

type DataServiceHandler interface {
	// 初始数据新增
	Create(context.Context, *Data, *DataResponse) error
	// 初始数据修改
	Update(context.Context, *Data, *DataResponse) error
	// 初始数据删除
	Delete(context.Context, *Data, *DataResponse) error
	// 初始数据获取
	Get(context.Context, *Data, *DataResponse) error
	// 初始数据查询
	Search(context.Context, *DataRequest, *DataResponse) error
	// 初始数据列表
	List(context.Context, *DataRequest, *DataResponse) error
}

func RegisterDataServiceHandler(s server.Server, hdlr DataServiceHandler, opts ...server.HandlerOption) error {
	type dataService interface {
		Create(ctx context.Context, in *Data, out *DataResponse) error
		Update(ctx context.Context, in *Data, out *DataResponse) error
		Delete(ctx context.Context, in *Data, out *DataResponse) error
		Get(ctx context.Context, in *Data, out *DataResponse) error
		Search(ctx context.Context, in *DataRequest, out *DataResponse) error
		List(ctx context.Context, in *DataRequest, out *DataResponse) error
	}
	type DataService struct {
		dataService
	}
	h := &dataServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DataService{h}, opts...))
}

type dataServiceHandler struct {
	DataServiceHandler
}

func (h *dataServiceHandler) Create(ctx context.Context, in *Data, out *DataResponse) error {
	return h.DataServiceHandler.Create(ctx, in, out)
}

func (h *dataServiceHandler) Update(ctx context.Context, in *Data, out *DataResponse) error {
	return h.DataServiceHandler.Update(ctx, in, out)
}

func (h *dataServiceHandler) Delete(ctx context.Context, in *Data, out *DataResponse) error {
	return h.DataServiceHandler.Delete(ctx, in, out)
}

func (h *dataServiceHandler) Get(ctx context.Context, in *Data, out *DataResponse) error {
	return h.DataServiceHandler.Get(ctx, in, out)
}

func (h *dataServiceHandler) Search(ctx context.Context, in *DataRequest, out *DataResponse) error {
	return h.DataServiceHandler.Search(ctx, in, out)
}

func (h *dataServiceHandler) List(ctx context.Context, in *DataRequest, out *DataResponse) error {
	return h.DataServiceHandler.List(ctx, in, out)
}
