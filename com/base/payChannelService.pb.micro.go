// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: payChannelService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PayChannelService service

func NewPayChannelServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PayChannelService service

type PayChannelService interface {
	// 支付通道新增
	Create(ctx context.Context, in *PayChannel, opts ...client.CallOption) (*PayChannelResponse, error)
	// 支付通道修改
	Update(ctx context.Context, in *PayChannel, opts ...client.CallOption) (*PayChannelResponse, error)
	// 支付通道删除
	Delete(ctx context.Context, in *PayChannel, opts ...client.CallOption) (*PayChannelResponse, error)
	// 支付通道获取
	Get(ctx context.Context, in *PayChannel, opts ...client.CallOption) (*PayChannelResponse, error)
	// 支付通道查询
	Search(ctx context.Context, in *PayChannelRequest, opts ...client.CallOption) (*PayChannelResponse, error)
	// 支付通道列表
	List(ctx context.Context, in *PayChannelRequest, opts ...client.CallOption) (*PayChannelResponse, error)
}

type payChannelService struct {
	c    client.Client
	name string
}

func NewPayChannelService(name string, c client.Client) PayChannelService {
	return &payChannelService{
		c:    c,
		name: name,
	}
}

func (c *payChannelService) Create(ctx context.Context, in *PayChannel, opts ...client.CallOption) (*PayChannelResponse, error) {
	req := c.c.NewRequest(c.name, "PayChannelService.Create", in)
	out := new(PayChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payChannelService) Update(ctx context.Context, in *PayChannel, opts ...client.CallOption) (*PayChannelResponse, error) {
	req := c.c.NewRequest(c.name, "PayChannelService.Update", in)
	out := new(PayChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payChannelService) Delete(ctx context.Context, in *PayChannel, opts ...client.CallOption) (*PayChannelResponse, error) {
	req := c.c.NewRequest(c.name, "PayChannelService.Delete", in)
	out := new(PayChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payChannelService) Get(ctx context.Context, in *PayChannel, opts ...client.CallOption) (*PayChannelResponse, error) {
	req := c.c.NewRequest(c.name, "PayChannelService.Get", in)
	out := new(PayChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payChannelService) Search(ctx context.Context, in *PayChannelRequest, opts ...client.CallOption) (*PayChannelResponse, error) {
	req := c.c.NewRequest(c.name, "PayChannelService.Search", in)
	out := new(PayChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payChannelService) List(ctx context.Context, in *PayChannelRequest, opts ...client.CallOption) (*PayChannelResponse, error) {
	req := c.c.NewRequest(c.name, "PayChannelService.List", in)
	out := new(PayChannelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PayChannelService service

type PayChannelServiceHandler interface {
	// 支付通道新增
	Create(context.Context, *PayChannel, *PayChannelResponse) error
	// 支付通道修改
	Update(context.Context, *PayChannel, *PayChannelResponse) error
	// 支付通道删除
	Delete(context.Context, *PayChannel, *PayChannelResponse) error
	// 支付通道获取
	Get(context.Context, *PayChannel, *PayChannelResponse) error
	// 支付通道查询
	Search(context.Context, *PayChannelRequest, *PayChannelResponse) error
	// 支付通道列表
	List(context.Context, *PayChannelRequest, *PayChannelResponse) error
}

func RegisterPayChannelServiceHandler(s server.Server, hdlr PayChannelServiceHandler, opts ...server.HandlerOption) error {
	type payChannelService interface {
		Create(ctx context.Context, in *PayChannel, out *PayChannelResponse) error
		Update(ctx context.Context, in *PayChannel, out *PayChannelResponse) error
		Delete(ctx context.Context, in *PayChannel, out *PayChannelResponse) error
		Get(ctx context.Context, in *PayChannel, out *PayChannelResponse) error
		Search(ctx context.Context, in *PayChannelRequest, out *PayChannelResponse) error
		List(ctx context.Context, in *PayChannelRequest, out *PayChannelResponse) error
	}
	type PayChannelService struct {
		payChannelService
	}
	h := &payChannelServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PayChannelService{h}, opts...))
}

type payChannelServiceHandler struct {
	PayChannelServiceHandler
}

func (h *payChannelServiceHandler) Create(ctx context.Context, in *PayChannel, out *PayChannelResponse) error {
	return h.PayChannelServiceHandler.Create(ctx, in, out)
}

func (h *payChannelServiceHandler) Update(ctx context.Context, in *PayChannel, out *PayChannelResponse) error {
	return h.PayChannelServiceHandler.Update(ctx, in, out)
}

func (h *payChannelServiceHandler) Delete(ctx context.Context, in *PayChannel, out *PayChannelResponse) error {
	return h.PayChannelServiceHandler.Delete(ctx, in, out)
}

func (h *payChannelServiceHandler) Get(ctx context.Context, in *PayChannel, out *PayChannelResponse) error {
	return h.PayChannelServiceHandler.Get(ctx, in, out)
}

func (h *payChannelServiceHandler) Search(ctx context.Context, in *PayChannelRequest, out *PayChannelResponse) error {
	return h.PayChannelServiceHandler.Search(ctx, in, out)
}

func (h *payChannelServiceHandler) List(ctx context.Context, in *PayChannelRequest, out *PayChannelResponse) error {
	return h.PayChannelServiceHandler.List(ctx, in, out)
}
