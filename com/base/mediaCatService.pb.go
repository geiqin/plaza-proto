// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: mediaCatService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 公共媒体分类
type MediaCat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                 //ID
	Code        string      `protobuf:"bytes,2,opt,name=code,proto3" json:"code"`                              //编码
	Name        string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`                              //名称
	ParentId    int64       `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id"`     //父亲ID
	Ancestors   string      `protobuf:"bytes,5,opt,name=ancestors,proto3" json:"ancestors"`                    //祖级列表
	Description string      `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`                //描述
	Types       []string    `protobuf:"bytes,7,rep,name=types,proto3" json:"types"`                            //支持类型
	Sort        int32       `protobuf:"varint,8,opt,name=sort,proto3" json:"sort"`                             //排序
	Status      string      `protobuf:"bytes,9,opt,name=status,proto3" json:"status"`                          //状态
	CreatedAt   int64       `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at"` //创建时间
	UpdatedAt   int64       `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"` //修改时间
	Children    []*MediaCat `protobuf:"bytes,12,rep,name=children,proto3" json:"children"`
}

func (x *MediaCat) Reset() {
	*x = MediaCat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaCatService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaCat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaCat) ProtoMessage() {}

func (x *MediaCat) ProtoReflect() protoreflect.Message {
	mi := &file_mediaCatService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaCat.ProtoReflect.Descriptor instead.
func (*MediaCat) Descriptor() ([]byte, []int) {
	return file_mediaCatService_proto_rawDescGZIP(), []int{0}
}

func (x *MediaCat) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MediaCat) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MediaCat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MediaCat) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *MediaCat) GetAncestors() string {
	if x != nil {
		return x.Ancestors
	}
	return ""
}

func (x *MediaCat) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MediaCat) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *MediaCat) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MediaCat) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MediaCat) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MediaCat) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *MediaCat) GetChildren() []*MediaCat {
	if x != nil {
		return x.Children
	}
	return nil
}

// 公共媒体分类请求参数
type MediaCatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top       int32    `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64    `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sort      []string `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort"`
	DateRange []string `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int64  `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	//以下为自定义参数
	Code     string `protobuf:"bytes,11,opt,name=code,proto3" json:"code"`                          //编码
	Name     string `protobuf:"bytes,12,opt,name=name,proto3" json:"name"`                          //名称
	ParentId int64  `protobuf:"varint,13,opt,name=parent_id,json=parentId,proto3" json:"parent_id"` //父亲ID
	Type     string `protobuf:"bytes,14,opt,name=type,proto3" json:"type"`                          //类型
	Status   string `protobuf:"bytes,15,opt,name=status,proto3" json:"status"`                      //状态
}

func (x *MediaCatRequest) Reset() {
	*x = MediaCatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaCatService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaCatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaCatRequest) ProtoMessage() {}

func (x *MediaCatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mediaCatService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaCatRequest.ProtoReflect.Descriptor instead.
func (*MediaCatRequest) Descriptor() ([]byte, []int) {
	return file_mediaCatService_proto_rawDescGZIP(), []int{1}
}

func (x *MediaCatRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *MediaCatRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *MediaCatRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MediaCatRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *MediaCatRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *MediaCatRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *MediaCatRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *MediaCatRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MediaCatRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MediaCatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MediaCatRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *MediaCatRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MediaCatRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 公共媒体分类响应数据
type MediaCatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg    string          `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg"`
	Pager  *common.Pager   `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Entity *MediaCat       `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity"`
	Items  []*MediaCat     `protobuf:"bytes,4,rep,name=items,proto3" json:"items"`
	Tree   []*TreeNodeData `protobuf:"bytes,5,rep,name=tree,proto3" json:"tree"`
}

func (x *MediaCatResponse) Reset() {
	*x = MediaCatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mediaCatService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaCatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaCatResponse) ProtoMessage() {}

func (x *MediaCatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mediaCatService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaCatResponse.ProtoReflect.Descriptor instead.
func (*MediaCatResponse) Descriptor() ([]byte, []int) {
	return file_mediaCatService_proto_rawDescGZIP(), []int{2}
}

func (x *MediaCatResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MediaCatResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *MediaCatResponse) GetEntity() *MediaCat {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *MediaCatResponse) GetItems() []*MediaCat {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MediaCatResponse) GetTree() []*TreeNodeData {
	if x != nil {
		return x.Tree
	}
	return nil
}

var File_mediaCatService_proto protoreflect.FileDescriptor

var file_mediaCatService_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x02, 0x0a, 0x08,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x61, 0x74, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xb8, 0x02,
	0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x43, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x61, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x72,
	0x65, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x32, 0xcb, 0x03, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x61, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74,
	0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x43, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mediaCatService_proto_rawDescOnce sync.Once
	file_mediaCatService_proto_rawDescData = file_mediaCatService_proto_rawDesc
)

func file_mediaCatService_proto_rawDescGZIP() []byte {
	file_mediaCatService_proto_rawDescOnce.Do(func() {
		file_mediaCatService_proto_rawDescData = protoimpl.X.CompressGZIP(file_mediaCatService_proto_rawDescData)
	})
	return file_mediaCatService_proto_rawDescData
}

var file_mediaCatService_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_mediaCatService_proto_goTypes = []interface{}{
	(*MediaCat)(nil),         // 0: services.MediaCat
	(*MediaCatRequest)(nil),  // 1: services.MediaCatRequest
	(*MediaCatResponse)(nil), // 2: services.MediaCatResponse
	(*common.Pager)(nil),     // 3: common.Pager
	(*TreeNodeData)(nil),     // 4: services.TreeNodeData
}
var file_mediaCatService_proto_depIdxs = []int32{
	0,  // 0: services.MediaCat.children:type_name -> services.MediaCat
	3,  // 1: services.MediaCatResponse.pager:type_name -> common.Pager
	0,  // 2: services.MediaCatResponse.entity:type_name -> services.MediaCat
	0,  // 3: services.MediaCatResponse.items:type_name -> services.MediaCat
	4,  // 4: services.MediaCatResponse.tree:type_name -> services.TreeNodeData
	0,  // 5: services.MediaCatService.Create:input_type -> services.MediaCat
	0,  // 6: services.MediaCatService.Update:input_type -> services.MediaCat
	0,  // 7: services.MediaCatService.Delete:input_type -> services.MediaCat
	0,  // 8: services.MediaCatService.Get:input_type -> services.MediaCat
	1,  // 9: services.MediaCatService.List:input_type -> services.MediaCatRequest
	1,  // 10: services.MediaCatService.ListTree:input_type -> services.MediaCatRequest
	1,  // 11: services.MediaCatService.SelectTree:input_type -> services.MediaCatRequest
	2,  // 12: services.MediaCatService.Create:output_type -> services.MediaCatResponse
	2,  // 13: services.MediaCatService.Update:output_type -> services.MediaCatResponse
	2,  // 14: services.MediaCatService.Delete:output_type -> services.MediaCatResponse
	2,  // 15: services.MediaCatService.Get:output_type -> services.MediaCatResponse
	2,  // 16: services.MediaCatService.List:output_type -> services.MediaCatResponse
	2,  // 17: services.MediaCatService.ListTree:output_type -> services.MediaCatResponse
	2,  // 18: services.MediaCatService.SelectTree:output_type -> services.MediaCatResponse
	12, // [12:19] is the sub-list for method output_type
	5,  // [5:12] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_mediaCatService_proto_init() }
func file_mediaCatService_proto_init() {
	if File_mediaCatService_proto != nil {
		return
	}
	file_baseInfoService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mediaCatService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaCat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaCatService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaCatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mediaCatService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaCatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mediaCatService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mediaCatService_proto_goTypes,
		DependencyIndexes: file_mediaCatService_proto_depIdxs,
		MessageInfos:      file_mediaCatService_proto_msgTypes,
	}.Build()
	File_mediaCatService_proto = out.File
	file_mediaCatService_proto_rawDesc = nil
	file_mediaCatService_proto_goTypes = nil
	file_mediaCatService_proto_depIdxs = nil
}
