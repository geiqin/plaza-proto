// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: diyTemplateService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DiyTemplateService service

func NewDiyTemplateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DiyTemplateService service

type DiyTemplateService interface {
	// 装修模版新增
	Create(ctx context.Context, in *DiyTemplate, opts ...client.CallOption) (*DiyTemplateResponse, error)
	// 装修模版修改
	Update(ctx context.Context, in *DiyTemplate, opts ...client.CallOption) (*DiyTemplateResponse, error)
	// 装修模版删除
	Delete(ctx context.Context, in *DiyTemplate, opts ...client.CallOption) (*DiyTemplateResponse, error)
	// 装修模版详情
	Detail(ctx context.Context, in *DiyTemplate, opts ...client.CallOption) (*DiyTemplateResponse, error)
	// 装修模版内容
	GetTemplate(ctx context.Context, in *DiyTemplate, opts ...client.CallOption) (*DiyTemplateResponse, error)
	// 装修模版查询
	Search(ctx context.Context, in *DiyTemplateRequest, opts ...client.CallOption) (*DiyTemplateResponse, error)
	// 装修模版列表
	List(ctx context.Context, in *DiyTemplateRequest, opts ...client.CallOption) (*DiyTemplateResponse, error)
}

type diyTemplateService struct {
	c    client.Client
	name string
}

func NewDiyTemplateService(name string, c client.Client) DiyTemplateService {
	return &diyTemplateService{
		c:    c,
		name: name,
	}
}

func (c *diyTemplateService) Create(ctx context.Context, in *DiyTemplate, opts ...client.CallOption) (*DiyTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "DiyTemplateService.Create", in)
	out := new(DiyTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyTemplateService) Update(ctx context.Context, in *DiyTemplate, opts ...client.CallOption) (*DiyTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "DiyTemplateService.Update", in)
	out := new(DiyTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyTemplateService) Delete(ctx context.Context, in *DiyTemplate, opts ...client.CallOption) (*DiyTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "DiyTemplateService.Delete", in)
	out := new(DiyTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyTemplateService) Detail(ctx context.Context, in *DiyTemplate, opts ...client.CallOption) (*DiyTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "DiyTemplateService.Detail", in)
	out := new(DiyTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyTemplateService) GetTemplate(ctx context.Context, in *DiyTemplate, opts ...client.CallOption) (*DiyTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "DiyTemplateService.GetTemplate", in)
	out := new(DiyTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyTemplateService) Search(ctx context.Context, in *DiyTemplateRequest, opts ...client.CallOption) (*DiyTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "DiyTemplateService.Search", in)
	out := new(DiyTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diyTemplateService) List(ctx context.Context, in *DiyTemplateRequest, opts ...client.CallOption) (*DiyTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "DiyTemplateService.List", in)
	out := new(DiyTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiyTemplateService service

type DiyTemplateServiceHandler interface {
	// 装修模版新增
	Create(context.Context, *DiyTemplate, *DiyTemplateResponse) error
	// 装修模版修改
	Update(context.Context, *DiyTemplate, *DiyTemplateResponse) error
	// 装修模版删除
	Delete(context.Context, *DiyTemplate, *DiyTemplateResponse) error
	// 装修模版详情
	Detail(context.Context, *DiyTemplate, *DiyTemplateResponse) error
	// 装修模版内容
	GetTemplate(context.Context, *DiyTemplate, *DiyTemplateResponse) error
	// 装修模版查询
	Search(context.Context, *DiyTemplateRequest, *DiyTemplateResponse) error
	// 装修模版列表
	List(context.Context, *DiyTemplateRequest, *DiyTemplateResponse) error
}

func RegisterDiyTemplateServiceHandler(s server.Server, hdlr DiyTemplateServiceHandler, opts ...server.HandlerOption) error {
	type diyTemplateService interface {
		Create(ctx context.Context, in *DiyTemplate, out *DiyTemplateResponse) error
		Update(ctx context.Context, in *DiyTemplate, out *DiyTemplateResponse) error
		Delete(ctx context.Context, in *DiyTemplate, out *DiyTemplateResponse) error
		Detail(ctx context.Context, in *DiyTemplate, out *DiyTemplateResponse) error
		GetTemplate(ctx context.Context, in *DiyTemplate, out *DiyTemplateResponse) error
		Search(ctx context.Context, in *DiyTemplateRequest, out *DiyTemplateResponse) error
		List(ctx context.Context, in *DiyTemplateRequest, out *DiyTemplateResponse) error
	}
	type DiyTemplateService struct {
		diyTemplateService
	}
	h := &diyTemplateServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DiyTemplateService{h}, opts...))
}

type diyTemplateServiceHandler struct {
	DiyTemplateServiceHandler
}

func (h *diyTemplateServiceHandler) Create(ctx context.Context, in *DiyTemplate, out *DiyTemplateResponse) error {
	return h.DiyTemplateServiceHandler.Create(ctx, in, out)
}

func (h *diyTemplateServiceHandler) Update(ctx context.Context, in *DiyTemplate, out *DiyTemplateResponse) error {
	return h.DiyTemplateServiceHandler.Update(ctx, in, out)
}

func (h *diyTemplateServiceHandler) Delete(ctx context.Context, in *DiyTemplate, out *DiyTemplateResponse) error {
	return h.DiyTemplateServiceHandler.Delete(ctx, in, out)
}

func (h *diyTemplateServiceHandler) Detail(ctx context.Context, in *DiyTemplate, out *DiyTemplateResponse) error {
	return h.DiyTemplateServiceHandler.Detail(ctx, in, out)
}

func (h *diyTemplateServiceHandler) GetTemplate(ctx context.Context, in *DiyTemplate, out *DiyTemplateResponse) error {
	return h.DiyTemplateServiceHandler.GetTemplate(ctx, in, out)
}

func (h *diyTemplateServiceHandler) Search(ctx context.Context, in *DiyTemplateRequest, out *DiyTemplateResponse) error {
	return h.DiyTemplateServiceHandler.Search(ctx, in, out)
}

func (h *diyTemplateServiceHandler) List(ctx context.Context, in *DiyTemplateRequest, out *DiyTemplateResponse) error {
	return h.DiyTemplateServiceHandler.List(ctx, in, out)
}
