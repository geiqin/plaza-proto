// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: routineService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoutineService service

func NewRoutineServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoutineService service

type RoutineService interface {
	// 销售渠道新增
	Create(ctx context.Context, in *Routine, opts ...client.CallOption) (*RoutineResponse, error)
	// 销售渠道修改
	Update(ctx context.Context, in *Routine, opts ...client.CallOption) (*RoutineResponse, error)
	// 销售渠道删除
	Delete(ctx context.Context, in *Routine, opts ...client.CallOption) (*RoutineResponse, error)
	// 销售渠道获取
	Get(ctx context.Context, in *Routine, opts ...client.CallOption) (*RoutineResponse, error)
	// 销售渠道查询
	Search(ctx context.Context, in *RoutineRequest, opts ...client.CallOption) (*RoutineResponse, error)
	// 销售渠道列表
	List(ctx context.Context, in *RoutineRequest, opts ...client.CallOption) (*RoutineResponse, error)
}

type routineService struct {
	c    client.Client
	name string
}

func NewRoutineService(name string, c client.Client) RoutineService {
	return &routineService{
		c:    c,
		name: name,
	}
}

func (c *routineService) Create(ctx context.Context, in *Routine, opts ...client.CallOption) (*RoutineResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineService.Create", in)
	out := new(RoutineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineService) Update(ctx context.Context, in *Routine, opts ...client.CallOption) (*RoutineResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineService.Update", in)
	out := new(RoutineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineService) Delete(ctx context.Context, in *Routine, opts ...client.CallOption) (*RoutineResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineService.Delete", in)
	out := new(RoutineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineService) Get(ctx context.Context, in *Routine, opts ...client.CallOption) (*RoutineResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineService.Get", in)
	out := new(RoutineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineService) Search(ctx context.Context, in *RoutineRequest, opts ...client.CallOption) (*RoutineResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineService.Search", in)
	out := new(RoutineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineService) List(ctx context.Context, in *RoutineRequest, opts ...client.CallOption) (*RoutineResponse, error) {
	req := c.c.NewRequest(c.name, "RoutineService.List", in)
	out := new(RoutineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoutineService service

type RoutineServiceHandler interface {
	// 销售渠道新增
	Create(context.Context, *Routine, *RoutineResponse) error
	// 销售渠道修改
	Update(context.Context, *Routine, *RoutineResponse) error
	// 销售渠道删除
	Delete(context.Context, *Routine, *RoutineResponse) error
	// 销售渠道获取
	Get(context.Context, *Routine, *RoutineResponse) error
	// 销售渠道查询
	Search(context.Context, *RoutineRequest, *RoutineResponse) error
	// 销售渠道列表
	List(context.Context, *RoutineRequest, *RoutineResponse) error
}

func RegisterRoutineServiceHandler(s server.Server, hdlr RoutineServiceHandler, opts ...server.HandlerOption) error {
	type routineService interface {
		Create(ctx context.Context, in *Routine, out *RoutineResponse) error
		Update(ctx context.Context, in *Routine, out *RoutineResponse) error
		Delete(ctx context.Context, in *Routine, out *RoutineResponse) error
		Get(ctx context.Context, in *Routine, out *RoutineResponse) error
		Search(ctx context.Context, in *RoutineRequest, out *RoutineResponse) error
		List(ctx context.Context, in *RoutineRequest, out *RoutineResponse) error
	}
	type RoutineService struct {
		routineService
	}
	h := &routineServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoutineService{h}, opts...))
}

type routineServiceHandler struct {
	RoutineServiceHandler
}

func (h *routineServiceHandler) Create(ctx context.Context, in *Routine, out *RoutineResponse) error {
	return h.RoutineServiceHandler.Create(ctx, in, out)
}

func (h *routineServiceHandler) Update(ctx context.Context, in *Routine, out *RoutineResponse) error {
	return h.RoutineServiceHandler.Update(ctx, in, out)
}

func (h *routineServiceHandler) Delete(ctx context.Context, in *Routine, out *RoutineResponse) error {
	return h.RoutineServiceHandler.Delete(ctx, in, out)
}

func (h *routineServiceHandler) Get(ctx context.Context, in *Routine, out *RoutineResponse) error {
	return h.RoutineServiceHandler.Get(ctx, in, out)
}

func (h *routineServiceHandler) Search(ctx context.Context, in *RoutineRequest, out *RoutineResponse) error {
	return h.RoutineServiceHandler.Search(ctx, in, out)
}

func (h *routineServiceHandler) List(ctx context.Context, in *RoutineRequest, out *RoutineResponse) error {
	return h.RoutineServiceHandler.List(ctx, in, out)
}
