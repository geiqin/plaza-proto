// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: genCodeService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 生成代码
type GenCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                        //ID
	DbName       string           `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name"`                   //数据库名
	TableName    string           `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name"`          //表名称
	ClassName    string           `protobuf:"bytes,4,opt,name=class_name,json=className,proto3" json:"class_name"`          //类名称
	PackageName  string           `protobuf:"bytes,5,opt,name=package_name,json=packageName,proto3" json:"package_name"`    //包名称
	BusinessName string           `protobuf:"bytes,6,opt,name=business_name,json=businessName,proto3" json:"business_name"` //业务名称
	Author       string           `protobuf:"bytes,7,opt,name=author,proto3" json:"author"`                                 //作者
	TablePrefix  string           `protobuf:"bytes,8,opt,name=table_prefix,json=tablePrefix,proto3" json:"table_prefix"`    //表前缀
	IsOverride   string           `protobuf:"bytes,9,opt,name=is_override,json=isOverride,proto3" json:"is_override"`       //是否覆盖
	IsConfiged   string           `protobuf:"bytes,10,opt,name=is_configed,json=isConfiged,proto3" json:"is_configed"`      //
	Engine       string           `protobuf:"bytes,11,opt,name=engine,proto3" json:"engine"`                                //
	Charset      string           `protobuf:"bytes,12,opt,name=charset,proto3" json:"charset"`                              //
	Comment      string           `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment"`                              //
	CreatedAt    string           `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt    string           `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Columns      []*GenCodeColumn `protobuf:"bytes,16,rep,name=columns,proto3" json:"columns"`
	Disabled     bool             `protobuf:"varint,17,opt,name=disabled,proto3" json:"disabled"` //
}

func (x *GenCode) Reset() {
	*x = GenCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genCodeService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenCode) ProtoMessage() {}

func (x *GenCode) ProtoReflect() protoreflect.Message {
	mi := &file_genCodeService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenCode.ProtoReflect.Descriptor instead.
func (*GenCode) Descriptor() ([]byte, []int) {
	return file_genCodeService_proto_rawDescGZIP(), []int{0}
}

func (x *GenCode) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GenCode) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *GenCode) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *GenCode) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *GenCode) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *GenCode) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *GenCode) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *GenCode) GetTablePrefix() string {
	if x != nil {
		return x.TablePrefix
	}
	return ""
}

func (x *GenCode) GetIsOverride() string {
	if x != nil {
		return x.IsOverride
	}
	return ""
}

func (x *GenCode) GetIsConfiged() string {
	if x != nil {
		return x.IsConfiged
	}
	return ""
}

func (x *GenCode) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *GenCode) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *GenCode) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GenCode) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GenCode) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *GenCode) GetColumns() []*GenCodeColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *GenCode) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type GenCodeColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                         //ID
	TableName   string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name"`           //表名称
	ColumnName  string `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name"`        //列名称
	ColumnType  string `protobuf:"bytes,4,opt,name=column_type,json=columnType,proto3" json:"column_type"`        //列类型
	ColumnSize  int64  `protobuf:"varint,5,opt,name=column_size,json=columnSize,proto3" json:"column_size"`       //列大小
	FieldName   string `protobuf:"bytes,6,opt,name=field_name,json=fieldName,proto3" json:"field_name"`           //字段名称
	FieldType   string `protobuf:"bytes,7,opt,name=field_type,json=fieldType,proto3" json:"field_type"`           //字段类型
	FieldSort   string `protobuf:"bytes,8,opt,name=field_sort,json=fieldSort,proto3" json:"field_sort"`           //字段排序
	Comment     string `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment"`                                //注释
	IsRequired  bool   `protobuf:"varint,10,opt,name=is_required,json=isRequired,proto3" json:"is_required"`      //是否必填
	ShowInList  bool   `protobuf:"varint,11,opt,name=show_in_list,json=showInList,proto3" json:"show_in_list"`    //是否在列表中显示
	ShowInForm  bool   `protobuf:"varint,12,opt,name=show_in_form,json=showInForm,proto3" json:"show_in_form"`    //是否在表单中显示
	ShowInQuery bool   `protobuf:"varint,13,opt,name=show_in_query,json=showInQuery,proto3" json:"show_in_query"` //是否在查询中显示
	FormType    string `protobuf:"bytes,14,opt,name=form_type,json=formType,proto3" json:"form_type"`             //表单类型
	QueryType   string `protobuf:"bytes,15,opt,name=query_type,json=queryType,proto3" json:"query_type"`          //查询方式
	GoType      string `protobuf:"bytes,16,opt,name=go_type,json=goType,proto3" json:"go_type"`
	TsType      string `protobuf:"bytes,17,opt,name=ts_type,json=tsType,proto3" json:"ts_type"`
	ProtoType   string `protobuf:"bytes,18,opt,name=proto_type,json=protoType,proto3" json:"proto_type"`
	CreatedAt   string `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt   string `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *GenCodeColumn) Reset() {
	*x = GenCodeColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genCodeService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenCodeColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenCodeColumn) ProtoMessage() {}

func (x *GenCodeColumn) ProtoReflect() protoreflect.Message {
	mi := &file_genCodeService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenCodeColumn.ProtoReflect.Descriptor instead.
func (*GenCodeColumn) Descriptor() ([]byte, []int) {
	return file_genCodeService_proto_rawDescGZIP(), []int{1}
}

func (x *GenCodeColumn) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GenCodeColumn) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *GenCodeColumn) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *GenCodeColumn) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

func (x *GenCodeColumn) GetColumnSize() int64 {
	if x != nil {
		return x.ColumnSize
	}
	return 0
}

func (x *GenCodeColumn) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *GenCodeColumn) GetFieldType() string {
	if x != nil {
		return x.FieldType
	}
	return ""
}

func (x *GenCodeColumn) GetFieldSort() string {
	if x != nil {
		return x.FieldSort
	}
	return ""
}

func (x *GenCodeColumn) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GenCodeColumn) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *GenCodeColumn) GetShowInList() bool {
	if x != nil {
		return x.ShowInList
	}
	return false
}

func (x *GenCodeColumn) GetShowInForm() bool {
	if x != nil {
		return x.ShowInForm
	}
	return false
}

func (x *GenCodeColumn) GetShowInQuery() bool {
	if x != nil {
		return x.ShowInQuery
	}
	return false
}

func (x *GenCodeColumn) GetFormType() string {
	if x != nil {
		return x.FormType
	}
	return ""
}

func (x *GenCodeColumn) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *GenCodeColumn) GetGoType() string {
	if x != nil {
		return x.GoType
	}
	return ""
}

func (x *GenCodeColumn) GetTsType() string {
	if x != nil {
		return x.TsType
	}
	return ""
}

func (x *GenCodeColumn) GetProtoType() string {
	if x != nil {
		return x.ProtoType
	}
	return ""
}

func (x *GenCodeColumn) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GenCodeColumn) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GenDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`       //
	Charset string `protobuf:"bytes,2,opt,name=charset,proto3" json:"charset"` //
}

func (x *GenDatabase) Reset() {
	*x = GenDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genCodeService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenDatabase) ProtoMessage() {}

func (x *GenDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_genCodeService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenDatabase.ProtoReflect.Descriptor instead.
func (*GenDatabase) Descriptor() ([]byte, []int) {
	return file_genCodeService_proto_rawDescGZIP(), []int{2}
}

func (x *GenDatabase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenDatabase) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

type GenTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                               //ID
	DbName    string `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name"`          //数据库名
	TableName string `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name"` //表名称
	Engine    string `protobuf:"bytes,4,opt,name=engine,proto3" json:"engine"`                        //
	Charset   string `protobuf:"bytes,5,opt,name=charset,proto3" json:"charset"`                      //
	Comment   string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment"`                      //
	CreatedAt string `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt string `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Selected  bool   `protobuf:"varint,9,opt,name=selected,proto3" json:"selected"` //是否已选择
}

func (x *GenTable) Reset() {
	*x = GenTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genCodeService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenTable) ProtoMessage() {}

func (x *GenTable) ProtoReflect() protoreflect.Message {
	mi := &file_genCodeService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenTable.ProtoReflect.Descriptor instead.
func (*GenTable) Descriptor() ([]byte, []int) {
	return file_genCodeService_proto_rawDescGZIP(), []int{3}
}

func (x *GenTable) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GenTable) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *GenTable) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *GenTable) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *GenTable) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *GenTable) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GenTable) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GenTable) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *GenTable) GetSelected() bool {
	if x != nil {
		return x.Selected
	}
	return false
}

type GenPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path"`
	FileName string `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name"`
	Content  string `protobuf:"bytes,5,opt,name=content,proto3" json:"content"`
}

func (x *GenPreview) Reset() {
	*x = GenPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genCodeService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenPreview) ProtoMessage() {}

func (x *GenPreview) ProtoReflect() protoreflect.Message {
	mi := &file_genCodeService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenPreview.ProtoReflect.Descriptor instead.
func (*GenPreview) Descriptor() ([]byte, []int) {
	return file_genCodeService_proto_rawDescGZIP(), []int{4}
}

func (x *GenPreview) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GenPreview) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenPreview) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GenPreview) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *GenPreview) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 生成代码请求参数
type GenCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top       int32    `protobuf:"varint,1,opt,name=top,proto3" json:"top"`
	Paged     int64    `protobuf:"varint,2,opt,name=paged,proto3" json:"paged"`
	PageSize  int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords  string   `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords"`
	Sort      []string `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort"`
	DateRange []string `protobuf:"bytes,6,rep,name=date_range,json=dateRange,proto3" json:"date_range"`
	Ids       []int64  `protobuf:"varint,7,rep,packed,name=ids,proto3" json:"ids"`
	Id        int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	//以下为自定义参数
	DbName     string `protobuf:"bytes,10,opt,name=db_name,json=dbName,proto3" json:"db_name"`             //
	TableName  string `protobuf:"bytes,11,opt,name=table_name,json=tableName,proto3" json:"table_name"`    //
	IsOverride string `protobuf:"bytes,12,opt,name=is_override,json=isOverride,proto3" json:"is_override"` //
	IsConfiged string `protobuf:"bytes,13,opt,name=is_configed,json=isConfiged,proto3" json:"is_configed"` //
	Database   string `protobuf:"bytes,15,opt,name=database,proto3" json:"database"`
}

func (x *GenCodeRequest) Reset() {
	*x = GenCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genCodeService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenCodeRequest) ProtoMessage() {}

func (x *GenCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_genCodeService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenCodeRequest.ProtoReflect.Descriptor instead.
func (*GenCodeRequest) Descriptor() ([]byte, []int) {
	return file_genCodeService_proto_rawDescGZIP(), []int{5}
}

func (x *GenCodeRequest) GetTop() int32 {
	if x != nil {
		return x.Top
	}
	return 0
}

func (x *GenCodeRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *GenCodeRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GenCodeRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *GenCodeRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *GenCodeRequest) GetDateRange() []string {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GenCodeRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GenCodeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GenCodeRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *GenCodeRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *GenCodeRequest) GetIsOverride() string {
	if x != nil {
		return x.IsOverride
	}
	return ""
}

func (x *GenCodeRequest) GetIsConfiged() string {
	if x != nil {
		return x.IsConfiged
	}
	return ""
}

func (x *GenCodeRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type GenCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity    *GenCode       `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager     *common.Pager  `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items     []*GenCode     `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Databases []*GenDatabase `protobuf:"bytes,4,rep,name=databases,proto3" json:"databases"`
	Preview   []*GenPreview  `protobuf:"bytes,6,rep,name=Preview,proto3" json:"Preview"`
	Msg       string         `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg"`
}

func (x *GenCodeResponse) Reset() {
	*x = GenCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genCodeService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenCodeResponse) ProtoMessage() {}

func (x *GenCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_genCodeService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenCodeResponse.ProtoReflect.Descriptor instead.
func (*GenCodeResponse) Descriptor() ([]byte, []int) {
	return file_genCodeService_proto_rawDescGZIP(), []int{6}
}

func (x *GenCodeResponse) GetEntity() *GenCode {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *GenCodeResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *GenCodeResponse) GetItems() []*GenCode {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GenCodeResponse) GetDatabases() []*GenDatabase {
	if x != nil {
		return x.Databases
	}
	return nil
}

func (x *GenCodeResponse) GetPreview() []*GenPreview {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *GenCodeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GenCodeTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *GenCode      `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items  []*GenTable   `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Msg    string        `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg"`
}

func (x *GenCodeTableResponse) Reset() {
	*x = GenCodeTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genCodeService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenCodeTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenCodeTableResponse) ProtoMessage() {}

func (x *GenCodeTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_genCodeService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenCodeTableResponse.ProtoReflect.Descriptor instead.
func (*GenCodeTableResponse) Descriptor() ([]byte, []int) {
	return file_genCodeService_proto_rawDescGZIP(), []int{7}
}

func (x *GenCodeTableResponse) GetEntity() *GenCode {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *GenCodeTableResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *GenCodeTableResponse) GetItems() []*GenTable {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GenCodeTableResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_genCodeService_proto protoreflect.FileDescriptor

var file_genCodeService_proto_rawDesc = []byte{
	0x0a, 0x14, 0x67, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x04, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0xec, 0x04, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x3b, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74,
	0x22, 0xf8, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x7d, 0x0a, 0x0a, 0x47,
	0x65, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xdc, 0x02, 0x0a, 0x0e, 0x47,
	0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x0f, 0x47, 0x65,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x07, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa2, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x32, 0x8b, 0x05, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x19, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x06, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x04,
	0x73, 0x79, 0x6e, 0x63, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x08, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_genCodeService_proto_rawDescOnce sync.Once
	file_genCodeService_proto_rawDescData = file_genCodeService_proto_rawDesc
)

func file_genCodeService_proto_rawDescGZIP() []byte {
	file_genCodeService_proto_rawDescOnce.Do(func() {
		file_genCodeService_proto_rawDescData = protoimpl.X.CompressGZIP(file_genCodeService_proto_rawDescData)
	})
	return file_genCodeService_proto_rawDescData
}

var file_genCodeService_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_genCodeService_proto_goTypes = []interface{}{
	(*GenCode)(nil),              // 0: services.GenCode
	(*GenCodeColumn)(nil),        // 1: services.GenCodeColumn
	(*GenDatabase)(nil),          // 2: services.GenDatabase
	(*GenTable)(nil),             // 3: services.GenTable
	(*GenPreview)(nil),           // 4: services.GenPreview
	(*GenCodeRequest)(nil),       // 5: services.GenCodeRequest
	(*GenCodeResponse)(nil),      // 6: services.GenCodeResponse
	(*GenCodeTableResponse)(nil), // 7: services.GenCodeTableResponse
	(*common.Pager)(nil),         // 8: common.Pager
}
var file_genCodeService_proto_depIdxs = []int32{
	1,  // 0: services.GenCode.columns:type_name -> services.GenCodeColumn
	0,  // 1: services.GenCodeResponse.entity:type_name -> services.GenCode
	8,  // 2: services.GenCodeResponse.pager:type_name -> common.Pager
	0,  // 3: services.GenCodeResponse.items:type_name -> services.GenCode
	2,  // 4: services.GenCodeResponse.databases:type_name -> services.GenDatabase
	4,  // 5: services.GenCodeResponse.Preview:type_name -> services.GenPreview
	0,  // 6: services.GenCodeTableResponse.entity:type_name -> services.GenCode
	8,  // 7: services.GenCodeTableResponse.pager:type_name -> common.Pager
	3,  // 8: services.GenCodeTableResponse.items:type_name -> services.GenTable
	0,  // 9: services.GenCodeService.Create:input_type -> services.GenCode
	0,  // 10: services.GenCodeService.Update:input_type -> services.GenCode
	5,  // 11: services.GenCodeService.Delete:input_type -> services.GenCodeRequest
	0,  // 12: services.GenCodeService.Get:input_type -> services.GenCode
	5,  // 13: services.GenCodeService.Search:input_type -> services.GenCodeRequest
	5,  // 14: services.GenCodeService.Databases:input_type -> services.GenCodeRequest
	5,  // 15: services.GenCodeService.Tables:input_type -> services.GenCodeRequest
	5,  // 16: services.GenCodeService.sync:input_type -> services.GenCodeRequest
	5,  // 17: services.GenCodeService.Preview:input_type -> services.GenCodeRequest
	5,  // 18: services.GenCodeService.Generate:input_type -> services.GenCodeRequest
	6,  // 19: services.GenCodeService.Create:output_type -> services.GenCodeResponse
	6,  // 20: services.GenCodeService.Update:output_type -> services.GenCodeResponse
	6,  // 21: services.GenCodeService.Delete:output_type -> services.GenCodeResponse
	6,  // 22: services.GenCodeService.Get:output_type -> services.GenCodeResponse
	6,  // 23: services.GenCodeService.Search:output_type -> services.GenCodeResponse
	6,  // 24: services.GenCodeService.Databases:output_type -> services.GenCodeResponse
	7,  // 25: services.GenCodeService.Tables:output_type -> services.GenCodeTableResponse
	6,  // 26: services.GenCodeService.sync:output_type -> services.GenCodeResponse
	6,  // 27: services.GenCodeService.Preview:output_type -> services.GenCodeResponse
	6,  // 28: services.GenCodeService.Generate:output_type -> services.GenCodeResponse
	19, // [19:29] is the sub-list for method output_type
	9,  // [9:19] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_genCodeService_proto_init() }
func file_genCodeService_proto_init() {
	if File_genCodeService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_genCodeService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genCodeService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenCodeColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genCodeService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genCodeService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genCodeService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genCodeService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genCodeService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genCodeService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenCodeTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_genCodeService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_genCodeService_proto_goTypes,
		DependencyIndexes: file_genCodeService_proto_depIdxs,
		MessageInfos:      file_genCodeService_proto_msgTypes,
	}.Build()
	File_genCodeService_proto = out.File
	file_genCodeService_proto_rawDesc = nil
	file_genCodeService_proto_goTypes = nil
	file_genCodeService_proto_depIdxs = nil
}
