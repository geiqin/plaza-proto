// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pageLinkService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PageLinkService service

func NewPageLinkServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PageLinkService service

type PageLinkService interface {
	// 页面链接新增
	Create(ctx context.Context, in *PageLink, opts ...client.CallOption) (*PageLinkResponse, error)
	// 页面链接修改
	Update(ctx context.Context, in *PageLink, opts ...client.CallOption) (*PageLinkResponse, error)
	// 页面链接删除
	Delete(ctx context.Context, in *PageLink, opts ...client.CallOption) (*PageLinkResponse, error)
	// 页面链接获取
	Get(ctx context.Context, in *PageLink, opts ...client.CallOption) (*PageLinkResponse, error)
	// 页面链接查询
	Search(ctx context.Context, in *PageLinkRequest, opts ...client.CallOption) (*PageLinkResponse, error)
	// 页面链接列表
	List(ctx context.Context, in *PageLinkRequest, opts ...client.CallOption) (*PageLinkResponse, error)
}

type pageLinkService struct {
	c    client.Client
	name string
}

func NewPageLinkService(name string, c client.Client) PageLinkService {
	return &pageLinkService{
		c:    c,
		name: name,
	}
}

func (c *pageLinkService) Create(ctx context.Context, in *PageLink, opts ...client.CallOption) (*PageLinkResponse, error) {
	req := c.c.NewRequest(c.name, "PageLinkService.Create", in)
	out := new(PageLinkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageLinkService) Update(ctx context.Context, in *PageLink, opts ...client.CallOption) (*PageLinkResponse, error) {
	req := c.c.NewRequest(c.name, "PageLinkService.Update", in)
	out := new(PageLinkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageLinkService) Delete(ctx context.Context, in *PageLink, opts ...client.CallOption) (*PageLinkResponse, error) {
	req := c.c.NewRequest(c.name, "PageLinkService.Delete", in)
	out := new(PageLinkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageLinkService) Get(ctx context.Context, in *PageLink, opts ...client.CallOption) (*PageLinkResponse, error) {
	req := c.c.NewRequest(c.name, "PageLinkService.Get", in)
	out := new(PageLinkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageLinkService) Search(ctx context.Context, in *PageLinkRequest, opts ...client.CallOption) (*PageLinkResponse, error) {
	req := c.c.NewRequest(c.name, "PageLinkService.Search", in)
	out := new(PageLinkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageLinkService) List(ctx context.Context, in *PageLinkRequest, opts ...client.CallOption) (*PageLinkResponse, error) {
	req := c.c.NewRequest(c.name, "PageLinkService.List", in)
	out := new(PageLinkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PageLinkService service

type PageLinkServiceHandler interface {
	// 页面链接新增
	Create(context.Context, *PageLink, *PageLinkResponse) error
	// 页面链接修改
	Update(context.Context, *PageLink, *PageLinkResponse) error
	// 页面链接删除
	Delete(context.Context, *PageLink, *PageLinkResponse) error
	// 页面链接获取
	Get(context.Context, *PageLink, *PageLinkResponse) error
	// 页面链接查询
	Search(context.Context, *PageLinkRequest, *PageLinkResponse) error
	// 页面链接列表
	List(context.Context, *PageLinkRequest, *PageLinkResponse) error
}

func RegisterPageLinkServiceHandler(s server.Server, hdlr PageLinkServiceHandler, opts ...server.HandlerOption) error {
	type pageLinkService interface {
		Create(ctx context.Context, in *PageLink, out *PageLinkResponse) error
		Update(ctx context.Context, in *PageLink, out *PageLinkResponse) error
		Delete(ctx context.Context, in *PageLink, out *PageLinkResponse) error
		Get(ctx context.Context, in *PageLink, out *PageLinkResponse) error
		Search(ctx context.Context, in *PageLinkRequest, out *PageLinkResponse) error
		List(ctx context.Context, in *PageLinkRequest, out *PageLinkResponse) error
	}
	type PageLinkService struct {
		pageLinkService
	}
	h := &pageLinkServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PageLinkService{h}, opts...))
}

type pageLinkServiceHandler struct {
	PageLinkServiceHandler
}

func (h *pageLinkServiceHandler) Create(ctx context.Context, in *PageLink, out *PageLinkResponse) error {
	return h.PageLinkServiceHandler.Create(ctx, in, out)
}

func (h *pageLinkServiceHandler) Update(ctx context.Context, in *PageLink, out *PageLinkResponse) error {
	return h.PageLinkServiceHandler.Update(ctx, in, out)
}

func (h *pageLinkServiceHandler) Delete(ctx context.Context, in *PageLink, out *PageLinkResponse) error {
	return h.PageLinkServiceHandler.Delete(ctx, in, out)
}

func (h *pageLinkServiceHandler) Get(ctx context.Context, in *PageLink, out *PageLinkResponse) error {
	return h.PageLinkServiceHandler.Get(ctx, in, out)
}

func (h *pageLinkServiceHandler) Search(ctx context.Context, in *PageLinkRequest, out *PageLinkResponse) error {
	return h.PageLinkServiceHandler.Search(ctx, in, out)
}

func (h *pageLinkServiceHandler) List(ctx context.Context, in *PageLinkRequest, out *PageLinkResponse) error {
	return h.PageLinkServiceHandler.List(ctx, in, out)
}
